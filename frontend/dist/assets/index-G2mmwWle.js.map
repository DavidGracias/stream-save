{"version":3,"file":"index-G2mmwWle.js","sources":["../../node_modules/react-dom/client.js","../../node_modules/react-router/dist/development/chunk-ZYFC6VSF.mjs","../../src/components/Navigation.tsx","../../src/components/Home/HeaderSection.tsx","../../src/components/Home/ActionButtons.tsx","../../src/components/Home/FeatureCards.tsx","../../src/pages/Home.tsx","../../src/utils/index.ts","../../src/components/Configure/ConfigureHeader.tsx","../../src/components/Configure/CredentialsForm.tsx","../../src/components/Configure/ConnectionUrlForm.tsx","../../src/components/Configure/InstallationSection.tsx","../../src/assets/stremio_symbol.png","../../src/components/Configure/ActionButtons.tsx","../../src/components/Configure/HelpDialog.tsx","../../src/components/Configure/SuccessSnackbar.tsx","../../src/pages/Configure.tsx","../../src/components/Manage/ManageHeader.tsx","../../src/components/Manage/StatsCards.tsx","../../src/components/Manage/SearchAndFilter.tsx","../../src/components/Manage/AddContentButton.tsx","../../src/components/Manage/ContentTable.tsx","../../src/components/Manage/LoadingState.tsx","../../src/components/Manage/ErrorState.tsx","../../src/components/Manage/AddContentForm.tsx","../../src/components/Manage/AddContentDialog.tsx","../../src/pages/Manage.tsx","../../src/components/Manage/useAddContentForm.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * react-router v7.8.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n\n// lib/router/history.ts\nvar Action = /* @__PURE__ */ ((Action2) => {\n  Action2[\"Pop\"] = \"POP\";\n  Action2[\"Push\"] = \"PUSH\";\n  Action2[\"Replace\"] = \"REPLACE\";\n  return Action2;\n})(Action || {});\nvar PopStateEventType = \"popstate\";\nfunction createMemoryHistory(options = {}) {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries;\n  entries = initialEntries.map(\n    (entry, index2) => createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index2 === 0 ? \"default\" : void 0\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = \"POP\" /* Pop */;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state = null, key) {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n  function createHref2(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref2,\n    createURL(to) {\n      return new URL(createHref2(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = \"PUSH\" /* Push */;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = \"REPLACE\" /* Replace */;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = \"POP\" /* Pop */;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\nfunction createBrowserHistory(options = {}) {\n  function createBrowserLocation(window2, globalHistory) {\n    let { pathname, search, hash } = window2.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state && globalHistory.state.usr || null,\n      globalHistory.state && globalHistory.state.key || \"default\"\n    );\n  }\n  function createBrowserHref(window2, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\nfunction createHashHistory(options = {}) {\n  function createHashLocation(window2, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window2.location.hash.substring(1));\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state && globalHistory.state.usr || null,\n      globalHistory.state && globalHistory.state.key || \"default\"\n    );\n  }\n  function createHashHref(window2, to) {\n    let base = window2.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window2.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      throw new Error(message);\n    } catch (e) {\n    }\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substring(2, 10);\n}\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\nfunction createLocation(current, to, state = null, key) {\n  let location = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...typeof to === \"string\" ? parsePath(to) : to,\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  };\n  return location;\n}\nfunction createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\"\n}) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substring(hashIndex);\n      path = path.substring(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substring(searchIndex);\n      path = path.substring(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {\n  let { window: window2 = document.defaultView, v5Compat = false } = options;\n  let globalHistory = window2.history;\n  let action = \"POP\" /* Pop */;\n  let listener = null;\n  let index = getIndex();\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n  function handlePop() {\n    action = \"POP\" /* Pop */;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n  function push(to, state) {\n    action = \"PUSH\" /* Push */;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      window2.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n  function replace2(to, state) {\n    action = \"REPLACE\" /* Replace */;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n  function createURL(to) {\n    return createBrowserURLImpl(to);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window2, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window2.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window2.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref2(window2, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace: replace2,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\nfunction createBrowserURLImpl(to, isAbsolute = false) {\n  let base = \"http://localhost\";\n  if (typeof window !== \"undefined\") {\n    base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  }\n  invariant(base, \"No window.location.(origin|href) available to create URL\");\n  let href = typeof to === \"string\" ? to : createPath(to);\n  href = href.replace(/ $/, \"%20\");\n  if (!isAbsolute && href.startsWith(\"//\")) {\n    href = base + href;\n  }\n  return new URL(href, base);\n}\n\n// lib/router/utils.ts\nfunction unstable_createContext(defaultValue) {\n  return { defaultValue };\n}\nvar _map;\nvar unstable_RouterContextProvider = class {\n  /**\n   * Create a new `unstable_RouterContextProvider` instance\n   * @param init An optional initial context map to populate the provider with\n   */\n  constructor(init) {\n    __privateAdd(this, _map, /* @__PURE__ */ new Map());\n    if (init) {\n      for (let [context, value] of init) {\n        this.set(context, value);\n      }\n    }\n  }\n  /**\n   * Access a value from the context. If no value has been set for the context,\n   * it will return the context's `defaultValue` if provided, or throw an error\n   * if no `defaultValue` was set.\n   * @param context The context to get the value for\n   * @returns The value for the context, or the context's `defaultValue` if no\n   * value was set\n   */\n  get(context) {\n    if (__privateGet(this, _map).has(context)) {\n      return __privateGet(this, _map).get(context);\n    }\n    if (context.defaultValue !== void 0) {\n      return context.defaultValue;\n    }\n    throw new Error(\"No value found for context\");\n  }\n  /**\n   * Set a value for the context. If the context already has a value set, this\n   * will overwrite it.\n   *\n   * @param context The context to set the value for\n   * @param value The value to set for the context\n   * @returns {void}\n   */\n  set(context, value) {\n    __privateGet(this, _map).set(context, value);\n  }\n};\n_map = new WeakMap();\nvar unsupportedLazyRouteObjectKeys = /* @__PURE__ */ new Set([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\"\n]);\nfunction isUnsupportedLazyRouteObjectKey(key) {\n  return unsupportedLazyRouteObjectKeys.has(\n    key\n  );\n}\nvar unsupportedLazyRouteFunctionKeys = /* @__PURE__ */ new Set([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"unstable_middleware\",\n  \"children\"\n]);\nfunction isUnsupportedLazyRouteFunctionKey(key) {\n  return unsupportedLazyRouteFunctionKeys.has(\n    key\n  );\n}\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath = [], manifest = {}, allowInPlaceMutations = false) {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      allowInPlaceMutations || !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route id's must be globally unique within Data Router usages`\n    );\n    if (isIndexRoute(route)) {\n      let indexRoute = {\n        ...route,\n        ...mapRouteProperties2(route),\n        id\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = {\n        ...route,\n        ...mapRouteProperties2(route),\n        id,\n        children: void 0\n      };\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties2,\n          treePath,\n          manifest,\n          allowInPlaceMutations\n        );\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\nfunction matchRoutes(routes, locationArg, basename = \"/\") {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    loaderData: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = \"\") {\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === void 0 ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path \"${parentPath}\" is not valid. An absolute child route path must start with the combined path of all its parent routes.`\n      );\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  let isOptional = first.endsWith(\"?\");\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  result.push(\n    ...restExploded.map(\n      (subpath) => subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  return result.map(\n    (exploded) => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(\n    (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(\n      a.routesMeta.map((meta) => meta.childrenIndex),\n      b.routesMeta.map((meta) => meta.childrenIndex)\n    )\n  );\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = (s) => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter((s) => !isSplat(s)).reduce(\n    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue),\n    initialScore\n  );\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? (\n    // If two routes are siblings, we should try to match the earlier sibling\n    // first. This allows people to have fine-grained control over the matching\n    // behavior by simply putting routes with identical paths in the order they\n    // want them tried.\n    a[a.length - 1] - b[b.length - 1]\n  ) : (\n    // Otherwise, it doesn't really make sense to rank non-siblings by index,\n    // so they sort equally.\n    0\n  );\n}\nfunction matchRouteBranch(branch, pathname, allowPartial = false) {\n  let { routesMeta } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false\n        },\n        remainingPathname\n      );\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\nfunction generatePath(originalPath, params = {}) {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were \"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must always follow a \\`/\\` in the pattern. To get rid of this warning, please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify2 = (p) => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      return stringify2(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n      return stringify2(param);\n    }\n    return segment.replace(/\\?$/g, \"\");\n  }).filter((segment) => !!segment);\n  return prefix + segments.join(\"/\");\n}\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce(\n    (memo2, { paramName, isOptional }, index) => {\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n      }\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo2[paramName] = void 0;\n      } else {\n        memo2[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo2;\n    },\n    {}\n  );\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive = false, end = true) {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were \"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must always follow a \\`/\\` in the pattern. To get rid of this warning, please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\").replace(/^\\/*/, \"/\").replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\").replace(\n    /\\/:([\\w-]+)(\\?)?/g,\n    (_, paramName, isOptional) => {\n      params.push({ paramName, isOptional: isOptional != null });\n      return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n    }\n  );\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" : \"(?:\\\\/(.+)|\\\\/*)$\";\n  } else if (end) {\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n  }\n  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`\n    );\n    return value;\n  }\n}\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction prependBasename({\n  basename,\n  pathname\n}) {\n  return pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n}\nfunction resolvePath(to, fromPathname = \"/\") {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return `Cannot include a '${char}' character in a manually specified \\`to.${field}\\` field [${JSON.stringify(\n    path\n  )}].  Please separate it out to the \\`to.${dest}\\` field. Alternatively you may provide the full path as a string in <Link to=\"...\"> and the router will parse it for you.`;\n}\nfunction getPathContributingMatches(matches) {\n  return matches.filter(\n    (match, index) => index === 0 || match.route.path && match.route.path.length > 0\n  );\n}\nfunction getResolveToMatches(matches) {\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches.map(\n    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n  );\n}\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\nvar joinPaths = (paths) => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\nvar normalizePathname = (pathname) => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\nvar normalizeSearch = (search) => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\nvar normalizeHash = (hash) => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\nvar DataWithResponseInit = class {\n  constructor(data2, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data2;\n    this.init = init || null;\n  }\n};\nfunction data(data2, init) {\n  return new DataWithResponseInit(\n    data2,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\nvar redirect = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, { ...responseInit, headers });\n};\nvar redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\nvar replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\nvar ErrorResponseImpl = class {\n  constructor(status, statusText, data2, internal = false) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data2 instanceof Error) {\n      this.data = data2.toString();\n      this.error = data2;\n    } else {\n      this.data = data2;\n    }\n  }\n};\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\n// lib/router/router.ts\nvar validMutationMethodsArr = [\n  \"POST\",\n  \"PUT\",\n  \"PATCH\",\n  \"DELETE\"\n];\nvar validMutationMethods = new Set(\n  validMutationMethodsArr\n);\nvar validRequestMethodsArr = [\n  \"GET\",\n  ...validMutationMethodsArr\n];\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: void 0,\n  formMethod: void 0,\n  formAction: void 0,\n  formEncType: void 0,\n  formData: void 0,\n  json: void 0,\n  text: void 0\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: void 0,\n  formMethod: void 0,\n  formAction: void 0,\n  formEncType: void 0,\n  formData: void 0,\n  json: void 0,\n  text: void 0\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: void 0,\n  reset: void 0,\n  location: void 0\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isAbsoluteUrl = (url) => ABSOLUTE_URL_REGEX.test(url);\nvar defaultMapRouteProperties = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\nvar ResetLoaderDataSymbol = Symbol(\"ResetLoaderData\");\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : void 0;\n  const isBrowser2 = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n  let hydrationRouteProperties2 = init.hydrationRouteProperties || [];\n  let mapRouteProperties2 = init.mapRouteProperties || defaultMapRouteProperties;\n  let manifest = {};\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties2,\n    void 0,\n    manifest\n  );\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategyWithMiddleware;\n  let future = {\n    unstable_middleware: false,\n    ...init.future\n  };\n  let unlistenHistory = null;\n  let subscribers = /* @__PURE__ */ new Set();\n  let savedScrollPositions2 = null;\n  let getScrollRestorationKey2 = null;\n  let getScrollPosition = null;\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  let initialized;\n  if (initialMatches == null && !init.patchRoutesOnNavigation) {\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialized = true;\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  } else {\n    if (initialMatches && !init.hydrationData) {\n      let fogOfWar = checkFogOfWar(\n        initialMatches,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active) {\n        initialMatches = null;\n      }\n    }\n    if (!initialMatches) {\n      initialized = false;\n      initialMatches = [];\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    } else if (initialMatches.some((m) => m.route.lazy)) {\n      initialized = false;\n    } else if (!initialMatches.some((m) => m.route.loader)) {\n      initialized = true;\n    } else {\n      let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n      let errors = init.hydrationData ? init.hydrationData.errors : null;\n      if (errors) {\n        let idx = initialMatches.findIndex(\n          (m) => errors[m.route.id] !== void 0\n        );\n        initialized = initialMatches.slice(0, idx + 1).every(\n          (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n        );\n      } else {\n        initialized = initialMatches.every(\n          (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n        );\n      }\n    }\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: /* @__PURE__ */ new Map(),\n    blockers: /* @__PURE__ */ new Map()\n  };\n  let pendingAction = \"POP\" /* Pop */;\n  let pendingPreventScrollReset = false;\n  let pendingNavigationController;\n  let pendingViewTransitionEnabled = false;\n  let appliedViewTransitions = /* @__PURE__ */ new Map();\n  let removePageHideEventListener = null;\n  let isUninterruptedRevalidation = false;\n  let isRevalidationRequired = false;\n  let cancelledFetcherLoads = /* @__PURE__ */ new Set();\n  let fetchControllers = /* @__PURE__ */ new Map();\n  let incrementingLoadId = 0;\n  let pendingNavigationLoadId = -1;\n  let fetchReloadIds = /* @__PURE__ */ new Map();\n  let fetchRedirectIds = /* @__PURE__ */ new Set();\n  let fetchLoadMatches = /* @__PURE__ */ new Map();\n  let activeFetchers = /* @__PURE__ */ new Map();\n  let fetchersQueuedForDeletion = /* @__PURE__ */ new Set();\n  let blockerFunctions = /* @__PURE__ */ new Map();\n  let unblockBlockerHistoryUpdate = void 0;\n  let pendingRevalidationDfd = null;\n  function initialize() {\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = void 0;\n          return;\n        }\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.\"\n        );\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction\n        });\n        if (blockerKey && delta != null) {\n          let nextHistoryUpdatePromise = new Promise((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey, {\n                state: \"proceeding\",\n                proceed: void 0,\n                reset: void 0,\n                location\n              });\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey, IDLE_BLOCKER);\n              updateState({ blockers });\n            }\n          });\n          return;\n        }\n        return startNavigation(historyAction, location);\n      }\n    );\n    if (isBrowser2) {\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    if (!state.initialized) {\n      startNavigation(\"POP\" /* Pop */, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  function updateState(newState, opts = {}) {\n    if (newState.matches) {\n      newState.matches = newState.matches.map((m) => {\n        let route = manifest[m.route.id];\n        let matchRoute = m.route;\n        if (matchRoute.element !== route.element || matchRoute.errorElement !== route.errorElement || matchRoute.hydrateFallbackElement !== route.hydrateFallbackElement) {\n          return {\n            ...m,\n            route\n          };\n        }\n        return m;\n      });\n    }\n    state = {\n      ...state,\n      ...newState\n    };\n    let unmountedFetchers = [];\n    let mountedFetchers = [];\n    state.fetchers.forEach((fetcher, key) => {\n      if (fetcher.state === \"idle\") {\n        if (fetchersQueuedForDeletion.has(key)) {\n          unmountedFetchers.push(key);\n        } else {\n          mountedFetchers.push(key);\n        }\n      }\n    });\n    fetchersQueuedForDeletion.forEach((key) => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        unmountedFetchers.push(key);\n      }\n    });\n    [...subscribers].forEach(\n      (subscriber) => subscriber(state, {\n        deletedFetchers: unmountedFetchers,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true\n      })\n    );\n    unmountedFetchers.forEach((key) => deleteFetcher(key));\n    mountedFetchers.forEach((key) => state.fetchers.delete(key));\n  }\n  function completeNavigation(location, newState, { flushSync } = {}) {\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && location.state?._isRedirect !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      actionData = state.actionData;\n    } else {\n      actionData = null;\n    }\n    let loaderData = newState.loaderData ? mergeLoaderData(\n      state.loaderData,\n      newState.loaderData,\n      newState.matches || [],\n      newState.errors\n    ) : state.loaderData;\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    let restoreScrollPosition = isUninterruptedRevalidation ? false : getSavedScrollPosition(location, newState.matches || state.matches);\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && location.state?._isRedirect !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = void 0;\n    }\n    if (isUninterruptedRevalidation) {\n    } else if (pendingAction === \"POP\" /* Pop */) {\n    } else if (pendingAction === \"PUSH\" /* Push */) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === \"REPLACE\" /* Replace */) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    if (pendingAction === \"POP\" /* Pop */) {\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = /* @__PURE__ */ new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(\n      {\n        ...newState,\n        // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition,\n        preventScrollReset,\n        blockers\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true\n      }\n    );\n    pendingAction = \"POP\" /* Pop */;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    pendingRevalidationDfd?.resolve();\n    pendingRevalidationDfd = null;\n  }\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      false,\n      normalizedPath,\n      opts\n    );\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation)\n    };\n    let userReplace = opts && opts.replace != null ? opts.replace : void 0;\n    let historyAction = \"PUSH\" /* Push */;\n    if (userReplace === true) {\n      historyAction = \"REPLACE\" /* Replace */;\n    } else if (userReplace === false) {\n    } else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      historyAction = \"REPLACE\" /* Replace */;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : void 0;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: void 0,\n            reset: void 0,\n            location: nextLocation\n          });\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({ blockers });\n        }\n      });\n      return;\n    }\n    await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  function revalidate() {\n    if (!pendingRevalidationDfd) {\n      pendingRevalidationDfd = createDeferred();\n    }\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n    let promise = pendingRevalidationDfd.promise;\n    if (state.navigation.state === \"submitting\") {\n      return promise;\n    }\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return promise;\n    }\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true\n      }\n    );\n    return promise;\n  }\n  async function startNavigation(historyAction, location, opts) {\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts?.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ? (\n      // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n      state.matches\n    ) : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        },\n        { flushSync }\n      );\n      return;\n    }\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let scopedContext = init.unstable_getContext ? await init.unstable_getContext() : new unstable_RouterContextProvider();\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: \"error\" /* error */, error: opts.pendingError }\n      ];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        scopedContext,\n        fogOfWar.active,\n        opts && opts.initialHydration === true,\n        { replace: opts.replace, flushSync }\n      );\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      fogOfWar.active = false;\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      scopedContext,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n    if (shortCircuited) {\n      return;\n    }\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors\n    });\n  }\n  async function handleAction(request, location, submission, matches, scopedContext, isFogOfWar, initialHydration, opts = {}) {\n    interruptActiveLoads();\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: \"error\" /* error */,\n              error: discoverResult.error\n            }\n          ]\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: \"error\" /* error */,\n              error\n            }\n          ]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: \"error\" /* error */,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let dsMatches = getTargetedDataStrategyMatches(\n        mapRouteProperties2,\n        manifest,\n        request,\n        matches,\n        actionMatch,\n        initialHydration ? [] : hydrationRouteProperties2,\n        scopedContext\n      );\n      let results = await callDataStrategy(\n        request,\n        dsMatches,\n        scopedContext,\n        null\n      );\n      result = results[actionMatch.route.id];\n      if (!result) {\n        for (let match of matches) {\n          if (results[match.route.id]) {\n            result = results[match.route.id];\n            break;\n          }\n        }\n      }\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace2;\n      if (opts && opts.replace != null) {\n        replace2 = opts.replace;\n      } else {\n        let location2 = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\"),\n          new URL(request.url),\n          basename\n        );\n        replace2 = location2 === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      if ((opts && opts.replace) !== true) {\n        pendingAction = \"PUSH\" /* Push */;\n      }\n      return {\n        matches,\n        pendingActionResult: [\n          boundaryMatch.route.id,\n          result,\n          actionMatch.route.id\n        ]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  async function handleLoaders(request, location, matches, scopedContext, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionResult) {\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && !initialHydration;\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...actionData !== void 0 ? { actionData } : {}\n          },\n          {\n            flushSync\n          }\n        );\n      }\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { dsMatches, revalidatingFetchers } = getMatchesToLoad(\n      request,\n      scopedContext,\n      mapRouteProperties2,\n      manifest,\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      initialHydration ? [] : hydrationRouteProperties2,\n      initialHydration === true,\n      isRevalidationRequired,\n      cancelledFetcherLoads,\n      fetchersQueuedForDeletion,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      init.patchRoutesOnNavigation != null,\n      pendingActionResult\n    );\n    pendingNavigationLoadId = ++incrementingLoadId;\n    if (!init.dataStrategy && !dsMatches.some((m) => m.shouldLoad) && !dsMatches.some((m) => m.route.unstable_middleware) && revalidatingFetchers.length === 0) {\n      let updatedFetchers2 = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? { [pendingActionResult[0]]: pendingActionResult[1].error } : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...updatedFetchers2 ? { fetchers: new Map(state.fetchers) } : {}\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== void 0) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(\n      dsMatches,\n      revalidatingFetchers,\n      request,\n      scopedContext\n    );\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n    let redirect2 = findRedirect(loaderResults);\n    if (redirect2) {\n      await startRedirectNavigation(request, redirect2.result, true, {\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    redirect2 = findRedirect(fetcherResults);\n    if (redirect2) {\n      fetchRedirectIds.add(redirect2.key);\n      await startRedirectNavigation(request, redirect2.result, true, {\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults\n    );\n    if (initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}\n    };\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        void 0,\n        fetcher ? fetcher.data : void 0\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  async function fetch2(key, routeId, href, opts) {\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n    let { path, submission, error } = normalizeNavigateOptions(\n      true,\n      normalizedPath,\n      opts\n    );\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n    let scopedContext = init.unstable_getContext ? await init.unstable_getContext() : new unstable_RouterContextProvider();\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      await handleFetcherAction(\n        key,\n        routeId,\n        path,\n        matches,\n        scopedContext,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n    fetchLoadMatches.set(key, { routeId, path });\n    await handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      matches,\n      scopedContext,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n  async function handleFetcherAction(key, routeId, path, requestMatches, scopedContext, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        new URL(fetchRequest.url).pathname,\n        fetchRequest.signal,\n        key\n      );\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n      }\n    }\n    let match = getTargetMatch(requestMatches, path);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let fetchMatches = getTargetedDataStrategyMatches(\n      mapRouteProperties2,\n      manifest,\n      fetchRequest,\n      requestMatches,\n      match,\n      hydrationRouteProperties2,\n      scopedContext\n    );\n    let actionResults = await callDataStrategy(\n      fetchRequest,\n      fetchMatches,\n      scopedContext,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (fetchersQueuedForDeletion.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(void 0));\n        return;\n      }\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          updateFetcherState(key, getDoneFetcher(void 0));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let { dsMatches, revalidatingFetchers } = getMatchesToLoad(\n      revalidationRequest,\n      scopedContext,\n      mapRouteProperties2,\n      manifest,\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      hydrationRouteProperties2,\n      false,\n      isRevalidationRequired,\n      cancelledFetcherLoads,\n      fetchersQueuedForDeletion,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      init.patchRoutesOnNavigation != null,\n      [match.route.id, actionResult]\n    );\n    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {\n      let staleKey = rf.key;\n      let existingFetcher2 = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(\n        void 0,\n        existingFetcher2 ? existingFetcher2.data : void 0\n      );\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({ fetchers: new Map(state.fetchers) });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n    let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(\n      dsMatches,\n      revalidatingFetchers,\n      revalidationRequest,\n      scopedContext\n    );\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let redirect2 = findRedirect(loaderResults);\n    if (redirect2) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect2.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n    redirect2 = findRedirect(fetcherResults);\n    if (redirect2) {\n      fetchRedirectIds.add(redirect2.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect2.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      void 0,\n      revalidatingFetchers,\n      fetcherResults\n    );\n    abortStaleFetchLoads(loadId);\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  async function handleFetcherLoader(key, routeId, path, matches, scopedContext, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : void 0\n      ),\n      { flushSync }\n    );\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        new URL(fetchRequest.url).pathname,\n        fetchRequest.signal,\n        key\n      );\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let match = getTargetMatch(matches, path);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let dsMatches = getTargetedDataStrategyMatches(\n      mapRouteProperties2,\n      manifest,\n      fetchRequest,\n      matches,\n      match,\n      hydrationRouteProperties2,\n      scopedContext\n    );\n    let results = await callDataStrategy(\n      fetchRequest,\n      dsMatches,\n      scopedContext,\n      key\n    );\n    let result = results[match.route.id];\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (fetchersQueuedForDeletion.has(key)) {\n      updateFetcherState(key, getDoneFetcher(void 0));\n      return;\n    }\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        updateFetcherState(key, getDoneFetcher(void 0));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  async function startRedirectNavigation(request, redirect2, isNavigation, {\n    submission,\n    fetcherSubmission,\n    preventScrollReset,\n    replace: replace2\n  } = {}) {\n    if (redirect2.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect2.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser2) {\n      let isDocumentReload = false;\n      if (redirect2.response.headers.has(\"X-Remix-Reload-Document\")) {\n        isDocumentReload = true;\n      } else if (isAbsoluteUrl(location)) {\n        const url = createBrowserURLImpl(location, true);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace2) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    pendingNavigationController = null;\n    let redirectNavigationType = replace2 === true || redirect2.response.headers.has(\"X-Remix-Replace\") ? \"REPLACE\" /* Replace */ : \"PUSH\" /* Push */;\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect2.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectNavigationType, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0\n      });\n    } else {\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectNavigationType, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0\n      });\n    }\n  }\n  async function callDataStrategy(request, matches, scopedContext, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        request,\n        matches,\n        fetcherKey,\n        scopedContext,\n        false\n      );\n    } catch (e) {\n      matches.filter((m) => m.shouldLoad).forEach((m) => {\n        dataResults[m.route.id] = {\n          type: \"error\" /* error */,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    if (request.signal.aborted) {\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: \"redirect\" /* redirect */,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename\n          )\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(matches, fetchersToLoad, request, scopedContext) {\n    let loaderResultsPromise = callDataStrategy(\n      request,\n      matches,\n      scopedContext,\n      null\n    );\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.request && f.controller) {\n          let results = await callDataStrategy(\n            f.request,\n            f.matches,\n            scopedContext,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: \"error\" /* error */,\n              error: getInternalRouterError(404, {\n                pathname: f.path\n              })\n            }\n          });\n        }\n      })\n    );\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    isRevalidationRequired = true;\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts = {}) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n  function setFetcherError(key, routeId, error, opts = {}) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error\n        },\n        fetchers: new Map(state.fetchers)\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    if (fetchersQueuedForDeletion.has(key)) {\n      fetchersQueuedForDeletion.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    fetchersQueuedForDeletion.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function queueFetcherForDeletion(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      fetchersQueuedForDeletion.add(key);\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    invariant(\n      blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\",\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction\n  }) {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      return;\n    }\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n    return { notFoundMatches: matches, route, error };\n  }\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions2 = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey2 = getKey || null;\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n    return () => {\n      savedScrollPositions2 = null;\n      getScrollPosition = null;\n      getScrollRestorationKey2 = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey2) {\n      let key = getScrollRestorationKey2(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions2 && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions2[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions2) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions2[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (init.patchRoutesOnNavigation) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          let partialMatches = matchRoutesImpl(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n    return { active: false, matches: null };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!init.patchRoutesOnNavigation) {\n      return { type: \"success\", matches };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await init.patchRoutesOnNavigation({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties2,\n              false\n            );\n          }\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n      let newPartialMatches = matchRoutesImpl(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every(\n        (m, i) => m.route.id === newPartialMatches[i].route.id\n      )) {\n        return { type: \"success\", matches: null };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties2,\n      void 0,\n      manifest\n    );\n  }\n  function patchRoutes(routeId, children, unstable_allowElementMutations = false) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties2,\n      unstable_allowElementMutations\n    );\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch: fetch2,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to) => init.history.createHref(to),\n    encodeLocation: (to) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: queueFetcherForDeletion,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n    _internalSetStateDoNotUseOrYouWillBreakYourApp(newState) {\n      updateState(newState);\n    }\n  };\n  return router;\n}\nfunction createStaticHandler(routes, opts) {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties2 = opts?.mapRouteProperties || defaultMapRouteProperties;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties2,\n    void 0,\n    manifest\n  );\n  async function query(request, {\n    requestContext,\n    filterMatchesToLoad,\n    skipLoaderErrorBubbling,\n    skipRevalidation,\n    dataStrategy,\n    unstable_generateMiddlewareResponse: generateMiddlewareResponse\n  } = {}) {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    requestContext = requestContext != null ? requestContext : new unstable_RouterContextProvider();\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } = getShortCircuitMatches(dataRoutes);\n      let staticContext = {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n      return generateMiddlewareResponse ? generateMiddlewareResponse(() => Promise.resolve(staticContext)) : staticContext;\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } = getShortCircuitMatches(dataRoutes);\n      let staticContext = {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n      return generateMiddlewareResponse ? generateMiddlewareResponse(() => Promise.resolve(staticContext)) : staticContext;\n    }\n    if (generateMiddlewareResponse) {\n      invariant(\n        requestContext instanceof unstable_RouterContextProvider,\n        \"When using middleware in `staticHandler.query()`, any provided `requestContext` must be an instance of `unstable_RouterContextProvider`\"\n      );\n      try {\n        await loadLazyMiddlewareForMatches(\n          matches,\n          manifest,\n          mapRouteProperties2\n        );\n        let renderedStaticContext;\n        let response = await runServerMiddlewarePipeline(\n          {\n            request,\n            matches,\n            params: matches[0].params,\n            // If we're calling middleware then it must be enabled so we can cast\n            // this to the proper type knowing it's not an `AppLoadContext`\n            context: requestContext\n          },\n          async () => {\n            let res = await generateMiddlewareResponse(\n              async (revalidationRequest) => {\n                let result2 = await queryImpl(\n                  revalidationRequest,\n                  location,\n                  matches,\n                  requestContext,\n                  dataStrategy || null,\n                  skipLoaderErrorBubbling === true,\n                  null,\n                  filterMatchesToLoad || null,\n                  skipRevalidation === true\n                );\n                if (isResponse(result2)) {\n                  return result2;\n                }\n                renderedStaticContext = { location, basename, ...result2 };\n                return renderedStaticContext;\n              }\n            );\n            return res;\n          },\n          async (error, routeId) => {\n            if (isResponse(error)) {\n              return error;\n            }\n            if (renderedStaticContext) {\n              if (routeId in renderedStaticContext.loaderData) {\n                renderedStaticContext.loaderData[routeId] = void 0;\n              }\n              let staticContext = getStaticContextFromError(\n                dataRoutes,\n                renderedStaticContext,\n                error,\n                skipLoaderErrorBubbling ? routeId : findNearestBoundary(matches, routeId).route.id\n              );\n              return generateMiddlewareResponse(\n                () => Promise.resolve(staticContext)\n              );\n            } else {\n              let boundaryRouteId = skipLoaderErrorBubbling ? routeId : findNearestBoundary(\n                matches,\n                matches.find(\n                  (m) => m.route.id === routeId || m.route.loader\n                )?.route.id || routeId\n              ).route.id;\n              let staticContext = {\n                matches,\n                location,\n                basename,\n                loaderData: {},\n                actionData: null,\n                errors: {\n                  [boundaryRouteId]: error\n                },\n                statusCode: isRouteErrorResponse(error) ? error.status : 500,\n                actionHeaders: {},\n                loaderHeaders: {}\n              };\n              return generateMiddlewareResponse(\n                () => Promise.resolve(staticContext)\n              );\n            }\n          }\n        );\n        invariant(isResponse(response), \"Expected a response in query()\");\n        return response;\n      } catch (e) {\n        if (isResponse(e)) {\n          return e;\n        }\n        throw e;\n      }\n    }\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null,\n      filterMatchesToLoad || null,\n      skipRevalidation === true\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n    return { location, basename, ...result };\n  }\n  async function queryRoute(request, {\n    routeId,\n    requestContext,\n    dataStrategy,\n    unstable_generateMiddlewareResponse: generateMiddlewareResponse\n  } = {}) {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    requestContext = requestContext != null ? requestContext : new unstable_RouterContextProvider();\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n    let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n    if (generateMiddlewareResponse) {\n      invariant(\n        requestContext instanceof unstable_RouterContextProvider,\n        \"When using middleware in `staticHandler.queryRoute()`, any provided `requestContext` must be an instance of `unstable_RouterContextProvider`\"\n      );\n      await loadLazyMiddlewareForMatches(matches, manifest, mapRouteProperties2);\n      let response = await runServerMiddlewarePipeline(\n        {\n          request,\n          matches,\n          params: matches[0].params,\n          // If we're calling middleware then it must be enabled so we can cast\n          // this to the proper type knowing it's not an `AppLoadContext`\n          context: requestContext\n        },\n        async () => {\n          let res = await generateMiddlewareResponse(\n            async (innerRequest) => {\n              let result2 = await queryImpl(\n                innerRequest,\n                location,\n                matches,\n                requestContext,\n                dataStrategy || null,\n                false,\n                match,\n                null,\n                false\n              );\n              let processed = handleQueryResult(result2);\n              return isResponse(processed) ? processed : typeof processed === \"string\" ? new Response(processed) : Response.json(processed);\n            }\n          );\n          return res;\n        },\n        (error) => {\n          if (isRouteErrorResponse(error)) {\n            return Promise.resolve(errorResponseToResponse(error));\n          }\n          if (isResponse(error)) {\n            return Promise.resolve(error);\n          }\n          throw error;\n        }\n      );\n      return response;\n    }\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match,\n      null,\n      false\n    );\n    return handleQueryResult(result);\n    function handleQueryResult(result2) {\n      if (isResponse(result2)) {\n        return result2;\n      }\n      let error = result2.errors ? Object.values(result2.errors)[0] : void 0;\n      if (error !== void 0) {\n        throw error;\n      }\n      if (result2.actionData) {\n        return Object.values(result2.actionData)[0];\n      }\n      if (result2.loaderData) {\n        return Object.values(result2.loaderData)[0];\n      }\n      return void 0;\n    }\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, filterMatchesToLoad, skipRevalidation) {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n    try {\n      if (isMutationMethod(request.method)) {\n        let result2 = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null,\n          filterMatchesToLoad,\n          skipRevalidation\n        );\n        return result2;\n      }\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch,\n        filterMatchesToLoad\n      );\n      return isResponse(result) ? result : {\n        ...result,\n        actionData: null,\n        actionHeaders: {}\n      };\n    } catch (e) {\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === \"error\" /* error */) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest, filterMatchesToLoad, skipRevalidation) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: \"error\" /* error */,\n        error\n      };\n    } else {\n      let dsMatches = getTargetedDataStrategyMatches(\n        mapRouteProperties2,\n        manifest,\n        request,\n        matches,\n        actionMatch,\n        [],\n        requestContext\n      );\n      let results = await callDataStrategy(\n        request,\n        dsMatches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest);\n      }\n    }\n    if (isRedirectResult(result)) {\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    if (skipRevalidation) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n          actionData: null,\n          actionHeaders: {\n            ...result.headers ? { [actionMatch.route.id]: result.headers } : {}\n          },\n          matches,\n          loaderData: {},\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          loaderHeaders: {}\n        };\n      } else {\n        return {\n          actionData: {\n            [actionMatch.route.id]: result.data\n          },\n          actionHeaders: result.headers ? { [actionMatch.route.id]: result.headers } : {},\n          matches,\n          loaderData: {},\n          errors: null,\n          statusCode: result.statusCode || 200,\n          loaderHeaders: {}\n        };\n      }\n    }\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let handlerContext2 = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        filterMatchesToLoad,\n        [boundaryMatch.route.id, result]\n      );\n      return {\n        ...handlerContext2,\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: {\n          ...result.headers ? { [actionMatch.route.id]: result.headers } : {}\n        }\n      };\n    }\n    let handlerContext = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null,\n      filterMatchesToLoad\n    );\n    return {\n      ...handlerContext,\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      // action status codes take precedence over loader status codes\n      ...result.statusCode ? { statusCode: result.statusCode } : {},\n      actionHeaders: result.headers ? { [actionMatch.route.id]: result.headers } : {}\n    };\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, filterMatchesToLoad, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    if (isRouteRequest && !routeMatch?.route.loader && !routeMatch?.route.lazy) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id\n      });\n    }\n    let dsMatches;\n    if (routeMatch) {\n      dsMatches = getTargetedDataStrategyMatches(\n        mapRouteProperties2,\n        manifest,\n        request,\n        matches,\n        routeMatch,\n        [],\n        requestContext\n      );\n    } else {\n      let maxIdx = pendingActionResult && isErrorResult(pendingActionResult[1]) ? (\n        // Up to but not including the boundary\n        matches.findIndex((m) => m.route.id === pendingActionResult[0]) - 1\n      ) : void 0;\n      dsMatches = matches.map((match, index) => {\n        if (maxIdx != null && index > maxIdx) {\n          return getDataStrategyMatch(\n            mapRouteProperties2,\n            manifest,\n            request,\n            match,\n            [],\n            requestContext,\n            false\n          );\n        }\n        return getDataStrategyMatch(\n          mapRouteProperties2,\n          manifest,\n          request,\n          match,\n          [],\n          requestContext,\n          (match.route.loader || match.route.lazy) != null && (!filterMatchesToLoad || filterMatchesToLoad(match))\n        );\n      });\n    }\n    if (!dataStrategy && !dsMatches.some((m) => m.shouldLoad)) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await callDataStrategy(\n      request,\n      dsMatches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest);\n    }\n    let handlerContext = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      true,\n      skipLoaderErrorBubbling\n    );\n    return {\n      ...handlerContext,\n      matches\n    };\n  }\n  async function callDataStrategy(request, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      request,\n      matches,\n      null,\n      requestContext,\n      true\n    );\n    let dataResults = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResult(result)) {\n          let response = result.result;\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          throw result;\n        }\n        dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\nfunction getStaticContextFromError(routes, handlerContext, error, boundaryId) {\n  let errorBoundaryId = boundaryId || handlerContext._deepestRenderedBoundaryId || routes[0].id;\n  return {\n    ...handlerContext,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [errorBoundaryId]: error\n    }\n  };\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest) {\n  if (request.signal.reason !== void 0) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(\n    `${method}() call aborted without an \\`AbortSignal.reason\\`: ${request.method} ${request.url}`\n  );\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== void 0);\n}\nfunction normalizeTo(location, matches, basename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n  if (basename !== \"/\") {\n    path.pathname = prependBasename({ basename, pathname: path.pathname });\n  }\n  return createPath(path);\n}\nfunction normalizeNavigateOptions(isFetcher, path, opts) {\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" })\n  });\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = rawFormMethod.toUpperCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== void 0) {\n    if (opts.formEncType === \"text/plain\") {\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n        Array.from(opts.body.entries()).reduce(\n          (acc, [name, value]) => `${acc}${name}=${value}\n`,\n          \"\"\n        )\n      ) : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: void 0,\n          json: void 0,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: void 0,\n            json,\n            text: void 0\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: void 0,\n    text: void 0\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n  let parsedPath = parsePath(path);\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n  return { path: createPath(parsedPath), submission };\n}\nfunction getMatchesToLoad(request, scopedContext, mapRouteProperties2, manifest, history, state, matches, submission, location, lazyRoutePropertiesToSkip, initialHydration, isRevalidationRequired, cancelledFetcherLoads, fetchersQueuedForDeletion, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, hasPatchRoutesOnNavigation, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let maxIdx;\n  if (initialHydration && state.errors) {\n    let boundaryId = Object.keys(state.errors)[0];\n    maxIdx = matches.findIndex((m) => m.route.id === boundaryId);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    let boundaryId = pendingActionResult[0];\n    maxIdx = matches.findIndex((m) => m.route.id === boundaryId) - 1;\n  }\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;\n  let shouldSkipRevalidation = actionStatus && actionStatus >= 400;\n  let baseShouldRevalidateArgs = {\n    currentUrl,\n    currentParams: state.matches[0]?.params || {},\n    nextUrl,\n    nextParams: matches[0].params,\n    ...submission,\n    actionResult,\n    actionStatus\n  };\n  let dsMatches = matches.map((match, index) => {\n    let { route } = match;\n    let forceShouldLoad = null;\n    if (maxIdx != null && index > maxIdx) {\n      forceShouldLoad = false;\n    } else if (route.lazy) {\n      forceShouldLoad = true;\n    } else if (route.loader == null) {\n      forceShouldLoad = false;\n    } else if (initialHydration) {\n      forceShouldLoad = shouldLoadRouteOnHydration(\n        route,\n        state.loaderData,\n        state.errors\n      );\n    } else if (isNewLoader(state.loaderData, state.matches[index], match)) {\n      forceShouldLoad = true;\n    }\n    if (forceShouldLoad !== null) {\n      return getDataStrategyMatch(\n        mapRouteProperties2,\n        manifest,\n        request,\n        match,\n        lazyRoutePropertiesToSkip,\n        scopedContext,\n        forceShouldLoad\n      );\n    }\n    let defaultShouldRevalidate = shouldSkipRevalidation ? false : (\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(state.matches[index], match)\n    );\n    let shouldRevalidateArgs = {\n      ...baseShouldRevalidateArgs,\n      defaultShouldRevalidate\n    };\n    let shouldLoad = shouldRevalidateLoader(match, shouldRevalidateArgs);\n    return getDataStrategyMatch(\n      mapRouteProperties2,\n      manifest,\n      request,\n      match,\n      lazyRoutePropertiesToSkip,\n      scopedContext,\n      shouldLoad,\n      shouldRevalidateArgs\n    );\n  });\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    if (initialHydration || !matches.some((m) => m.route.id === f.routeId) || fetchersQueuedForDeletion.has(key)) {\n      return;\n    }\n    let fetcher = state.fetchers.get(key);\n    let isMidInitialLoad = fetcher && fetcher.state !== \"idle\" && fetcher.data === void 0;\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    if (!fetcherMatches) {\n      if (hasPatchRoutesOnNavigation && isMidInitialLoad) {\n        return;\n      }\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        request: null,\n        controller: null\n      });\n      return;\n    }\n    if (fetchRedirectIds.has(key)) {\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let fetchController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      history,\n      f.path,\n      fetchController.signal\n    );\n    let fetcherDsMatches = null;\n    if (cancelledFetcherLoads.has(key)) {\n      cancelledFetcherLoads.delete(key);\n      fetcherDsMatches = getTargetedDataStrategyMatches(\n        mapRouteProperties2,\n        manifest,\n        fetchRequest,\n        fetcherMatches,\n        fetcherMatch,\n        lazyRoutePropertiesToSkip,\n        scopedContext\n      );\n    } else if (isMidInitialLoad) {\n      if (isRevalidationRequired) {\n        fetcherDsMatches = getTargetedDataStrategyMatches(\n          mapRouteProperties2,\n          manifest,\n          fetchRequest,\n          fetcherMatches,\n          fetcherMatch,\n          lazyRoutePropertiesToSkip,\n          scopedContext\n        );\n      }\n    } else {\n      let shouldRevalidateArgs = {\n        ...baseShouldRevalidateArgs,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      };\n      if (shouldRevalidateLoader(fetcherMatch, shouldRevalidateArgs)) {\n        fetcherDsMatches = getTargetedDataStrategyMatches(\n          mapRouteProperties2,\n          manifest,\n          fetchRequest,\n          fetcherMatches,\n          fetcherMatch,\n          lazyRoutePropertiesToSkip,\n          scopedContext,\n          shouldRevalidateArgs\n        );\n      }\n    }\n    if (fetcherDsMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherDsMatches,\n        match: fetcherMatch,\n        request: fetchRequest,\n        controller: fetchController\n      });\n    }\n  });\n  return { dsMatches, revalidatingFetchers };\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  if (route.lazy) {\n    return true;\n  }\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && route.id in loaderData;\n  let hasError = errors != null && errors[route.id] !== void 0;\n  if (!hasData && hasError) {\n    return false;\n  }\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = (\n    // [a] -> [a, b]\n    !currentMatch || // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id\n  );\n  let isMissingData = !currentLoaderData.hasOwnProperty(match.route.id);\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2, allowElementMutations) {\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  let uniqueChildren = [];\n  let existingChildren = [];\n  children.forEach((newRoute) => {\n    let existingRoute = childrenToPatch.find(\n      (existingRoute2) => isSameRoute(newRoute, existingRoute2)\n    );\n    if (existingRoute) {\n      existingChildren.push({ existingRoute, newRoute });\n    } else {\n      uniqueChildren.push(newRoute);\n    }\n  });\n  if (uniqueChildren.length > 0) {\n    let newRoutes = convertRoutesToDataRoutes(\n      uniqueChildren,\n      mapRouteProperties2,\n      [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n      manifest\n    );\n    childrenToPatch.push(...newRoutes);\n  }\n  if (allowElementMutations && existingChildren.length > 0) {\n    for (let i = 0; i < existingChildren.length; i++) {\n      let { existingRoute, newRoute } = existingChildren[i];\n      let existingRouteTyped = existingRoute;\n      let [newRouteTyped] = convertRoutesToDataRoutes(\n        [newRoute],\n        mapRouteProperties2,\n        [],\n        // Doesn't matter for mutated routes since they already have an id\n        {},\n        // Don't touch the manifest here since we're updating in place\n        true\n      );\n      Object.assign(existingRouteTyped, {\n        element: newRouteTyped.element ? newRouteTyped.element : existingRouteTyped.element,\n        errorElement: newRouteTyped.errorElement ? newRouteTyped.errorElement : existingRouteTyped.errorElement,\n        hydrateFallbackElement: newRouteTyped.hydrateFallbackElement ? newRouteTyped.hydrateFallbackElement : existingRouteTyped.hydrateFallbackElement\n      });\n    }\n  }\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  return newRoute.children.every(\n    (aChild, i) => existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\nvar lazyRoutePropertyCache = /* @__PURE__ */ new WeakMap();\nvar loadLazyRouteProperty = ({\n  key,\n  route,\n  manifest,\n  mapRouteProperties: mapRouteProperties2\n}) => {\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  if (!routeToUpdate.lazy || typeof routeToUpdate.lazy !== \"object\") {\n    return;\n  }\n  let lazyFn = routeToUpdate.lazy[key];\n  if (!lazyFn) {\n    return;\n  }\n  let cache = lazyRoutePropertyCache.get(routeToUpdate);\n  if (!cache) {\n    cache = {};\n    lazyRoutePropertyCache.set(routeToUpdate, cache);\n  }\n  let cachedPromise = cache[key];\n  if (cachedPromise) {\n    return cachedPromise;\n  }\n  let propertyPromise = (async () => {\n    let isUnsupported = isUnsupportedLazyRouteObjectKey(key);\n    let staticRouteValue = routeToUpdate[key];\n    let isStaticallyDefined = staticRouteValue !== void 0 && key !== \"hasErrorBoundary\";\n    if (isUnsupported) {\n      warning(\n        !isUnsupported,\n        \"Route property \" + key + \" is not a supported lazy route property. This property will be ignored.\"\n      );\n      cache[key] = Promise.resolve();\n    } else if (isStaticallyDefined) {\n      warning(\n        false,\n        `Route \"${routeToUpdate.id}\" has a static property \"${key}\" defined. The lazy property will be ignored.`\n      );\n    } else {\n      let value = await lazyFn();\n      if (value != null) {\n        Object.assign(routeToUpdate, { [key]: value });\n        Object.assign(routeToUpdate, mapRouteProperties2(routeToUpdate));\n      }\n    }\n    if (typeof routeToUpdate.lazy === \"object\") {\n      routeToUpdate.lazy[key] = void 0;\n      if (Object.values(routeToUpdate.lazy).every((value) => value === void 0)) {\n        routeToUpdate.lazy = void 0;\n      }\n    }\n  })();\n  cache[key] = propertyPromise;\n  return propertyPromise;\n};\nvar lazyRouteFunctionCache = /* @__PURE__ */ new WeakMap();\nfunction loadLazyRoute(route, type, manifest, mapRouteProperties2, lazyRoutePropertiesToSkip) {\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  if (!route.lazy) {\n    return {\n      lazyRoutePromise: void 0,\n      lazyHandlerPromise: void 0\n    };\n  }\n  if (typeof route.lazy === \"function\") {\n    let cachedPromise = lazyRouteFunctionCache.get(routeToUpdate);\n    if (cachedPromise) {\n      return {\n        lazyRoutePromise: cachedPromise,\n        lazyHandlerPromise: cachedPromise\n      };\n    }\n    let lazyRoutePromise2 = (async () => {\n      invariant(\n        typeof route.lazy === \"function\",\n        \"No lazy route function found\"\n      );\n      let lazyRoute = await route.lazy();\n      let routeUpdates = {};\n      for (let lazyRouteProperty in lazyRoute) {\n        let lazyValue = lazyRoute[lazyRouteProperty];\n        if (lazyValue === void 0) {\n          continue;\n        }\n        let isUnsupported = isUnsupportedLazyRouteFunctionKey(lazyRouteProperty);\n        let staticRouteValue = routeToUpdate[lazyRouteProperty];\n        let isStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based\n        // on the route updates\n        lazyRouteProperty !== \"hasErrorBoundary\";\n        if (isUnsupported) {\n          warning(\n            !isUnsupported,\n            \"Route property \" + lazyRouteProperty + \" is not a supported property to be returned from a lazy route function. This property will be ignored.\"\n          );\n        } else if (isStaticallyDefined) {\n          warning(\n            !isStaticallyDefined,\n            `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" defined but its lazy function is also returning a value for this property. The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n          );\n        } else {\n          routeUpdates[lazyRouteProperty] = lazyValue;\n        }\n      }\n      Object.assign(routeToUpdate, routeUpdates);\n      Object.assign(routeToUpdate, {\n        // To keep things framework agnostic, we use the provided `mapRouteProperties`\n        // function to set the framework-aware properties (`element`/`hasErrorBoundary`)\n        // since the logic will differ between frameworks.\n        ...mapRouteProperties2(routeToUpdate),\n        lazy: void 0\n      });\n    })();\n    lazyRouteFunctionCache.set(routeToUpdate, lazyRoutePromise2);\n    lazyRoutePromise2.catch(() => {\n    });\n    return {\n      lazyRoutePromise: lazyRoutePromise2,\n      lazyHandlerPromise: lazyRoutePromise2\n    };\n  }\n  let lazyKeys = Object.keys(route.lazy);\n  let lazyPropertyPromises = [];\n  let lazyHandlerPromise = void 0;\n  for (let key of lazyKeys) {\n    if (lazyRoutePropertiesToSkip && lazyRoutePropertiesToSkip.includes(key)) {\n      continue;\n    }\n    let promise = loadLazyRouteProperty({\n      key,\n      route,\n      manifest,\n      mapRouteProperties: mapRouteProperties2\n    });\n    if (promise) {\n      lazyPropertyPromises.push(promise);\n      if (key === type) {\n        lazyHandlerPromise = promise;\n      }\n    }\n  }\n  let lazyRoutePromise = lazyPropertyPromises.length > 0 ? Promise.all(lazyPropertyPromises).then(() => {\n  }) : void 0;\n  lazyRoutePromise?.catch(() => {\n  });\n  lazyHandlerPromise?.catch(() => {\n  });\n  return {\n    lazyRoutePromise,\n    lazyHandlerPromise\n  };\n}\nfunction isNonNullable(value) {\n  return value !== void 0;\n}\nfunction loadLazyMiddlewareForMatches(matches, manifest, mapRouteProperties2) {\n  let promises = matches.map(({ route }) => {\n    if (typeof route.lazy !== \"object\" || !route.lazy.unstable_middleware) {\n      return void 0;\n    }\n    return loadLazyRouteProperty({\n      key: \"unstable_middleware\",\n      route,\n      manifest,\n      mapRouteProperties: mapRouteProperties2\n    });\n  }).filter(isNonNullable);\n  return promises.length > 0 ? Promise.all(promises) : void 0;\n}\nasync function defaultDataStrategy(args) {\n  let matchesToLoad = args.matches.filter((m) => m.shouldLoad);\n  let keyedResults = {};\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  results.forEach((result, i) => {\n    keyedResults[matchesToLoad[i].route.id] = result;\n  });\n  return keyedResults;\n}\nasync function defaultDataStrategyWithMiddleware(args) {\n  if (!args.matches.some((m) => m.route.unstable_middleware)) {\n    return defaultDataStrategy(args);\n  }\n  let didCallHandler = false;\n  return runClientMiddlewarePipeline(\n    args,\n    () => {\n      didCallHandler = true;\n      return defaultDataStrategy(args);\n    },\n    (error, routeId) => clientMiddlewareErrorHandler(\n      error,\n      routeId,\n      args.matches,\n      didCallHandler\n    )\n  );\n}\nfunction clientMiddlewareErrorHandler(error, routeId, matches, didCallHandler) {\n  if (didCallHandler) {\n    return {\n      [routeId]: { type: \"error\", result: error }\n    };\n  } else {\n    let boundaryRouteId = findNearestBoundary(\n      matches,\n      matches.find((m) => m.route.id === routeId || m.route.loader)?.route.id || routeId\n    ).route.id;\n    return {\n      [boundaryRouteId]: { type: \"error\", result: error }\n    };\n  }\n}\nasync function runServerMiddlewarePipeline(args, handler, errorHandler) {\n  let { matches, request, params, context } = args;\n  let tuples = matches.flatMap(\n    (m) => m.route.unstable_middleware ? m.route.unstable_middleware.map((fn) => [m.route.id, fn]) : []\n  );\n  let result = await callServerRouteMiddleware(\n    { request, params, context },\n    tuples,\n    handler,\n    errorHandler\n  );\n  if (isResponse(result)) {\n    return result;\n  }\n  invariant(false, `Expected a Response to be returned from route middleware`);\n}\nasync function callServerRouteMiddleware(args, middlewares, handler, errorHandler, idx = 0) {\n  let { request } = args;\n  if (request.signal.aborted) {\n    if (request.signal.reason) {\n      throw request.signal.reason;\n    }\n    throw new Error(\n      `Request aborted without an \\`AbortSignal.reason\\`: ${request.method} ${request.url}`\n    );\n  }\n  let tuple = middlewares[idx];\n  if (!tuple) {\n    let result = await handler();\n    return result;\n  }\n  let [routeId, middleware] = tuple;\n  let nextCalled = false;\n  let nextResult = void 0;\n  let next = async () => {\n    if (nextCalled) {\n      throw new Error(\"You may only call `next()` once per middleware\");\n    }\n    nextCalled = true;\n    try {\n      let result = await callServerRouteMiddleware(\n        args,\n        middlewares,\n        handler,\n        errorHandler,\n        idx + 1\n      );\n      if (isDataWithResponseInit(result)) {\n        result = dataWithResponseInitToResponse(result);\n      }\n      nextResult = result;\n      return nextResult;\n    } catch (e) {\n      nextResult = await errorHandler(\n        // Convert thrown data() values to ErrorResponses\n        isDataWithResponseInit(e) ? dataWithResponseInitToErrorResponse(e) : e,\n        routeId\n      );\n      return nextResult;\n    }\n  };\n  try {\n    let result = await middleware(\n      {\n        request: args.request,\n        params: args.params,\n        context: args.context\n      },\n      next\n    );\n    if (isDataWithResponseInit(result)) {\n      result = dataWithResponseInitToResponse(result);\n    }\n    if (nextCalled) {\n      return typeof result === \"undefined\" ? nextResult : result;\n    } else if (isResponse(result)) {\n      return result;\n    } else {\n      nextResult = await next();\n      return nextResult;\n    }\n  } catch (e) {\n    let response = await errorHandler(\n      // Convert thrown data() values to ErrorResponses\n      isDataWithResponseInit(e) ? dataWithResponseInitToErrorResponse(e) : e,\n      routeId\n    );\n    return response;\n  }\n}\nasync function runClientMiddlewarePipeline(args, handler, errorHandler) {\n  let { matches, request, params, context } = args;\n  let tuples = matches.flatMap(\n    (m) => m.route.unstable_middleware ? m.route.unstable_middleware.map((fn) => [m.route.id, fn]) : []\n  );\n  let handlerResult = {};\n  await callClientRouteMiddleware(\n    { request, params, context },\n    tuples,\n    handler,\n    errorHandler,\n    handlerResult\n  );\n  return handlerResult;\n}\nasync function callClientRouteMiddleware(args, middlewares, handler, errorHandler, handlerResult = {}, idx = 0) {\n  let { request } = args;\n  if (request.signal.aborted) {\n    if (request.signal.reason) {\n      throw request.signal.reason;\n    }\n    throw new Error(\n      `Request aborted without an \\`AbortSignal.reason\\`: ${request.method} ${request.url}`\n    );\n  }\n  let tuple = middlewares[idx];\n  if (!tuple) {\n    let result = await handler();\n    Object.assign(handlerResult, result);\n    return;\n  }\n  let [routeId, middleware] = tuple;\n  let nextCalled = false;\n  let next = async () => {\n    if (nextCalled) {\n      throw new Error(\"You may only call `next()` once per middleware\");\n    }\n    nextCalled = true;\n    try {\n      let result = await callClientRouteMiddleware(\n        args,\n        middlewares,\n        handler,\n        errorHandler,\n        handlerResult,\n        idx + 1\n      );\n      Object.assign(handlerResult, result);\n    } catch (e) {\n      let result = await errorHandler(e, routeId);\n      Object.assign(handlerResult, result);\n    }\n  };\n  try {\n    let result = await middleware(\n      {\n        request: args.request,\n        params: args.params,\n        context: args.context\n      },\n      next\n    );\n    if (typeof result !== \"undefined\") {\n      console.warn(\n        \"client middlewares are not intended to return values, the value will be ignored\",\n        result\n      );\n    }\n    if (!nextCalled) {\n      await next();\n    }\n  } catch (error) {\n    let result = await errorHandler(error, routeId);\n    Object.assign(handlerResult, result);\n  }\n}\nfunction getDataStrategyMatchLazyPromises(mapRouteProperties2, manifest, request, match, lazyRoutePropertiesToSkip) {\n  let lazyMiddlewarePromise = loadLazyRouteProperty({\n    key: \"unstable_middleware\",\n    route: match.route,\n    manifest,\n    mapRouteProperties: mapRouteProperties2\n  });\n  let lazyRoutePromises = loadLazyRoute(\n    match.route,\n    isMutationMethod(request.method) ? \"action\" : \"loader\",\n    manifest,\n    mapRouteProperties2,\n    lazyRoutePropertiesToSkip\n  );\n  return {\n    middleware: lazyMiddlewarePromise,\n    route: lazyRoutePromises.lazyRoutePromise,\n    handler: lazyRoutePromises.lazyHandlerPromise\n  };\n}\nfunction getDataStrategyMatch(mapRouteProperties2, manifest, request, match, lazyRoutePropertiesToSkip, scopedContext, shouldLoad, unstable_shouldRevalidateArgs = null) {\n  let isUsingNewApi = false;\n  let _lazyPromises = getDataStrategyMatchLazyPromises(\n    mapRouteProperties2,\n    manifest,\n    request,\n    match,\n    lazyRoutePropertiesToSkip\n  );\n  return {\n    ...match,\n    _lazyPromises,\n    shouldLoad,\n    unstable_shouldRevalidateArgs,\n    unstable_shouldCallHandler(defaultShouldRevalidate) {\n      isUsingNewApi = true;\n      if (!unstable_shouldRevalidateArgs) {\n        return shouldLoad;\n      }\n      if (typeof defaultShouldRevalidate === \"boolean\") {\n        return shouldRevalidateLoader(match, {\n          ...unstable_shouldRevalidateArgs,\n          defaultShouldRevalidate\n        });\n      }\n      return shouldRevalidateLoader(match, unstable_shouldRevalidateArgs);\n    },\n    resolve(handlerOverride) {\n      if (isUsingNewApi || shouldLoad || handlerOverride && !isMutationMethod(request.method) && (match.route.lazy || match.route.loader)) {\n        return callLoaderOrAction({\n          request,\n          match,\n          lazyHandlerPromise: _lazyPromises?.handler,\n          lazyRoutePromise: _lazyPromises?.route,\n          handlerOverride,\n          scopedContext\n        });\n      }\n      return Promise.resolve({ type: \"data\" /* data */, result: void 0 });\n    }\n  };\n}\nfunction getTargetedDataStrategyMatches(mapRouteProperties2, manifest, request, matches, targetMatch, lazyRoutePropertiesToSkip, scopedContext, shouldRevalidateArgs = null) {\n  return matches.map((match) => {\n    if (match.route.id !== targetMatch.route.id) {\n      return {\n        ...match,\n        shouldLoad: false,\n        unstable_shouldRevalidateArgs: shouldRevalidateArgs,\n        unstable_shouldCallHandler: () => false,\n        _lazyPromises: getDataStrategyMatchLazyPromises(\n          mapRouteProperties2,\n          manifest,\n          request,\n          match,\n          lazyRoutePropertiesToSkip\n        ),\n        resolve: () => Promise.resolve({ type: \"data\", result: void 0 })\n      };\n    }\n    return getDataStrategyMatch(\n      mapRouteProperties2,\n      manifest,\n      request,\n      match,\n      lazyRoutePropertiesToSkip,\n      scopedContext,\n      true,\n      shouldRevalidateArgs\n    );\n  });\n}\nasync function callDataStrategyImpl(dataStrategyImpl, request, matches, fetcherKey, scopedContext, isStaticHandler) {\n  if (matches.some((m) => m._lazyPromises?.middleware)) {\n    await Promise.all(matches.map((m) => m._lazyPromises?.middleware));\n  }\n  let dataStrategyArgs = {\n    request,\n    params: matches[0].params,\n    context: scopedContext,\n    matches\n  };\n  let unstable_runClientMiddleware = isStaticHandler ? () => {\n    throw new Error(\n      \"You cannot call `unstable_runClientMiddleware()` from a static handler `dataStrategy`. Middleware is run outside of `dataStrategy` during SSR in order to bubble up the Response.  You can enable middleware via the `respond` API in `query`/`queryRoute`\"\n    );\n  } : (cb) => {\n    let typedDataStrategyArgs = dataStrategyArgs;\n    let didCallHandler = false;\n    return runClientMiddlewarePipeline(\n      typedDataStrategyArgs,\n      () => {\n        didCallHandler = true;\n        return cb({\n          ...typedDataStrategyArgs,\n          fetcherKey,\n          unstable_runClientMiddleware: () => {\n            throw new Error(\n              \"Cannot call `unstable_runClientMiddleware()` from within an `unstable_runClientMiddleware` handler\"\n            );\n          }\n        });\n      },\n      (error, routeId) => clientMiddlewareErrorHandler(\n        error,\n        routeId,\n        matches,\n        didCallHandler\n      )\n    );\n  };\n  let results = await dataStrategyImpl({\n    ...dataStrategyArgs,\n    fetcherKey,\n    unstable_runClientMiddleware\n  });\n  try {\n    await Promise.all(\n      matches.flatMap((m) => [\n        m._lazyPromises?.handler,\n        m._lazyPromises?.route\n      ])\n    );\n  } catch (e) {\n  }\n  return results;\n}\nasync function callLoaderOrAction({\n  request,\n  match,\n  lazyHandlerPromise,\n  lazyRoutePromise,\n  handlerOverride,\n  scopedContext\n}) {\n  let result;\n  let onReject;\n  let isAction = isMutationMethod(request.method);\n  let type = isAction ? \"action\" : \"loader\";\n  let runHandler = (handler) => {\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = (ctx) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean \"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: scopedContext\n        },\n        ...ctx !== void 0 ? [ctx] : []\n      );\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride((ctx) => actualHandler(ctx)) : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = isAction ? match.route.action : match.route.loader;\n    if (lazyHandlerPromise || lazyRoutePromise) {\n      if (handler) {\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          // Ensure all lazy route promises are resolved before continuing\n          lazyHandlerPromise,\n          lazyRoutePromise\n        ]);\n        if (handlerError !== void 0) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        await lazyHandlerPromise;\n        let handler2 = isAction ? match.route.action : match.route.loader;\n        if (handler2) {\n          [result] = await Promise.all([runHandler(handler2), lazyRoutePromise]);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          return { type: \"data\" /* data */, result: void 0 };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n  } catch (e) {\n    return { type: \"error\" /* error */, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let { result, type } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data2;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data2 = null;\n        } else {\n          data2 = await result.json();\n        }\n      } else {\n        data2 = await result.text();\n      }\n    } catch (e) {\n      return { type: \"error\" /* error */, error: e };\n    }\n    if (type === \"error\" /* error */) {\n      return {\n        type: \"error\" /* error */,\n        error: new ErrorResponseImpl(result.status, result.statusText, data2),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: \"data\" /* data */,\n      data: data2,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === \"error\" /* error */) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: \"error\" /* error */,\n          error: result.data,\n          statusCode: result.init?.status,\n          headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n        };\n      }\n      return {\n        type: \"error\" /* error */,\n        error: new ErrorResponseImpl(\n          result.init?.status || 500,\n          void 0,\n          result.data\n        ),\n        statusCode: isRouteErrorResponse(result) ? result.status : void 0,\n        headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n      };\n    }\n    return {\n      type: \"error\" /* error */,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : void 0\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: \"data\" /* data */,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n    };\n  }\n  return { type: \"data\" /* data */, data: result };\n}\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n  if (!isAbsoluteUrl(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      location\n    );\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (isAbsoluteUrl(location)) {\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = { signal };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, isStaticHandler = false, skipLoaderErrorBubbling = false) {\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      if (pendingError !== void 0) {\n        error = pendingError;\n        pendingError = void 0;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      if (!isStaticHandler) {\n        loaderData[id] = ResetLoaderDataSymbol;\n      }\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      loaderData[id] = result.data;\n      if (result.statusCode && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  if (pendingError !== void 0 && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    if (pendingActionResult[2]) {\n      loaderData[pendingActionResult[2]] = void 0;\n    }\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults) {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult\n  );\n  revalidatingFetchers.filter((f) => !f.matches || f.matches.some((m) => m.shouldLoad)).forEach((rf) => {\n    let { key, match, controller } = rf;\n    if (controller && controller.signal.aborted) {\n      return;\n    }\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return { loaderData, errors };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = Object.entries(newLoaderData).filter(([, v]) => v !== ResetLoaderDataSymbol).reduce((merged, [k, v]) => {\n    merged[k] = v;\n    return merged;\n  }, {});\n  for (let match of matches) {\n    let id = match.route.id;\n    if (!newLoaderData.hasOwnProperty(id) && loaderData.hasOwnProperty(id) && match.route.loader) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  let route = routes.length === 1 ? routes[0] : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`\n  };\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route\n      }\n    ],\n    route\n  };\n}\nfunction getInternalRouterError(status, {\n  pathname,\n  routeId,\n  method,\n  type,\n  message\n} = {}) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = `You made a ${method} request to \"${pathname}\" but did not provide a \\`loader\\` for route \"${routeId}\", so there is no way to handle the request.`;\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = `You made a ${method.toUpperCase()} request to \"${pathname}\" but did not provide an \\`action\\` for route \"${routeId}\", so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    return true;\n  } else if (b.hash !== \"\") {\n    return true;\n  }\n  return false;\n}\nfunction dataWithResponseInitToResponse(data2) {\n  return new Response(\n    typeof data2.data === \"string\" ? data2.data : JSON.stringify(data2.data),\n    data2.init || void 0\n  );\n}\nfunction dataWithResponseInitToErrorResponse(data2) {\n  return new ErrorResponseImpl(\n    data2.init?.status ?? 500,\n    data2.init?.statusText ?? \"Internal Server Error\",\n    data2.data\n  );\n}\nfunction errorResponseToResponse(error) {\n  return new Response(\n    typeof error.data === \"string\" ? error.data : JSON.stringify(error.data),\n    {\n      status: error.status,\n      statusText: error.statusText\n    }\n  );\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === \"data\" /* data */ || result.type === \"error\" /* error */);\n}\nfunction isRedirectDataStrategyResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isErrorResult(result) {\n  return result.type === \"error\" /* error */;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === \"redirect\" /* redirect */;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectStatusCode(statusCode) {\n  return redirectStatusCodes.has(statusCode);\n}\nfunction isRedirectResponse(result) {\n  return isResponse(result) && isRedirectStatusCode(result.status) && result.headers.has(\"Location\");\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toUpperCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toUpperCase());\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    return matches[matches.length - 1];\n  }\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let { formMethod, formAction, formEncType, text, formData, json } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: void 0,\n      json: void 0,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: void 0,\n      text: void 0\n    };\n  } else if (json !== void 0) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: void 0,\n      json,\n      text: void 0\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: void 0,\n      formAction: void 0,\n      formEncType: void 0,\n      formData: void 0,\n      json: void 0,\n      text: void 0\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data2) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data2\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: void 0,\n      formAction: void 0,\n      formEncType: void 0,\n      formData: void 0,\n      json: void 0,\n      text: void 0,\n      data: data2\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : void 0\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data2) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: void 0,\n    formAction: void 0,\n    formEncType: void 0,\n    formData: void 0,\n    json: void 0,\n    text: void 0,\n    data: data2\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\nfunction createDeferred() {\n  let resolve;\n  let reject;\n  let promise = new Promise((res, rej) => {\n    resolve = async (val) => {\n      res(val);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n    reject = async (error) => {\n      rej(error);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n  });\n  return {\n    promise,\n    //@ts-ignore\n    resolve,\n    //@ts-ignore\n    reject\n  };\n}\n\n// lib/context.ts\nimport * as React from \"react\";\nvar DataRouterContext = React.createContext(null);\nDataRouterContext.displayName = \"DataRouter\";\nvar DataRouterStateContext = React.createContext(null);\nDataRouterStateContext.displayName = \"DataRouterState\";\nvar RSCRouterContext = React.createContext(false);\nfunction useIsRSCRouterContext() {\n  return React.useContext(RSCRouterContext);\n}\nvar ViewTransitionContext = React.createContext({\n  isTransitioning: false\n});\nViewTransitionContext.displayName = \"ViewTransition\";\nvar FetchersContext = React.createContext(\n  /* @__PURE__ */ new Map()\n);\nFetchersContext.displayName = \"Fetchers\";\nvar AwaitContext = React.createContext(null);\nAwaitContext.displayName = \"Await\";\nvar NavigationContext = React.createContext(\n  null\n);\nNavigationContext.displayName = \"Navigation\";\nvar LocationContext = React.createContext(\n  null\n);\nLocationContext.displayName = \"Location\";\nvar RouteContext = React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nRouteContext.displayName = \"Route\";\nvar RouteErrorContext = React.createContext(null);\nRouteErrorContext.displayName = \"RouteError\";\nvar ENABLE_DEV_WARNINGS = true;\n\n// lib/hooks.tsx\nimport * as React2 from \"react\";\nfunction useHref(to, { relative } = {}) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n  let { basename, navigator } = React2.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\nfunction useInRouterContext() {\n  return React2.useContext(LocationContext) != null;\n}\nfunction useLocation() {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n  return React2.useContext(LocationContext).location;\n}\nfunction useNavigationType() {\n  return React2.useContext(LocationContext).navigationType;\n}\nfunction useMatch(pattern) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n  let { pathname } = useLocation();\n  return React2.useMemo(\n    () => matchPath(pattern, decodePath(pathname)),\n    [pathname, pattern]\n  );\n}\nvar navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React2.useContext(NavigationContext).static;\n  if (!isStatic) {\n    React2.useLayoutEffect(cb);\n  }\n}\nfunction useNavigate() {\n  let { isDataRoute } = React2.useContext(RouteContext);\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n  let dataRouterContext = React2.useContext(DataRouterContext);\n  let { basename, navigator } = React2.useContext(NavigationContext);\n  let { matches } = React2.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));\n  let activeRef = React2.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React2.useCallback(\n    (to, options = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n      }\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext\n    ]\n  );\n  return navigate;\n}\nvar OutletContext = React2.createContext(null);\nfunction useOutletContext() {\n  return React2.useContext(OutletContext);\n}\nfunction useOutlet(context) {\n  let outlet = React2.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /* @__PURE__ */ React2.createElement(OutletContext.Provider, { value: context }, outlet);\n  }\n  return outlet;\n}\nfunction useParams() {\n  let { matches } = React2.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\nfunction useResolvedPath(to, { relative } = {}) {\n  let { matches } = React2.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));\n  return React2.useMemo(\n    () => resolveTo(\n      to,\n      JSON.parse(routePathnamesJson),\n      locationPathname,\n      relative === \"path\"\n    ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n  let { navigator } = React2.useContext(NavigationContext);\n  let { matches: parentMatches } = React2.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (ENABLE_DEV_WARNINGS) {\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\") || parentPath.endsWith(\"*?\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at \"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the parent route path has no trailing \"*\". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path=\"${parentPath}\"> to <Route path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    invariant(\n      parentPathnameBase === \"/\" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n  if (ENABLE_DEV_WARNINGS) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n    warning(\n      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n  let renderedMatches = _renderMatches(\n    matches && matches.map(\n      (match) => Object.assign({}, match, {\n        params: Object.assign({}, parentParams, match.params),\n        pathname: joinPaths([\n          parentPathnameBase,\n          // Re-encode pathnames that were decoded inside matchRoutes\n          navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname\n        ]),\n        pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([\n          parentPathnameBase,\n          // Re-encode pathnames that were decoded inside matchRoutes\n          navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase\n        ])\n      })\n    ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n  if (locationArg && renderedMatches) {\n    return /* @__PURE__ */ React2.createElement(\n      LocationContext.Provider,\n      {\n        value: {\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location\n          },\n          navigationType: \"POP\" /* Pop */\n        }\n      },\n      renderedMatches\n    );\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n  let devInfo = null;\n  if (ENABLE_DEV_WARNINGS) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n    devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\"p\", null, \"\\u{1F4BF} Hey developer \\u{1F44B}\"), /* @__PURE__ */ React2.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /* @__PURE__ */ React2.createElement(\"code\", { style: codeStyles }, \"ErrorBoundary\"), \" or\", \" \", /* @__PURE__ */ React2.createElement(\"code\", { style: codeStyles }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\"h2\", null, \"Unexpected Application Error!\"), /* @__PURE__ */ React2.createElement(\"h3\", { style: { fontStyle: \"italic\" } }, message), stack ? /* @__PURE__ */ React2.createElement(\"pre\", { style: preStyles }, stack) : null, devInfo);\n}\nvar defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);\nvar RenderErrorBoundary = class extends React2.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n    return {\n      error: props.error !== void 0 ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n  render() {\n    return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(\n      RouteErrorContext.Provider,\n      {\n        value: this.state.error,\n        children: this.props.component\n      }\n    )) : this.props.children;\n  }\n};\nfunction RenderedRoute({ routeContext, match, children }) {\n  let dataRouterContext = React2.useContext(DataRouterContext);\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);\n}\nfunction _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {\n  if (matches == null) {\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      matches = dataRouterState.matches;\n    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id] !== void 0\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let { loaderData, errors: errors2 } = dataRouterState;\n        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);\n        if (match.route.lazy || needsToRunLoader) {\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight(\n    (outlet, match, index) => {\n      let error;\n      let shouldRenderHydrateFallback = false;\n      let errorElement = null;\n      let hydrateFallbackElement = null;\n      if (dataRouterState) {\n        error = errors && match.route.id ? errors[match.route.id] : void 0;\n        errorElement = match.route.errorElement || defaultErrorElement;\n        if (renderFallback) {\n          if (fallbackIndex < 0 && index === 0) {\n            warningOnce(\n              \"route-fallback\",\n              false,\n              \"No `HydrateFallback` element provided to render during initial hydration\"\n            );\n            shouldRenderHydrateFallback = true;\n            hydrateFallbackElement = null;\n          } else if (fallbackIndex === index) {\n            shouldRenderHydrateFallback = true;\n            hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n          }\n        }\n      }\n      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));\n      let getChildren = () => {\n        let children;\n        if (error) {\n          children = errorElement;\n        } else if (shouldRenderHydrateFallback) {\n          children = hydrateFallbackElement;\n        } else if (match.route.Component) {\n          children = /* @__PURE__ */ React2.createElement(match.route.Component, null);\n        } else if (match.route.element) {\n          children = match.route.element;\n        } else {\n          children = outlet;\n        }\n        return /* @__PURE__ */ React2.createElement(\n          RenderedRoute,\n          {\n            match,\n            routeContext: {\n              outlet,\n              matches: matches2,\n              isDataRoute: dataRouterState != null\n            },\n            children\n          }\n        );\n      };\n      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(\n        RenderErrorBoundary,\n        {\n          location: dataRouterState.location,\n          revalidation: dataRouterState.revalidation,\n          component: errorElement,\n          error,\n          children: getChildren(),\n          routeContext: { outlet: null, matches: matches2, isDataRoute: true }\n        }\n      ) : getChildren();\n    },\n    null\n  );\n}\nfunction getDataRouterConsoleError(hookName) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React2.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React2.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React2.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\nfunction useRouteId() {\n  return useCurrentRouteId(\"useRouteId\" /* UseRouteId */);\n}\nfunction useNavigation() {\n  let state = useDataRouterState(\"useNavigation\" /* UseNavigation */);\n  return state.navigation;\n}\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(\"useRevalidator\" /* UseRevalidator */);\n  let state = useDataRouterState(\"useRevalidator\" /* UseRevalidator */);\n  let revalidate = React2.useCallback(async () => {\n    await dataRouterContext.router.revalidate();\n  }, [dataRouterContext.router]);\n  return React2.useMemo(\n    () => ({ revalidate, state: state.revalidation }),\n    [revalidate, state.revalidation]\n  );\n}\nfunction useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    \"useMatches\" /* UseMatches */\n  );\n  return React2.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\nfunction useLoaderData() {\n  let state = useDataRouterState(\"useLoaderData\" /* UseLoaderData */);\n  let routeId = useCurrentRouteId(\"useLoaderData\" /* UseLoaderData */);\n  return state.loaderData[routeId];\n}\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(\"useRouteLoaderData\" /* UseRouteLoaderData */);\n  return state.loaderData[routeId];\n}\nfunction useActionData() {\n  let state = useDataRouterState(\"useActionData\" /* UseActionData */);\n  let routeId = useCurrentRouteId(\"useLoaderData\" /* UseLoaderData */);\n  return state.actionData ? state.actionData[routeId] : void 0;\n}\nfunction useRouteError() {\n  let error = React2.useContext(RouteErrorContext);\n  let state = useDataRouterState(\"useRouteError\" /* UseRouteError */);\n  let routeId = useCurrentRouteId(\"useRouteError\" /* UseRouteError */);\n  if (error !== void 0) {\n    return error;\n  }\n  return state.errors?.[routeId];\n}\nfunction useAsyncValue() {\n  let value = React2.useContext(AwaitContext);\n  return value?._data;\n}\nfunction useAsyncError() {\n  let value = React2.useContext(AwaitContext);\n  return value?._error;\n}\nvar blockerId = 0;\nfunction useBlocker(shouldBlock) {\n  let { router, basename } = useDataRouterContext(\"useBlocker\" /* UseBlocker */);\n  let state = useDataRouterState(\"useBlocker\" /* UseBlocker */);\n  let [blockerKey, setBlockerKey] = React2.useState(\"\");\n  let blockerFunction = React2.useCallback(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n        },\n        historyAction\n      });\n    },\n    [basename, shouldBlock]\n  );\n  React2.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n  React2.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\nfunction useNavigateStable() {\n  let { router } = useDataRouterContext(\"useNavigate\" /* UseNavigateStable */);\n  let id = useCurrentRouteId(\"useNavigate\" /* UseNavigateStable */);\n  let activeRef = React2.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React2.useCallback(\n    async (to, options = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        await router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n  return navigate;\n}\nvar alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n// lib/components.tsx\nimport * as React3 from \"react\";\n\n// lib/server-runtime/warnings.ts\nvar alreadyWarned2 = {};\nfunction warnOnce(condition, message) {\n  if (!condition && !alreadyWarned2[message]) {\n    alreadyWarned2[message] = true;\n    console.warn(message);\n  }\n}\n\n// lib/components.tsx\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.hasErrorBoundary || route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (ENABLE_DEV_WARNINGS) {\n      if (route.element) {\n        warning(\n          false,\n          \"You should not include both `Component` and `element` on your route - `Component` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      element: React3.createElement(route.Component),\n      Component: void 0\n    });\n  }\n  if (route.HydrateFallback) {\n    if (ENABLE_DEV_WARNINGS) {\n      if (route.hydrateFallbackElement) {\n        warning(\n          false,\n          \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: React3.createElement(route.HydrateFallback),\n      HydrateFallback: void 0\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (ENABLE_DEV_WARNINGS) {\n      if (route.errorElement) {\n        warning(\n          false,\n          \"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      errorElement: React3.createElement(route.ErrorBoundary),\n      ErrorBoundary: void 0\n    });\n  }\n  return updates;\n}\nvar hydrationRouteProperties = [\n  \"HydrateFallback\",\n  \"hydrateFallbackElement\"\n];\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    unstable_getContext: opts?.unstable_getContext,\n    future: opts?.future,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    hydrationRouteProperties,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation\n  }).initialize();\n}\nvar Deferred = class {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n};\nfunction RouterProvider({\n  router,\n  flushSync: reactDomFlushSyncImpl\n}) {\n  let [state, setStateImpl] = React3.useState(router.state);\n  let [pendingState, setPendingState] = React3.useState();\n  let [vtContext, setVtContext] = React3.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React3.useState();\n  let [transition, setTransition] = React3.useState();\n  let [interruption, setInterruption] = React3.useState();\n  let fetcherData = React3.useRef(/* @__PURE__ */ new Map());\n  let setState = React3.useCallback(\n    (newState, { deletedFetchers, flushSync, viewTransitionOpts }) => {\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== void 0) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      warnOnce(\n        flushSync === false || reactDomFlushSyncImpl != null,\n        'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from \"react-router/dom\"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.'\n      );\n      let isViewTransitionAvailable = router.window != null && router.window.document != null && typeof router.window.document.startViewTransition === \"function\";\n      warnOnce(\n        viewTransitionOpts == null || isViewTransitionAvailable,\n        \"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available.\"\n      );\n      if (!viewTransitionOpts || !isViewTransitionAvailable) {\n        if (reactDomFlushSyncImpl && flushSync) {\n          reactDomFlushSyncImpl(() => setStateImpl(newState));\n        } else {\n          React3.startTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n      if (reactDomFlushSyncImpl && flushSync) {\n        reactDomFlushSyncImpl(() => {\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation\n          });\n        });\n        let t = router.window.document.startViewTransition(() => {\n          reactDomFlushSyncImpl(() => setStateImpl(newState));\n        });\n        t.finished.finally(() => {\n          reactDomFlushSyncImpl(() => {\n            setRenderDfd(void 0);\n            setTransition(void 0);\n            setPendingState(void 0);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n        reactDomFlushSyncImpl(() => setTransition(t));\n        return;\n      }\n      if (transition) {\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      } else {\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      }\n    },\n    [router.window, reactDomFlushSyncImpl, transition, renderDfd]\n  );\n  React3.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React3.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  React3.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition2 = router.window.document.startViewTransition(async () => {\n        React3.startTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition2.finished.finally(() => {\n        setRenderDfd(void 0);\n        setTransition(void 0);\n        setPendingState(void 0);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition2);\n    }\n  }, [pendingState, renderDfd, router.window]);\n  React3.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  React3.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(void 0);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  let navigator = React3.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state2, opts) => router.navigate(to, {\n        state: state2,\n        preventScrollReset: opts?.preventScrollReset\n      }),\n      replace: (to, state2, opts) => router.navigate(to, {\n        replace: true,\n        state: state2,\n        preventScrollReset: opts?.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React3.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename\n    }),\n    [router, navigator, basename]\n  );\n  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(DataRouterContext.Provider, { value: dataRouterContext }, /* @__PURE__ */ React3.createElement(DataRouterStateContext.Provider, { value: state }, /* @__PURE__ */ React3.createElement(FetchersContext.Provider, { value: fetcherData.current }, /* @__PURE__ */ React3.createElement(ViewTransitionContext.Provider, { value: vtContext }, /* @__PURE__ */ React3.createElement(\n    Router,\n    {\n      basename,\n      location: state.location,\n      navigationType: state.historyAction,\n      navigator\n    },\n    /* @__PURE__ */ React3.createElement(\n      MemoizedDataRoutes,\n      {\n        routes: router.routes,\n        future: router.future,\n        state\n      }\n    )\n  ))))), null);\n}\nvar MemoizedDataRoutes = React3.memo(DataRoutes);\nfunction DataRoutes({\n  routes,\n  future,\n  state\n}) {\n  return useRoutesImpl(routes, void 0, state, future);\n}\nfunction MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}) {\n  let historyRef = React3.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React3.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React3.useCallback(\n    (newState) => {\n      React3.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React3.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React3.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction Navigate({\n  to,\n  replace: replace2,\n  state,\n  relative\n}) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n  let { static: isStatic } = React3.useContext(NavigationContext);\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`\n  );\n  let { matches } = React3.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n  React3.useEffect(() => {\n    navigate(JSON.parse(jsonPath), { replace: replace2, state, relative });\n  }, [navigate, jsonPath, relative, replace2, state]);\n  return null;\n}\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\nfunction Route(props) {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\nfunction Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = \"POP\" /* Pop */,\n  navigator,\n  static: staticProp = false\n}) {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`\n  );\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React3.useMemo(\n    () => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: {}\n    }),\n    [basename, navigator, staticProp]\n  );\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React3.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL \"${pathname}${search}${hash}\" because it does not start with the basename, so the <Router> won't render anything.`\n  );\n  if (locationContext == null) {\n    return null;\n  }\n  return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));\n}\nfunction Routes({\n  children,\n  location\n}) {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\nfunction Await({\n  children,\n  errorElement,\n  resolve\n}) {\n  return /* @__PURE__ */ React3.createElement(AwaitErrorBoundary, { resolve, errorElement }, /* @__PURE__ */ React3.createElement(ResolveAwait, null, children));\n}\nvar AwaitErrorBoundary = class extends React3.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n  render() {\n    let { children, errorElement, resolve } = this.props;\n    let promise = null;\n    let status = 0 /* pending */;\n    if (!(resolve instanceof Promise)) {\n      status = 1 /* success */;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      status = 2 /* error */;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {\n      });\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if (resolve._tracked) {\n      promise = resolve;\n      status = \"_error\" in promise ? 2 /* error */ : \"_data\" in promise ? 1 /* success */ : 0 /* pending */;\n    } else {\n      status = 0 /* pending */;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data2) => Object.defineProperty(resolve, \"_data\", { get: () => data2 }),\n        (error) => Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n    if (status === 2 /* error */ && !errorElement) {\n      throw promise._error;\n    }\n    if (status === 2 /* error */) {\n      return /* @__PURE__ */ React3.createElement(AwaitContext.Provider, { value: promise, children: errorElement });\n    }\n    if (status === 1 /* success */) {\n      return /* @__PURE__ */ React3.createElement(AwaitContext.Provider, { value: promise, children });\n    }\n    throw promise;\n  }\n};\nfunction ResolveAwait({\n  children\n}) {\n  let data2 = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data2) : children;\n  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, toRender);\n}\nfunction createRoutesFromChildren(children, parentPath = []) {\n  let routes = [];\n  React3.Children.forEach(children, (element, index) => {\n    if (!React3.isValidElement(element)) {\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React3.Fragment) {\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n    invariant(\n      element.type === Route,\n      `[${typeof element.type === \"string\" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      hydrateFallbackElement: element.props.hydrateFallbackElement,\n      HydrateFallback: element.props.HydrateFallback,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n    routes.push(route);\n  });\n  return routes;\n}\nvar createRoutesFromElements = createRoutesFromChildren;\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction useRouteComponentProps() {\n  return {\n    params: useParams(),\n    loaderData: useLoaderData(),\n    actionData: useActionData(),\n    matches: useMatches()\n  };\n}\nfunction WithComponentProps({\n  children\n}) {\n  const props = useRouteComponentProps();\n  return React3.cloneElement(children, props);\n}\nfunction withComponentProps(Component4) {\n  return function WithComponentProps2() {\n    const props = useRouteComponentProps();\n    return React3.createElement(Component4, props);\n  };\n}\nfunction useHydrateFallbackProps() {\n  return {\n    params: useParams(),\n    loaderData: useLoaderData(),\n    actionData: useActionData()\n  };\n}\nfunction WithHydrateFallbackProps({\n  children\n}) {\n  const props = useHydrateFallbackProps();\n  return React3.cloneElement(children, props);\n}\nfunction withHydrateFallbackProps(HydrateFallback) {\n  return function WithHydrateFallbackProps2() {\n    const props = useHydrateFallbackProps();\n    return React3.createElement(HydrateFallback, props);\n  };\n}\nfunction useErrorBoundaryProps() {\n  return {\n    params: useParams(),\n    loaderData: useLoaderData(),\n    actionData: useActionData(),\n    error: useRouteError()\n  };\n}\nfunction WithErrorBoundaryProps({\n  children\n}) {\n  const props = useErrorBoundaryProps();\n  return React3.cloneElement(children, props);\n}\nfunction withErrorBoundaryProps(ErrorBoundary) {\n  return function WithErrorBoundaryProps2() {\n    const props = useErrorBoundaryProps();\n    return React3.createElement(ErrorBoundary, props);\n  };\n}\n\n// lib/dom/dom.ts\nvar defaultMethod = \"get\";\nvar defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && // Ignore everything but left clicks\n  (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event);\n}\nfunction createSearchParams(init = \"\") {\n  return new URLSearchParams(\n    typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo2, key) => {\n      let value = init[key];\n      return memo2.concat(\n        Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n      );\n    }, [])\n  );\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\nvar _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nvar supportedFormEncTypes = /* @__PURE__ */ new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` and will default to \"${defaultEncType}\"`\n    );\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(form, target);\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or <input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = void 0;\n  }\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n\n// lib/dom/ssr/single-fetch.tsx\nimport * as React4 from \"react\";\n\n// vendor/turbo-stream-v2/utils.ts\nvar HOLE = -1;\nvar NAN = -2;\nvar NEGATIVE_INFINITY = -3;\nvar NEGATIVE_ZERO = -4;\nvar NULL = -5;\nvar POSITIVE_INFINITY = -6;\nvar UNDEFINED = -7;\nvar TYPE_BIGINT = \"B\";\nvar TYPE_DATE = \"D\";\nvar TYPE_ERROR = \"E\";\nvar TYPE_MAP = \"M\";\nvar TYPE_NULL_OBJECT = \"N\";\nvar TYPE_PROMISE = \"P\";\nvar TYPE_REGEXP = \"R\";\nvar TYPE_SET = \"S\";\nvar TYPE_SYMBOL = \"Y\";\nvar TYPE_URL = \"U\";\nvar TYPE_PREVIOUS_RESOLVED = \"Z\";\nvar Deferred2 = class {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n};\nfunction createLineSplittingTransform() {\n  const decoder = new TextDecoder();\n  let leftover = \"\";\n  return new TransformStream({\n    transform(chunk, controller) {\n      const str = decoder.decode(chunk, { stream: true });\n      const parts = (leftover + str).split(\"\\n\");\n      leftover = parts.pop() || \"\";\n      for (const part of parts) {\n        controller.enqueue(part);\n      }\n    },\n    flush(controller) {\n      if (leftover) {\n        controller.enqueue(leftover);\n      }\n    }\n  });\n}\n\n// vendor/turbo-stream-v2/flatten.ts\nfunction flatten(input) {\n  const { indices } = this;\n  const existing = indices.get(input);\n  if (existing) return [existing];\n  if (input === void 0) return UNDEFINED;\n  if (input === null) return NULL;\n  if (Number.isNaN(input)) return NAN;\n  if (input === Number.POSITIVE_INFINITY) return POSITIVE_INFINITY;\n  if (input === Number.NEGATIVE_INFINITY) return NEGATIVE_INFINITY;\n  if (input === 0 && 1 / input < 0) return NEGATIVE_ZERO;\n  const index = this.index++;\n  indices.set(input, index);\n  stringify.call(this, input, index);\n  return index;\n}\nfunction stringify(input, index) {\n  const { deferred, plugins, postPlugins } = this;\n  const str = this.stringified;\n  const stack = [[input, index]];\n  while (stack.length > 0) {\n    const [input2, index2] = stack.pop();\n    const partsForObj = (obj) => Object.keys(obj).map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`).join(\",\");\n    let error = null;\n    switch (typeof input2) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        str[index2] = JSON.stringify(input2);\n        break;\n      case \"bigint\":\n        str[index2] = `[\"${TYPE_BIGINT}\",\"${input2}\"]`;\n        break;\n      case \"symbol\": {\n        const keyFor = Symbol.keyFor(input2);\n        if (!keyFor) {\n          error = new Error(\n            \"Cannot encode symbol unless created with Symbol.for()\"\n          );\n        } else {\n          str[index2] = `[\"${TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n        }\n        break;\n      }\n      case \"object\": {\n        if (!input2) {\n          str[index2] = `${NULL}`;\n          break;\n        }\n        const isArray = Array.isArray(input2);\n        let pluginHandled = false;\n        if (!isArray && plugins) {\n          for (const plugin of plugins) {\n            const pluginResult = plugin(input2);\n            if (Array.isArray(pluginResult)) {\n              pluginHandled = true;\n              const [pluginIdentifier, ...rest] = pluginResult;\n              str[index2] = `[${JSON.stringify(pluginIdentifier)}`;\n              if (rest.length > 0) {\n                str[index2] += `,${rest.map((v) => flatten.call(this, v)).join(\",\")}`;\n              }\n              str[index2] += \"]\";\n              break;\n            }\n          }\n        }\n        if (!pluginHandled) {\n          let result = isArray ? \"[\" : \"{\";\n          if (isArray) {\n            for (let i = 0; i < input2.length; i++)\n              result += (i ? \",\" : \"\") + (i in input2 ? flatten.call(this, input2[i]) : HOLE);\n            str[index2] = `${result}]`;\n          } else if (input2 instanceof Date) {\n            const dateTime = input2.getTime();\n            str[index2] = `[\"${TYPE_DATE}\",${Number.isNaN(dateTime) ? JSON.stringify(\"invalid\") : dateTime}]`;\n          } else if (input2 instanceof URL) {\n            str[index2] = `[\"${TYPE_URL}\",${JSON.stringify(input2.href)}]`;\n          } else if (input2 instanceof RegExp) {\n            str[index2] = `[\"${TYPE_REGEXP}\",${JSON.stringify(\n              input2.source\n            )},${JSON.stringify(input2.flags)}]`;\n          } else if (input2 instanceof Set) {\n            if (input2.size > 0) {\n              str[index2] = `[\"${TYPE_SET}\",${[...input2].map((val) => flatten.call(this, val)).join(\",\")}]`;\n            } else {\n              str[index2] = `[\"${TYPE_SET}\"]`;\n            }\n          } else if (input2 instanceof Map) {\n            if (input2.size > 0) {\n              str[index2] = `[\"${TYPE_MAP}\",${[...input2].flatMap(([k, v]) => [\n                flatten.call(this, k),\n                flatten.call(this, v)\n              ]).join(\",\")}]`;\n            } else {\n              str[index2] = `[\"${TYPE_MAP}\"]`;\n            }\n          } else if (input2 instanceof Promise) {\n            str[index2] = `[\"${TYPE_PROMISE}\",${index2}]`;\n            deferred[index2] = input2;\n          } else if (input2 instanceof Error) {\n            str[index2] = `[\"${TYPE_ERROR}\",${JSON.stringify(input2.message)}`;\n            if (input2.name !== \"Error\") {\n              str[index2] += `,${JSON.stringify(input2.name)}`;\n            }\n            str[index2] += \"]\";\n          } else if (Object.getPrototypeOf(input2) === null) {\n            str[index2] = `[\"${TYPE_NULL_OBJECT}\",{${partsForObj(input2)}}]`;\n          } else if (isPlainObject(input2)) {\n            str[index2] = `{${partsForObj(input2)}}`;\n          } else {\n            error = new Error(\"Cannot encode object with prototype\");\n          }\n        }\n        break;\n      }\n      default: {\n        const isArray = Array.isArray(input2);\n        let pluginHandled = false;\n        if (!isArray && plugins) {\n          for (const plugin of plugins) {\n            const pluginResult = plugin(input2);\n            if (Array.isArray(pluginResult)) {\n              pluginHandled = true;\n              const [pluginIdentifier, ...rest] = pluginResult;\n              str[index2] = `[${JSON.stringify(pluginIdentifier)}`;\n              if (rest.length > 0) {\n                str[index2] += `,${rest.map((v) => flatten.call(this, v)).join(\",\")}`;\n              }\n              str[index2] += \"]\";\n              break;\n            }\n          }\n        }\n        if (!pluginHandled) {\n          error = new Error(\"Cannot encode function or unexpected type\");\n        }\n      }\n    }\n    if (error) {\n      let pluginHandled = false;\n      if (postPlugins) {\n        for (const plugin of postPlugins) {\n          const pluginResult = plugin(input2);\n          if (Array.isArray(pluginResult)) {\n            pluginHandled = true;\n            const [pluginIdentifier, ...rest] = pluginResult;\n            str[index2] = `[${JSON.stringify(pluginIdentifier)}`;\n            if (rest.length > 0) {\n              str[index2] += `,${rest.map((v) => flatten.call(this, v)).join(\",\")}`;\n            }\n            str[index2] += \"]\";\n            break;\n          }\n        }\n      }\n      if (!pluginHandled) {\n        throw error;\n      }\n    }\n  }\n}\nvar objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join(\"\\0\");\nfunction isPlainObject(thing) {\n  const proto = Object.getPrototypeOf(thing);\n  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames;\n}\n\n// vendor/turbo-stream-v2/unflatten.ts\nvar globalObj = typeof window !== \"undefined\" ? window : typeof globalThis !== \"undefined\" ? globalThis : void 0;\nfunction unflatten(parsed) {\n  const { hydrated, values } = this;\n  if (typeof parsed === \"number\") return hydrate.call(this, parsed);\n  if (!Array.isArray(parsed) || !parsed.length) throw new SyntaxError();\n  const startIndex = values.length;\n  for (const value of parsed) {\n    values.push(value);\n  }\n  hydrated.length = values.length;\n  return hydrate.call(this, startIndex);\n}\nfunction hydrate(index) {\n  const { hydrated, values, deferred, plugins } = this;\n  let result;\n  const stack = [\n    [\n      index,\n      (v) => {\n        result = v;\n      }\n    ]\n  ];\n  let postRun = [];\n  while (stack.length > 0) {\n    const [index2, set] = stack.pop();\n    switch (index2) {\n      case UNDEFINED:\n        set(void 0);\n        continue;\n      case NULL:\n        set(null);\n        continue;\n      case NAN:\n        set(NaN);\n        continue;\n      case POSITIVE_INFINITY:\n        set(Infinity);\n        continue;\n      case NEGATIVE_INFINITY:\n        set(-Infinity);\n        continue;\n      case NEGATIVE_ZERO:\n        set(-0);\n        continue;\n    }\n    if (hydrated[index2]) {\n      set(hydrated[index2]);\n      continue;\n    }\n    const value = values[index2];\n    if (!value || typeof value !== \"object\") {\n      hydrated[index2] = value;\n      set(value);\n      continue;\n    }\n    if (Array.isArray(value)) {\n      if (typeof value[0] === \"string\") {\n        const [type, b, c] = value;\n        switch (type) {\n          case TYPE_DATE:\n            set(hydrated[index2] = new Date(b));\n            continue;\n          case TYPE_URL:\n            set(hydrated[index2] = new URL(b));\n            continue;\n          case TYPE_BIGINT:\n            set(hydrated[index2] = BigInt(b));\n            continue;\n          case TYPE_REGEXP:\n            set(hydrated[index2] = new RegExp(b, c));\n            continue;\n          case TYPE_SYMBOL:\n            set(hydrated[index2] = Symbol.for(b));\n            continue;\n          case TYPE_SET:\n            const newSet = /* @__PURE__ */ new Set();\n            hydrated[index2] = newSet;\n            for (let i = value.length - 1; i > 0; i--)\n              stack.push([\n                value[i],\n                (v) => {\n                  newSet.add(v);\n                }\n              ]);\n            set(newSet);\n            continue;\n          case TYPE_MAP:\n            const map = /* @__PURE__ */ new Map();\n            hydrated[index2] = map;\n            for (let i = value.length - 2; i > 0; i -= 2) {\n              const r = [];\n              stack.push([\n                value[i + 1],\n                (v) => {\n                  r[1] = v;\n                }\n              ]);\n              stack.push([\n                value[i],\n                (k) => {\n                  r[0] = k;\n                }\n              ]);\n              postRun.push(() => {\n                map.set(r[0], r[1]);\n              });\n            }\n            set(map);\n            continue;\n          case TYPE_NULL_OBJECT:\n            const obj = /* @__PURE__ */ Object.create(null);\n            hydrated[index2] = obj;\n            for (const key of Object.keys(b).reverse()) {\n              const r = [];\n              stack.push([\n                b[key],\n                (v) => {\n                  r[1] = v;\n                }\n              ]);\n              stack.push([\n                Number(key.slice(1)),\n                (k) => {\n                  r[0] = k;\n                }\n              ]);\n              postRun.push(() => {\n                obj[r[0]] = r[1];\n              });\n            }\n            set(obj);\n            continue;\n          case TYPE_PROMISE:\n            if (hydrated[b]) {\n              set(hydrated[index2] = hydrated[b]);\n            } else {\n              const d = new Deferred2();\n              deferred[b] = d;\n              set(hydrated[index2] = d.promise);\n            }\n            continue;\n          case TYPE_ERROR:\n            const [, message, errorType] = value;\n            let error = errorType && globalObj && globalObj[errorType] ? new globalObj[errorType](message) : new Error(message);\n            hydrated[index2] = error;\n            set(error);\n            continue;\n          case TYPE_PREVIOUS_RESOLVED:\n            set(hydrated[index2] = hydrated[b]);\n            continue;\n          default:\n            if (Array.isArray(plugins)) {\n              const r = [];\n              const vals = value.slice(1);\n              for (let i = 0; i < vals.length; i++) {\n                const v = vals[i];\n                stack.push([\n                  v,\n                  (v2) => {\n                    r[i] = v2;\n                  }\n                ]);\n              }\n              postRun.push(() => {\n                for (const plugin of plugins) {\n                  const result2 = plugin(value[0], ...r);\n                  if (result2) {\n                    set(hydrated[index2] = result2.value);\n                    return;\n                  }\n                }\n                throw new SyntaxError();\n              });\n              continue;\n            }\n            throw new SyntaxError();\n        }\n      } else {\n        const array = [];\n        hydrated[index2] = array;\n        for (let i = 0; i < value.length; i++) {\n          const n = value[i];\n          if (n !== HOLE) {\n            stack.push([\n              n,\n              (v) => {\n                array[i] = v;\n              }\n            ]);\n          }\n        }\n        set(array);\n        continue;\n      }\n    } else {\n      const object = {};\n      hydrated[index2] = object;\n      for (const key of Object.keys(value).reverse()) {\n        const r = [];\n        stack.push([\n          value[key],\n          (v) => {\n            r[1] = v;\n          }\n        ]);\n        stack.push([\n          Number(key.slice(1)),\n          (k) => {\n            r[0] = k;\n          }\n        ]);\n        postRun.push(() => {\n          object[r[0]] = r[1];\n        });\n      }\n      set(object);\n      continue;\n    }\n  }\n  while (postRun.length > 0) {\n    postRun.pop()();\n  }\n  return result;\n}\n\n// vendor/turbo-stream-v2/turbo-stream.ts\nasync function decode(readable, options) {\n  const { plugins } = options ?? {};\n  const done = new Deferred2();\n  const reader = readable.pipeThrough(createLineSplittingTransform()).getReader();\n  const decoder = {\n    values: [],\n    hydrated: [],\n    deferred: {},\n    plugins\n  };\n  const decoded = await decodeInitial.call(decoder, reader);\n  let donePromise = done.promise;\n  if (decoded.done) {\n    done.resolve();\n  } else {\n    donePromise = decodeDeferred.call(decoder, reader).then(done.resolve).catch((reason) => {\n      for (const deferred of Object.values(decoder.deferred)) {\n        deferred.reject(reason);\n      }\n      done.reject(reason);\n    });\n  }\n  return {\n    done: donePromise.then(() => reader.closed),\n    value: decoded.value\n  };\n}\nasync function decodeInitial(reader) {\n  const read = await reader.read();\n  if (!read.value) {\n    throw new SyntaxError();\n  }\n  let line;\n  try {\n    line = JSON.parse(read.value);\n  } catch (reason) {\n    throw new SyntaxError();\n  }\n  return {\n    done: read.done,\n    value: unflatten.call(this, line)\n  };\n}\nasync function decodeDeferred(reader) {\n  let read = await reader.read();\n  while (!read.done) {\n    if (!read.value) continue;\n    const line = read.value;\n    switch (line[0]) {\n      case TYPE_PROMISE: {\n        const colonIndex = line.indexOf(\":\");\n        const deferredId = Number(line.slice(1, colonIndex));\n        const deferred = this.deferred[deferredId];\n        if (!deferred) {\n          throw new Error(`Deferred ID ${deferredId} not found in stream`);\n        }\n        const lineData = line.slice(colonIndex + 1);\n        let jsonLine;\n        try {\n          jsonLine = JSON.parse(lineData);\n        } catch (reason) {\n          throw new SyntaxError();\n        }\n        const value = unflatten.call(this, jsonLine);\n        deferred.resolve(value);\n        break;\n      }\n      case TYPE_ERROR: {\n        const colonIndex = line.indexOf(\":\");\n        const deferredId = Number(line.slice(1, colonIndex));\n        const deferred = this.deferred[deferredId];\n        if (!deferred) {\n          throw new Error(`Deferred ID ${deferredId} not found in stream`);\n        }\n        const lineData = line.slice(colonIndex + 1);\n        let jsonLine;\n        try {\n          jsonLine = JSON.parse(lineData);\n        } catch (reason) {\n          throw new SyntaxError();\n        }\n        const value = unflatten.call(this, jsonLine);\n        deferred.reject(value);\n        break;\n      }\n      default:\n        throw new SyntaxError();\n    }\n    read = await reader.read();\n  }\n}\nfunction encode(input, options) {\n  const { plugins, postPlugins, signal } = options ?? {};\n  const encoder = {\n    deferred: {},\n    index: 0,\n    indices: /* @__PURE__ */ new Map(),\n    stringified: [],\n    plugins,\n    postPlugins,\n    signal\n  };\n  const textEncoder = new TextEncoder();\n  let lastSentIndex = 0;\n  const readable = new ReadableStream({\n    async start(controller) {\n      const id = flatten.call(encoder, input);\n      if (Array.isArray(id)) {\n        throw new Error(\"This should never happen\");\n      }\n      if (id < 0) {\n        controller.enqueue(textEncoder.encode(`${id}\n`));\n      } else {\n        controller.enqueue(\n          textEncoder.encode(`[${encoder.stringified.join(\",\")}]\n`)\n        );\n        lastSentIndex = encoder.stringified.length - 1;\n      }\n      const seenPromises = /* @__PURE__ */ new WeakSet();\n      if (Object.keys(encoder.deferred).length) {\n        let raceDone;\n        const racePromise = new Promise((resolve, reject) => {\n          raceDone = resolve;\n          if (signal) {\n            const rejectPromise = () => reject(signal.reason || new Error(\"Signal was aborted.\"));\n            if (signal.aborted) {\n              rejectPromise();\n            } else {\n              signal.addEventListener(\"abort\", (event) => {\n                rejectPromise();\n              });\n            }\n          }\n        });\n        while (Object.keys(encoder.deferred).length > 0) {\n          for (const [deferredId, deferred] of Object.entries(\n            encoder.deferred\n          )) {\n            if (seenPromises.has(deferred)) continue;\n            seenPromises.add(\n              // biome-ignore lint/suspicious/noAssignInExpressions: <explanation>\n              encoder.deferred[Number(deferredId)] = Promise.race([\n                racePromise,\n                deferred\n              ]).then(\n                (resolved) => {\n                  const id2 = flatten.call(encoder, resolved);\n                  if (Array.isArray(id2)) {\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_PROMISE}${deferredId}:[[\"${TYPE_PREVIOUS_RESOLVED}\",${id2[0]}]]\n`\n                      )\n                    );\n                    encoder.index++;\n                    lastSentIndex++;\n                  } else if (id2 < 0) {\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_PROMISE}${deferredId}:${id2}\n`\n                      )\n                    );\n                  } else {\n                    const values = encoder.stringified.slice(lastSentIndex + 1).join(\",\");\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_PROMISE}${deferredId}:[${values}]\n`\n                      )\n                    );\n                    lastSentIndex = encoder.stringified.length - 1;\n                  }\n                },\n                (reason) => {\n                  if (!reason || typeof reason !== \"object\" || !(reason instanceof Error)) {\n                    reason = new Error(\"An unknown error occurred\");\n                  }\n                  const id2 = flatten.call(encoder, reason);\n                  if (Array.isArray(id2)) {\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_ERROR}${deferredId}:[[\"${TYPE_PREVIOUS_RESOLVED}\",${id2[0]}]]\n`\n                      )\n                    );\n                    encoder.index++;\n                    lastSentIndex++;\n                  } else if (id2 < 0) {\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_ERROR}${deferredId}:${id2}\n`\n                      )\n                    );\n                  } else {\n                    const values = encoder.stringified.slice(lastSentIndex + 1).join(\",\");\n                    controller.enqueue(\n                      textEncoder.encode(\n                        `${TYPE_ERROR}${deferredId}:[${values}]\n`\n                      )\n                    );\n                    lastSentIndex = encoder.stringified.length - 1;\n                  }\n                }\n              ).finally(() => {\n                delete encoder.deferred[Number(deferredId)];\n              })\n            );\n          }\n          await Promise.race(Object.values(encoder.deferred));\n        }\n        raceDone();\n      }\n      await Promise.all(Object.values(encoder.deferred));\n      controller.close();\n    }\n  });\n  return readable;\n}\n\n// lib/dom/ssr/data.ts\nasync function createRequestInit(request) {\n  let init = { signal: request.signal };\n  if (request.method !== \"GET\") {\n    init.method = request.method;\n    let contentType = request.headers.get(\"Content-Type\");\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      init.headers = { \"Content-Type\": contentType };\n      init.body = JSON.stringify(await request.json());\n    } else if (contentType && /\\btext\\/plain\\b/.test(contentType)) {\n      init.headers = { \"Content-Type\": contentType };\n      init.body = await request.text();\n    } else if (contentType && /\\bapplication\\/x-www-form-urlencoded\\b/.test(contentType)) {\n      init.body = new URLSearchParams(await request.text());\n    } else {\n      init.body = await request.formData();\n    }\n  }\n  return init;\n}\n\n// lib/dom/ssr/markup.ts\nvar ESCAPE_LOOKUP = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nvar ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction escapeHtml(html) {\n  return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);\n}\nfunction createHtml(html) {\n  return { __html: html };\n}\n\n// lib/dom/ssr/invariant.ts\nfunction invariant2(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n// lib/dom/ssr/single-fetch.tsx\nvar SingleFetchRedirectSymbol = Symbol(\"SingleFetchRedirect\");\nvar SingleFetchNoResultError = class extends Error {\n};\nvar SINGLE_FETCH_REDIRECT_STATUS = 202;\nvar NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205]);\nfunction StreamTransfer({\n  context,\n  identifier,\n  reader,\n  textDecoder,\n  nonce\n}) {\n  if (!context.renderMeta || !context.renderMeta.didRenderScripts) {\n    return null;\n  }\n  if (!context.renderMeta.streamCache) {\n    context.renderMeta.streamCache = {};\n  }\n  let { streamCache } = context.renderMeta;\n  let promise = streamCache[identifier];\n  if (!promise) {\n    promise = streamCache[identifier] = reader.read().then((result) => {\n      streamCache[identifier].result = {\n        done: result.done,\n        value: textDecoder.decode(result.value, { stream: true })\n      };\n    }).catch((e) => {\n      streamCache[identifier].error = e;\n    });\n  }\n  if (promise.error) {\n    throw promise.error;\n  }\n  if (promise.result === void 0) {\n    throw promise;\n  }\n  let { done, value } = promise.result;\n  let scriptTag = value ? /* @__PURE__ */ React4.createElement(\n    \"script\",\n    {\n      nonce,\n      dangerouslySetInnerHTML: {\n        __html: `window.__reactRouterContext.streamController.enqueue(${escapeHtml(\n          JSON.stringify(value)\n        )});`\n      }\n    }\n  ) : null;\n  if (done) {\n    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, scriptTag, /* @__PURE__ */ React4.createElement(\n      \"script\",\n      {\n        nonce,\n        dangerouslySetInnerHTML: {\n          __html: `window.__reactRouterContext.streamController.close();`\n        }\n      }\n    ));\n  } else {\n    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, scriptTag, /* @__PURE__ */ React4.createElement(React4.Suspense, null, /* @__PURE__ */ React4.createElement(\n      StreamTransfer,\n      {\n        context,\n        identifier: identifier + 1,\n        reader,\n        textDecoder,\n        nonce\n      }\n    )));\n  }\n}\nfunction getTurboStreamSingleFetchDataStrategy(getRouter, manifest, routeModules, ssr, basename) {\n  let dataStrategy = getSingleFetchDataStrategyImpl(\n    getRouter,\n    (match) => {\n      let manifestRoute = manifest.routes[match.route.id];\n      invariant2(manifestRoute, \"Route not found in manifest\");\n      let routeModule = routeModules[match.route.id];\n      return {\n        hasLoader: manifestRoute.hasLoader,\n        hasClientLoader: manifestRoute.hasClientLoader,\n        hasShouldRevalidate: Boolean(routeModule?.shouldRevalidate)\n      };\n    },\n    fetchAndDecodeViaTurboStream,\n    ssr,\n    basename\n  );\n  return async (args) => args.unstable_runClientMiddleware(dataStrategy);\n}\nfunction getSingleFetchDataStrategyImpl(getRouter, getRouteInfo, fetchAndDecode, ssr, basename, shouldAllowOptOut = () => true) {\n  return async (args) => {\n    let { request, matches, fetcherKey } = args;\n    let router = getRouter();\n    if (request.method !== \"GET\") {\n      return singleFetchActionStrategy(args, fetchAndDecode, basename);\n    }\n    let foundRevalidatingServerLoader = matches.some((m) => {\n      let { hasLoader, hasClientLoader } = getRouteInfo(m);\n      return m.unstable_shouldCallHandler() && hasLoader && !hasClientLoader;\n    });\n    if (!ssr && !foundRevalidatingServerLoader) {\n      return nonSsrStrategy(args, getRouteInfo, fetchAndDecode, basename);\n    }\n    if (fetcherKey) {\n      return singleFetchLoaderFetcherStrategy(args, fetchAndDecode, basename);\n    }\n    return singleFetchLoaderNavigationStrategy(\n      args,\n      router,\n      getRouteInfo,\n      fetchAndDecode,\n      ssr,\n      basename,\n      shouldAllowOptOut\n    );\n  };\n}\nasync function singleFetchActionStrategy(args, fetchAndDecode, basename) {\n  let actionMatch = args.matches.find((m) => m.unstable_shouldCallHandler());\n  invariant2(actionMatch, \"No action match found\");\n  let actionStatus = void 0;\n  let result = await actionMatch.resolve(async (handler) => {\n    let result2 = await handler(async () => {\n      let { data: data2, status } = await fetchAndDecode(args, basename, [\n        actionMatch.route.id\n      ]);\n      actionStatus = status;\n      return unwrapSingleFetchResult(data2, actionMatch.route.id);\n    });\n    return result2;\n  });\n  if (isResponse(result.result) || isRouteErrorResponse(result.result) || isDataWithResponseInit(result.result)) {\n    return { [actionMatch.route.id]: result };\n  }\n  return {\n    [actionMatch.route.id]: {\n      type: result.type,\n      result: data(result.result, actionStatus)\n    }\n  };\n}\nasync function nonSsrStrategy(args, getRouteInfo, fetchAndDecode, basename) {\n  let matchesToLoad = args.matches.filter(\n    (m) => m.unstable_shouldCallHandler()\n  );\n  let results = {};\n  await Promise.all(\n    matchesToLoad.map(\n      (m) => m.resolve(async (handler) => {\n        try {\n          let { hasClientLoader } = getRouteInfo(m);\n          let routeId = m.route.id;\n          let result = hasClientLoader ? await handler(async () => {\n            let { data: data2 } = await fetchAndDecode(args, basename, [routeId]);\n            return unwrapSingleFetchResult(data2, routeId);\n          }) : await handler();\n          results[m.route.id] = { type: \"data\", result };\n        } catch (e) {\n          results[m.route.id] = { type: \"error\", result: e };\n        }\n      })\n    )\n  );\n  return results;\n}\nasync function singleFetchLoaderNavigationStrategy(args, router, getRouteInfo, fetchAndDecode, ssr, basename, shouldAllowOptOut = () => true) {\n  let routesParams = /* @__PURE__ */ new Set();\n  let foundOptOutRoute = false;\n  let routeDfds = args.matches.map(() => createDeferred2());\n  let singleFetchDfd = createDeferred2();\n  let results = {};\n  let resolvePromise = Promise.all(\n    args.matches.map(\n      async (m, i) => m.resolve(async (handler) => {\n        routeDfds[i].resolve();\n        let routeId = m.route.id;\n        let { hasLoader, hasClientLoader, hasShouldRevalidate } = getRouteInfo(m);\n        let defaultShouldRevalidate = !m.unstable_shouldRevalidateArgs || m.unstable_shouldRevalidateArgs.actionStatus == null || m.unstable_shouldRevalidateArgs.actionStatus < 400;\n        let shouldCall = m.unstable_shouldCallHandler(defaultShouldRevalidate);\n        if (!shouldCall) {\n          foundOptOutRoute || (foundOptOutRoute = m.unstable_shouldRevalidateArgs != null && // This is a revalidation,\n          hasLoader && // for a route with a server loader,\n          hasShouldRevalidate === true);\n          return;\n        }\n        if (shouldAllowOptOut(m) && hasClientLoader) {\n          if (hasLoader) {\n            foundOptOutRoute = true;\n          }\n          try {\n            let result = await handler(async () => {\n              let { data: data2 } = await fetchAndDecode(args, basename, [routeId]);\n              return unwrapSingleFetchResult(data2, routeId);\n            });\n            results[routeId] = { type: \"data\", result };\n          } catch (e) {\n            results[routeId] = { type: \"error\", result: e };\n          }\n          return;\n        }\n        if (hasLoader) {\n          routesParams.add(routeId);\n        }\n        try {\n          let result = await handler(async () => {\n            let data2 = await singleFetchDfd.promise;\n            return unwrapSingleFetchResult(data2, routeId);\n          });\n          results[routeId] = { type: \"data\", result };\n        } catch (e) {\n          results[routeId] = { type: \"error\", result: e };\n        }\n      })\n    )\n  );\n  await Promise.all(routeDfds.map((d) => d.promise));\n  let isInitialLoad = !router.state.initialized && router.state.navigation.state === \"idle\";\n  if ((isInitialLoad || routesParams.size === 0) && !window.__reactRouterHdrActive) {\n    singleFetchDfd.resolve({ routes: {} });\n  } else {\n    let targetRoutes = ssr && foundOptOutRoute && routesParams.size > 0 ? [...routesParams.keys()] : void 0;\n    try {\n      let data2 = await fetchAndDecode(args, basename, targetRoutes);\n      singleFetchDfd.resolve(data2.data);\n    } catch (e) {\n      singleFetchDfd.reject(e);\n    }\n  }\n  await resolvePromise;\n  await bubbleMiddlewareErrors(\n    singleFetchDfd.promise,\n    args.matches,\n    routesParams,\n    results\n  );\n  return results;\n}\nasync function bubbleMiddlewareErrors(singleFetchPromise, matches, routesParams, results) {\n  try {\n    let middlewareError;\n    let fetchedData = await singleFetchPromise;\n    if (\"routes\" in fetchedData) {\n      for (let match of matches) {\n        if (match.route.id in fetchedData.routes) {\n          let routeResult = fetchedData.routes[match.route.id];\n          if (\"error\" in routeResult) {\n            middlewareError = routeResult.error;\n            if (results[match.route.id]?.result == null) {\n              results[match.route.id] = {\n                type: \"error\",\n                result: middlewareError\n              };\n            }\n            break;\n          }\n        }\n      }\n    }\n    if (middlewareError !== void 0) {\n      Array.from(routesParams.values()).forEach((routeId) => {\n        if (results[routeId].result instanceof SingleFetchNoResultError) {\n          results[routeId].result = middlewareError;\n        }\n      });\n    }\n  } catch (e) {\n  }\n}\nasync function singleFetchLoaderFetcherStrategy(args, fetchAndDecode, basename) {\n  let fetcherMatch = args.matches.find((m) => m.unstable_shouldCallHandler());\n  invariant2(fetcherMatch, \"No fetcher match found\");\n  let routeId = fetcherMatch.route.id;\n  let result = await fetcherMatch.resolve(\n    async (handler) => handler(async () => {\n      let { data: data2 } = await fetchAndDecode(args, basename, [routeId]);\n      return unwrapSingleFetchResult(data2, routeId);\n    })\n  );\n  return { [fetcherMatch.route.id]: result };\n}\nfunction stripIndexParam(url) {\n  let indexValues = url.searchParams.getAll(\"index\");\n  url.searchParams.delete(\"index\");\n  let indexValuesToKeep = [];\n  for (let indexValue of indexValues) {\n    if (indexValue) {\n      indexValuesToKeep.push(indexValue);\n    }\n  }\n  for (let toKeep of indexValuesToKeep) {\n    url.searchParams.append(\"index\", toKeep);\n  }\n  return url;\n}\nfunction singleFetchUrl(reqUrl, basename, extension) {\n  let url = typeof reqUrl === \"string\" ? new URL(\n    reqUrl,\n    // This can be called during the SSR flow via PrefetchPageLinksImpl so\n    // don't assume window is available\n    typeof window === \"undefined\" ? \"server://singlefetch/\" : window.location.origin\n  ) : reqUrl;\n  if (url.pathname === \"/\") {\n    url.pathname = `_root.${extension}`;\n  } else if (basename && stripBasename(url.pathname, basename) === \"/\") {\n    url.pathname = `${basename.replace(/\\/$/, \"\")}/_root.${extension}`;\n  } else {\n    url.pathname = `${url.pathname.replace(/\\/$/, \"\")}.${extension}`;\n  }\n  return url;\n}\nasync function fetchAndDecodeViaTurboStream(args, basename, targetRoutes) {\n  let { request } = args;\n  let url = singleFetchUrl(request.url, basename, \"data\");\n  if (request.method === \"GET\") {\n    url = stripIndexParam(url);\n    if (targetRoutes) {\n      url.searchParams.set(\"_routes\", targetRoutes.join(\",\"));\n    }\n  }\n  let res = await fetch(url, await createRequestInit(request));\n  if (res.status === 404 && !res.headers.has(\"X-Remix-Response\")) {\n    throw new ErrorResponseImpl(404, \"Not Found\", true);\n  }\n  if (res.status === 204 && res.headers.has(\"X-Remix-Redirect\")) {\n    return {\n      status: SINGLE_FETCH_REDIRECT_STATUS,\n      data: {\n        redirect: {\n          redirect: res.headers.get(\"X-Remix-Redirect\"),\n          status: Number(res.headers.get(\"X-Remix-Status\") || \"302\"),\n          revalidate: res.headers.get(\"X-Remix-Revalidate\") === \"true\",\n          reload: res.headers.get(\"X-Remix-Reload-Document\") === \"true\",\n          replace: res.headers.get(\"X-Remix-Replace\") === \"true\"\n        }\n      }\n    };\n  }\n  if (NO_BODY_STATUS_CODES.has(res.status)) {\n    let routes = {};\n    if (targetRoutes && request.method !== \"GET\") {\n      routes[targetRoutes[0]] = { data: void 0 };\n    }\n    return {\n      status: res.status,\n      data: { routes }\n    };\n  }\n  invariant2(res.body, \"No response body to decode\");\n  try {\n    let decoded = await decodeViaTurboStream(res.body, window);\n    let data2;\n    if (request.method === \"GET\") {\n      let typed = decoded.value;\n      if (SingleFetchRedirectSymbol in typed) {\n        data2 = { redirect: typed[SingleFetchRedirectSymbol] };\n      } else {\n        data2 = { routes: typed };\n      }\n    } else {\n      let typed = decoded.value;\n      let routeId = targetRoutes?.[0];\n      invariant2(routeId, \"No routeId found for single fetch call decoding\");\n      if (\"redirect\" in typed) {\n        data2 = { redirect: typed };\n      } else {\n        data2 = { routes: { [routeId]: typed } };\n      }\n    }\n    return { status: res.status, data: data2 };\n  } catch (e) {\n    throw new Error(\"Unable to decode turbo-stream response\");\n  }\n}\nfunction decodeViaTurboStream(body, global) {\n  return decode(body, {\n    plugins: [\n      (type, ...rest) => {\n        if (type === \"SanitizedError\") {\n          let [name, message, stack] = rest;\n          let Constructor = Error;\n          if (name && name in global && typeof global[name] === \"function\") {\n            Constructor = global[name];\n          }\n          let error = new Constructor(message);\n          error.stack = stack;\n          return { value: error };\n        }\n        if (type === \"ErrorResponse\") {\n          let [data2, status, statusText] = rest;\n          return {\n            value: new ErrorResponseImpl(status, statusText, data2)\n          };\n        }\n        if (type === \"SingleFetchRedirect\") {\n          return { value: { [SingleFetchRedirectSymbol]: rest[0] } };\n        }\n        if (type === \"SingleFetchClassInstance\") {\n          return { value: rest[0] };\n        }\n        if (type === \"SingleFetchFallback\") {\n          return { value: void 0 };\n        }\n      }\n    ]\n  });\n}\nfunction unwrapSingleFetchResult(result, routeId) {\n  if (\"redirect\" in result) {\n    let {\n      redirect: location,\n      revalidate,\n      reload,\n      replace: replace2,\n      status\n    } = result.redirect;\n    throw redirect(location, {\n      status,\n      headers: {\n        // Three R's of redirecting (lol Veep)\n        ...revalidate ? { \"X-Remix-Revalidate\": \"yes\" } : null,\n        ...reload ? { \"X-Remix-Reload-Document\": \"yes\" } : null,\n        ...replace2 ? { \"X-Remix-Replace\": \"yes\" } : null\n      }\n    });\n  }\n  let routeResult = result.routes[routeId];\n  if (routeResult == null) {\n    throw new SingleFetchNoResultError(\n      `No result found for routeId \"${routeId}\"`\n    );\n  } else if (\"error\" in routeResult) {\n    throw routeResult.error;\n  } else if (\"data\" in routeResult) {\n    return routeResult.data;\n  } else {\n    throw new Error(`Invalid response found for routeId \"${routeId}\"`);\n  }\n}\nfunction createDeferred2() {\n  let resolve;\n  let reject;\n  let promise = new Promise((res, rej) => {\n    resolve = async (val) => {\n      res(val);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n    reject = async (error) => {\n      rej(error);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n  });\n  return {\n    promise,\n    //@ts-ignore\n    resolve,\n    //@ts-ignore\n    reject\n  };\n}\n\n// lib/dom/ssr/errorBoundaries.tsx\nimport * as React9 from \"react\";\n\n// lib/dom/ssr/components.tsx\nimport * as React8 from \"react\";\n\n// lib/dom/ssr/routeModules.ts\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import(\n      /* @vite-ignore */\n      /* webpackIgnore: true */\n      route.module\n    );\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    console.error(\n      `Error loading route module \\`${route.module}\\`, reloading page...`\n    );\n    console.error(error);\n    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error\n    import.meta.hot) {\n      throw error;\n    }\n    window.location.reload();\n    return new Promise(() => {\n    });\n  }\n}\n\n// lib/dom/ssr/links.ts\nfunction getKeyedLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map((match) => {\n    let module = routeModules[match.route.id];\n    let route = manifest.routes[match.route.id];\n    return [\n      route && route.css ? route.css.map((href) => ({ rel: \"stylesheet\", href })) : [],\n      module?.links?.() || []\n    ];\n  }).flat(2);\n  let preloads = getModuleLinkHrefs(matches, manifest);\n  return dedupeLinkDescriptors(descriptors, preloads);\n}\nfunction getRouteCssDescriptors(route) {\n  if (!route.css) return [];\n  return route.css.map((href) => ({ rel: \"stylesheet\", href }));\n}\nasync function prefetchRouteCss(route) {\n  if (!route.css) return;\n  let descriptors = getRouteCssDescriptors(route);\n  await Promise.all(descriptors.map(prefetchStyleLink));\n}\nasync function prefetchStyleLinks(route, routeModule) {\n  if (!route.css && !routeModule.links || !isPreloadSupported()) return;\n  let descriptors = [];\n  if (route.css) {\n    descriptors.push(...getRouteCssDescriptors(route));\n  }\n  if (routeModule.links) {\n    descriptors.push(...routeModule.links());\n  }\n  if (descriptors.length === 0) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n  await Promise.all(styleLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise((resolve) => {\n    if (descriptor.media && !window.matchMedia(descriptor.media).matches || document.querySelector(\n      `link[rel=\"stylesheet\"][href=\"${descriptor.href}\"]`\n    )) {\n      return resolve();\n    }\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) {\n    return false;\n  }\n  if (object.href == null) {\n    return object.rel === \"preload\" && typeof object.imageSrcSet === \"string\" && typeof object.imageSizes === \"string\";\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getKeyedPrefetchLinks(matches, manifest, routeModules) {\n  let links = await Promise.all(\n    matches.map(async (match) => {\n      let route = manifest.routes[match.route.id];\n      if (route) {\n        let mod = await loadRouteModule(route, routeModules);\n        return mod.links ? mod.links() : [];\n      }\n      return [];\n    })\n  );\n  return dedupeLinkDescriptors(\n    links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === \"stylesheet\" || link.rel === \"preload\").map(\n      (link) => link.rel === \"stylesheet\" ? { ...link, rel: \"prefetch\", as: \"style\" } : { ...link, rel: \"prefetch\" }\n    )\n  );\n}\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      currentMatches[index].route.path?.endsWith(\"*\") && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n  if (mode === \"assets\") {\n    return nextMatches.filter(\n      (match, index) => isNew(match, index) || matchPathChanged(match, index)\n    );\n  }\n  if (mode === \"data\") {\n    return nextMatches.filter((match, index) => {\n      let manifestRoute = manifest.routes[match.route.id];\n      if (!manifestRoute || !manifestRoute.hasLoader) {\n        return false;\n      }\n      if (isNew(match, index) || matchPathChanged(match, index)) {\n        return true;\n      }\n      if (match.route.shouldRevalidate) {\n        let routeChoice = match.route.shouldRevalidate({\n          currentUrl: new URL(\n            location.pathname + location.search + location.hash,\n            window.origin\n          ),\n          currentParams: currentMatches[0]?.params || {},\n          nextUrl: new URL(page, window.origin),\n          nextParams: match.params,\n          defaultShouldRevalidate: true\n        });\n        if (typeof routeChoice === \"boolean\") {\n          return routeChoice;\n        }\n      }\n      return true;\n    });\n  }\n  return [];\n}\nfunction getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {\n  return dedupeHrefs(\n    matches.map((match) => {\n      let route = manifest.routes[match.route.id];\n      if (!route) return [];\n      let hrefs = [route.module];\n      if (route.clientActionModule) {\n        hrefs = hrefs.concat(route.clientActionModule);\n      }\n      if (route.clientLoaderModule) {\n        hrefs = hrefs.concat(route.clientLoaderModule);\n      }\n      if (includeHydrateFallback && route.hydrateFallbackModule) {\n        hrefs = hrefs.concat(route.hydrateFallbackModule);\n      }\n      if (route.imports) {\n        hrefs = hrefs.concat(route.imports);\n      }\n      return hrefs;\n    }).flat(1)\n  );\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction sortKeys(obj) {\n  let sorted = {};\n  let keys = Object.keys(obj).sort();\n  for (let key of keys) {\n    sorted[key] = obj[key];\n  }\n  return sorted;\n}\nfunction dedupeLinkDescriptors(descriptors, preloads) {\n  let set = /* @__PURE__ */ new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let key = JSON.stringify(sortKeys(descriptor));\n    if (!set.has(key)) {\n      set.add(key);\n      deduped.push({ key, link: descriptor });\n    }\n    return deduped;\n  }, []);\n}\nvar _isPreloadSupported;\nfunction isPreloadSupported() {\n  if (_isPreloadSupported !== void 0) {\n    return _isPreloadSupported;\n  }\n  let el = document.createElement(\"link\");\n  _isPreloadSupported = el.relList.supports(\"preload\");\n  el = null;\n  return _isPreloadSupported;\n}\n\n// lib/dom/ssr/fog-of-war.ts\nimport * as React7 from \"react\";\n\n// lib/dom/ssr/routes.tsx\nimport * as React6 from \"react\";\n\n// lib/dom/ssr/fallback.tsx\nimport * as React5 from \"react\";\nfunction RemixRootDefaultHydrateFallback() {\n  return /* @__PURE__ */ React5.createElement(BoundaryShell, { title: \"Loading...\", renderScripts: true }, ENABLE_DEV_WARNINGS ? /* @__PURE__ */ React5.createElement(\n    \"script\",\n    {\n      dangerouslySetInnerHTML: {\n        __html: `\n              console.log(\n                \"\\u{1F4BF} Hey developer \\u{1F44B}. You can provide a way better UX than this \" +\n                \"when your app is loading JS modules and/or running \\`clientLoader\\` \" +\n                \"functions. Check out https://reactrouter.com/start/framework/route-module#hydratefallback \" +\n                \"for more information.\"\n              );\n            `\n      }\n    }\n  ) : null);\n}\n\n// lib/dom/ssr/routes.tsx\nfunction groupRoutesByParentId(manifest) {\n  let routes = {};\n  Object.values(manifest).forEach((route) => {\n    if (route) {\n      let parentId = route.parentId || \"\";\n      if (!routes[parentId]) {\n        routes[parentId] = [];\n      }\n      routes[parentId].push(route);\n    }\n  });\n  return routes;\n}\nfunction getRouteComponents(route, routeModule, isSpaMode) {\n  let Component4 = getRouteModuleComponent(routeModule);\n  let HydrateFallback = routeModule.HydrateFallback && (!isSpaMode || route.id === \"root\") ? routeModule.HydrateFallback : route.id === \"root\" ? RemixRootDefaultHydrateFallback : void 0;\n  let ErrorBoundary = routeModule.ErrorBoundary ? routeModule.ErrorBoundary : route.id === \"root\" ? () => /* @__PURE__ */ React6.createElement(RemixRootDefaultErrorBoundary, { error: useRouteError() }) : void 0;\n  if (route.id === \"root\" && routeModule.Layout) {\n    return {\n      ...Component4 ? {\n        element: /* @__PURE__ */ React6.createElement(routeModule.Layout, null, /* @__PURE__ */ React6.createElement(Component4, null))\n      } : { Component: Component4 },\n      ...ErrorBoundary ? {\n        errorElement: /* @__PURE__ */ React6.createElement(routeModule.Layout, null, /* @__PURE__ */ React6.createElement(ErrorBoundary, null))\n      } : { ErrorBoundary },\n      ...HydrateFallback ? {\n        hydrateFallbackElement: /* @__PURE__ */ React6.createElement(routeModule.Layout, null, /* @__PURE__ */ React6.createElement(HydrateFallback, null))\n      } : { HydrateFallback }\n    };\n  }\n  return { Component: Component4, ErrorBoundary, HydrateFallback };\n}\nfunction createServerRoutes(manifest, routeModules, future, isSpaMode, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest), spaModeLazyPromise = Promise.resolve({ Component: () => null })) {\n  return (routesByParentId[parentId] || []).map((route) => {\n    let routeModule = routeModules[route.id];\n    invariant2(\n      routeModule,\n      \"No `routeModule` available to create server routes\"\n    );\n    let dataRoute = {\n      ...getRouteComponents(route, routeModule, isSpaMode),\n      caseSensitive: route.caseSensitive,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      handle: routeModule.handle,\n      // For SPA Mode, all routes are lazy except root.  However we tell the\n      // router root is also lazy here too since we don't need a full\n      // implementation - we just need a `lazy` prop to tell the RR rendering\n      // where to stop which is always at the root route in SPA mode\n      lazy: isSpaMode ? () => spaModeLazyPromise : void 0,\n      // For partial hydration rendering, we need to indicate when the route\n      // has a loader/clientLoader, but it won't ever be called during the static\n      // render, so just give it a no-op function so we can render down to the\n      // proper fallback\n      loader: route.hasLoader || route.hasClientLoader ? () => null : void 0\n      // We don't need middleware/action/shouldRevalidate on these routes since\n      // they're for a static render\n    };\n    let children = createServerRoutes(\n      manifest,\n      routeModules,\n      future,\n      isSpaMode,\n      route.id,\n      routesByParentId,\n      spaModeLazyPromise\n    );\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, manifest, routeModulesCache, initialState, ssr, isSpaMode) {\n  return createClientRoutes(\n    manifest,\n    routeModulesCache,\n    initialState,\n    ssr,\n    isSpaMode,\n    \"\",\n    groupRoutesByParentId(manifest),\n    needsRevalidation\n  );\n}\nfunction preventInvalidServerHandlerCall(type, route) {\n  if (type === \"loader\" && !route.hasLoader || type === \"action\" && !route.hasAction) {\n    let fn = type === \"action\" ? \"serverAction()\" : \"serverLoader()\";\n    let msg = `You are trying to call ${fn} on a route that does not have a server ${type} (routeId: \"${route.id}\")`;\n    console.error(msg);\n    throw new ErrorResponseImpl(400, \"Bad Request\", new Error(msg), true);\n  }\n}\nfunction noActionDefinedError(type, routeId) {\n  let article = type === \"clientAction\" ? \"a\" : \"an\";\n  let msg = `Route \"${routeId}\" does not have ${article} ${type}, but you are trying to submit to it. To fix this, please add ${article} \\`${type}\\` function to the route`;\n  console.error(msg);\n  throw new ErrorResponseImpl(405, \"Method Not Allowed\", new Error(msg), true);\n}\nfunction createClientRoutes(manifest, routeModulesCache, initialState, ssr, isSpaMode, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {\n  return (routesByParentId[parentId] || []).map((route) => {\n    let routeModule = routeModulesCache[route.id];\n    function fetchServerHandler(singleFetch) {\n      invariant2(\n        typeof singleFetch === \"function\",\n        \"No single fetch function available for route handler\"\n      );\n      return singleFetch();\n    }\n    function fetchServerLoader(singleFetch) {\n      if (!route.hasLoader) return Promise.resolve(null);\n      return fetchServerHandler(singleFetch);\n    }\n    function fetchServerAction(singleFetch) {\n      if (!route.hasAction) {\n        throw noActionDefinedError(\"action\", route.id);\n      }\n      return fetchServerHandler(singleFetch);\n    }\n    function prefetchModule(modulePath) {\n      import(\n        /* @vite-ignore */\n        /* webpackIgnore: true */\n        modulePath\n      );\n    }\n    function prefetchRouteModuleChunks(route2) {\n      if (route2.clientActionModule) {\n        prefetchModule(route2.clientActionModule);\n      }\n      if (route2.clientLoaderModule) {\n        prefetchModule(route2.clientLoaderModule);\n      }\n    }\n    async function prefetchStylesAndCallHandler(handler) {\n      let cachedModule = routeModulesCache[route.id];\n      let linkPrefetchPromise = cachedModule ? prefetchStyleLinks(route, cachedModule) : Promise.resolve();\n      try {\n        return handler();\n      } finally {\n        await linkPrefetchPromise;\n      }\n    }\n    let dataRoute = {\n      id: route.id,\n      index: route.index,\n      path: route.path\n    };\n    if (routeModule) {\n      Object.assign(dataRoute, {\n        ...dataRoute,\n        ...getRouteComponents(route, routeModule, isSpaMode),\n        unstable_middleware: routeModule.unstable_clientMiddleware,\n        handle: routeModule.handle,\n        shouldRevalidate: getShouldRevalidateFunction(\n          dataRoute.path,\n          routeModule,\n          route,\n          ssr,\n          needsRevalidation\n        )\n      });\n      let hasInitialData = initialState && initialState.loaderData && route.id in initialState.loaderData;\n      let initialData = hasInitialData ? initialState?.loaderData?.[route.id] : void 0;\n      let hasInitialError = initialState && initialState.errors && route.id in initialState.errors;\n      let initialError = hasInitialError ? initialState?.errors?.[route.id] : void 0;\n      let isHydrationRequest = needsRevalidation == null && (routeModule.clientLoader?.hydrate === true || !route.hasLoader);\n      dataRoute.loader = async ({ request, params, context }, singleFetch) => {\n        try {\n          let result = await prefetchStylesAndCallHandler(async () => {\n            invariant2(\n              routeModule,\n              \"No `routeModule` available for critical-route loader\"\n            );\n            if (!routeModule.clientLoader) {\n              return fetchServerLoader(singleFetch);\n            }\n            return routeModule.clientLoader({\n              request,\n              params,\n              context,\n              async serverLoader() {\n                preventInvalidServerHandlerCall(\"loader\", route);\n                if (isHydrationRequest) {\n                  if (hasInitialData) {\n                    return initialData;\n                  }\n                  if (hasInitialError) {\n                    throw initialError;\n                  }\n                }\n                return fetchServerLoader(singleFetch);\n              }\n            });\n          });\n          return result;\n        } finally {\n          isHydrationRequest = false;\n        }\n      };\n      dataRoute.loader.hydrate = shouldHydrateRouteLoader(\n        route.id,\n        routeModule.clientLoader,\n        route.hasLoader,\n        isSpaMode\n      );\n      dataRoute.action = ({ request, params, context }, singleFetch) => {\n        return prefetchStylesAndCallHandler(async () => {\n          invariant2(\n            routeModule,\n            \"No `routeModule` available for critical-route action\"\n          );\n          if (!routeModule.clientAction) {\n            if (isSpaMode) {\n              throw noActionDefinedError(\"clientAction\", route.id);\n            }\n            return fetchServerAction(singleFetch);\n          }\n          return routeModule.clientAction({\n            request,\n            params,\n            context,\n            async serverAction() {\n              preventInvalidServerHandlerCall(\"action\", route);\n              return fetchServerAction(singleFetch);\n            }\n          });\n        });\n      };\n    } else {\n      if (!route.hasClientLoader) {\n        dataRoute.loader = (_, singleFetch) => prefetchStylesAndCallHandler(() => {\n          return fetchServerLoader(singleFetch);\n        });\n      }\n      if (!route.hasClientAction) {\n        dataRoute.action = (_, singleFetch) => prefetchStylesAndCallHandler(() => {\n          if (isSpaMode) {\n            throw noActionDefinedError(\"clientAction\", route.id);\n          }\n          return fetchServerAction(singleFetch);\n        });\n      }\n      let lazyRoutePromise;\n      async function getLazyRoute() {\n        if (lazyRoutePromise) {\n          return await lazyRoutePromise;\n        }\n        lazyRoutePromise = (async () => {\n          if (route.clientLoaderModule || route.clientActionModule) {\n            await new Promise((resolve) => setTimeout(resolve, 0));\n          }\n          let routeModulePromise = loadRouteModuleWithBlockingLinks(\n            route,\n            routeModulesCache\n          );\n          prefetchRouteModuleChunks(route);\n          return await routeModulePromise;\n        })();\n        return await lazyRoutePromise;\n      }\n      dataRoute.lazy = {\n        loader: route.hasClientLoader ? async () => {\n          let { clientLoader } = route.clientLoaderModule ? await import(\n            /* @vite-ignore */\n            /* webpackIgnore: true */\n            route.clientLoaderModule\n          ) : await getLazyRoute();\n          invariant2(clientLoader, \"No `clientLoader` export found\");\n          return (args, singleFetch) => clientLoader({\n            ...args,\n            async serverLoader() {\n              preventInvalidServerHandlerCall(\"loader\", route);\n              return fetchServerLoader(singleFetch);\n            }\n          });\n        } : void 0,\n        action: route.hasClientAction ? async () => {\n          let clientActionPromise = route.clientActionModule ? import(\n            /* @vite-ignore */\n            /* webpackIgnore: true */\n            route.clientActionModule\n          ) : getLazyRoute();\n          prefetchRouteModuleChunks(route);\n          let { clientAction } = await clientActionPromise;\n          invariant2(clientAction, \"No `clientAction` export found\");\n          return (args, singleFetch) => clientAction({\n            ...args,\n            async serverAction() {\n              preventInvalidServerHandlerCall(\"action\", route);\n              return fetchServerAction(singleFetch);\n            }\n          });\n        } : void 0,\n        unstable_middleware: route.hasClientMiddleware ? async () => {\n          let { unstable_clientMiddleware } = route.clientMiddlewareModule ? await import(\n            /* @vite-ignore */\n            /* webpackIgnore: true */\n            route.clientMiddlewareModule\n          ) : await getLazyRoute();\n          invariant2(\n            unstable_clientMiddleware,\n            \"No `unstable_clientMiddleware` export found\"\n          );\n          return unstable_clientMiddleware;\n        } : void 0,\n        shouldRevalidate: async () => {\n          let lazyRoute = await getLazyRoute();\n          return getShouldRevalidateFunction(\n            dataRoute.path,\n            lazyRoute,\n            route,\n            ssr,\n            needsRevalidation\n          );\n        },\n        handle: async () => (await getLazyRoute()).handle,\n        // No need to wrap these in layout since the root route is never\n        // loaded via route.lazy()\n        Component: async () => (await getLazyRoute()).Component,\n        ErrorBoundary: route.hasErrorBoundary ? async () => (await getLazyRoute()).ErrorBoundary : void 0\n      };\n    }\n    let children = createClientRoutes(\n      manifest,\n      routeModulesCache,\n      initialState,\n      ssr,\n      isSpaMode,\n      route.id,\n      routesByParentId,\n      needsRevalidation\n    );\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction getShouldRevalidateFunction(path, route, manifestRoute, ssr, needsRevalidation) {\n  if (needsRevalidation) {\n    return wrapShouldRevalidateForHdr(\n      manifestRoute.id,\n      route.shouldRevalidate,\n      needsRevalidation\n    );\n  }\n  if (!ssr && manifestRoute.hasLoader && !manifestRoute.hasClientLoader) {\n    let myParams = path ? compilePath(path)[1].map((p) => p.paramName) : [];\n    const didParamsChange = (opts) => myParams.some((p) => opts.currentParams[p] !== opts.nextParams[p]);\n    if (route.shouldRevalidate) {\n      let fn = route.shouldRevalidate;\n      return (opts) => fn({\n        ...opts,\n        defaultShouldRevalidate: didParamsChange(opts)\n      });\n    } else {\n      return (opts) => didParamsChange(opts);\n    }\n  }\n  if (ssr && route.shouldRevalidate) {\n    let fn = route.shouldRevalidate;\n    return (opts) => fn({ ...opts, defaultShouldRevalidate: true });\n  }\n  return route.shouldRevalidate;\n}\nfunction wrapShouldRevalidateForHdr(routeId, routeShouldRevalidate, needsRevalidation) {\n  let handledRevalidation = false;\n  return (arg) => {\n    if (!handledRevalidation) {\n      handledRevalidation = true;\n      return needsRevalidation.has(routeId);\n    }\n    return routeShouldRevalidate ? routeShouldRevalidate(arg) : arg.defaultShouldRevalidate;\n  };\n}\nasync function loadRouteModuleWithBlockingLinks(route, routeModules) {\n  let routeModulePromise = loadRouteModule(route, routeModules);\n  let prefetchRouteCssPromise = prefetchRouteCss(route);\n  let routeModule = await routeModulePromise;\n  await Promise.all([\n    prefetchRouteCssPromise,\n    prefetchStyleLinks(route, routeModule)\n  ]);\n  return {\n    Component: getRouteModuleComponent(routeModule),\n    ErrorBoundary: routeModule.ErrorBoundary,\n    unstable_clientMiddleware: routeModule.unstable_clientMiddleware,\n    clientAction: routeModule.clientAction,\n    clientLoader: routeModule.clientLoader,\n    handle: routeModule.handle,\n    links: routeModule.links,\n    meta: routeModule.meta,\n    shouldRevalidate: routeModule.shouldRevalidate\n  };\n}\nfunction getRouteModuleComponent(routeModule) {\n  if (routeModule.default == null) return void 0;\n  let isEmptyObject = typeof routeModule.default === \"object\" && Object.keys(routeModule.default).length === 0;\n  if (!isEmptyObject) {\n    return routeModule.default;\n  }\n}\nfunction shouldHydrateRouteLoader(routeId, clientLoader, hasLoader, isSpaMode) {\n  return isSpaMode && routeId !== \"root\" || clientLoader != null && (clientLoader.hydrate === true || hasLoader !== true);\n}\n\n// lib/dom/ssr/fog-of-war.ts\nvar nextPaths = /* @__PURE__ */ new Set();\nvar discoveredPathsMaxSize = 1e3;\nvar discoveredPaths = /* @__PURE__ */ new Set();\nvar URL_LIMIT = 7680;\nfunction isFogOfWarEnabled(routeDiscovery, ssr) {\n  return routeDiscovery.mode === \"lazy\" && ssr === true;\n}\nfunction getPartialManifest({ sri, ...manifest }, router) {\n  let routeIds = new Set(router.state.matches.map((m) => m.route.id));\n  let segments = router.state.location.pathname.split(\"/\").filter(Boolean);\n  let paths = [\"/\"];\n  segments.pop();\n  while (segments.length > 0) {\n    paths.push(`/${segments.join(\"/\")}`);\n    segments.pop();\n  }\n  paths.forEach((path) => {\n    let matches = matchRoutes(router.routes, path, router.basename);\n    if (matches) {\n      matches.forEach((m) => routeIds.add(m.route.id));\n    }\n  });\n  let initialRoutes = [...routeIds].reduce(\n    (acc, id) => Object.assign(acc, { [id]: manifest.routes[id] }),\n    {}\n  );\n  return {\n    ...manifest,\n    routes: initialRoutes,\n    sri: sri ? true : void 0\n  };\n}\nfunction getPatchRoutesOnNavigationFunction(manifest, routeModules, ssr, routeDiscovery, isSpaMode, basename) {\n  if (!isFogOfWarEnabled(routeDiscovery, ssr)) {\n    return void 0;\n  }\n  return async ({ path, patch, signal, fetcherKey }) => {\n    if (discoveredPaths.has(path)) {\n      return;\n    }\n    await fetchAndApplyManifestPatches(\n      [path],\n      fetcherKey ? window.location.href : path,\n      manifest,\n      routeModules,\n      ssr,\n      isSpaMode,\n      basename,\n      routeDiscovery.manifestPath,\n      patch,\n      signal\n    );\n  };\n}\nfunction useFogOFWarDiscovery(router, manifest, routeModules, ssr, routeDiscovery, isSpaMode) {\n  React7.useEffect(() => {\n    if (!isFogOfWarEnabled(routeDiscovery, ssr) || // @ts-expect-error - TS doesn't know about this yet\n    window.navigator?.connection?.saveData === true) {\n      return;\n    }\n    function registerElement(el) {\n      let path = el.tagName === \"FORM\" ? el.getAttribute(\"action\") : el.getAttribute(\"href\");\n      if (!path) {\n        return;\n      }\n      let pathname = el.tagName === \"A\" ? el.pathname : new URL(path, window.location.origin).pathname;\n      if (!discoveredPaths.has(pathname)) {\n        nextPaths.add(pathname);\n      }\n    }\n    async function fetchPatches() {\n      document.querySelectorAll(\"a[data-discover], form[data-discover]\").forEach(registerElement);\n      let lazyPaths = Array.from(nextPaths.keys()).filter((path) => {\n        if (discoveredPaths.has(path)) {\n          nextPaths.delete(path);\n          return false;\n        }\n        return true;\n      });\n      if (lazyPaths.length === 0) {\n        return;\n      }\n      try {\n        await fetchAndApplyManifestPatches(\n          lazyPaths,\n          null,\n          manifest,\n          routeModules,\n          ssr,\n          isSpaMode,\n          router.basename,\n          routeDiscovery.manifestPath,\n          router.patchRoutes\n        );\n      } catch (e) {\n        console.error(\"Failed to fetch manifest patches\", e);\n      }\n    }\n    let debouncedFetchPatches = debounce(fetchPatches, 100);\n    fetchPatches();\n    let observer = new MutationObserver(() => debouncedFetchPatches());\n    observer.observe(document.documentElement, {\n      subtree: true,\n      childList: true,\n      attributes: true,\n      attributeFilter: [\"data-discover\", \"href\", \"action\"]\n    });\n    return () => observer.disconnect();\n  }, [ssr, isSpaMode, manifest, routeModules, router, routeDiscovery]);\n}\nfunction getManifestPath(_manifestPath, basename) {\n  let manifestPath = _manifestPath || \"/__manifest\";\n  if (basename == null) {\n    return manifestPath;\n  }\n  return `${basename}${manifestPath}`.replace(/\\/+/g, \"/\");\n}\nvar MANIFEST_VERSION_STORAGE_KEY = \"react-router-manifest-version\";\nasync function fetchAndApplyManifestPatches(paths, errorReloadPath, manifest, routeModules, ssr, isSpaMode, basename, manifestPath, patchRoutes, signal) {\n  const searchParams = new URLSearchParams();\n  paths.sort().forEach((path) => searchParams.append(\"p\", path));\n  searchParams.set(\"version\", manifest.version);\n  let url = new URL(\n    getManifestPath(manifestPath, basename),\n    window.location.origin\n  );\n  url.search = searchParams.toString();\n  if (url.toString().length > URL_LIMIT) {\n    nextPaths.clear();\n    return;\n  }\n  let serverPatches;\n  try {\n    let res = await fetch(url, { signal });\n    if (!res.ok) {\n      throw new Error(`${res.status} ${res.statusText}`);\n    } else if (res.status === 204 && res.headers.has(\"X-Remix-Reload-Document\")) {\n      if (!errorReloadPath) {\n        console.warn(\n          \"Detected a manifest version mismatch during eager route discovery. The next navigation/fetch to an undiscovered route will result in a new document navigation to sync up with the latest manifest.\"\n        );\n        return;\n      }\n      if (sessionStorage.getItem(MANIFEST_VERSION_STORAGE_KEY) === manifest.version) {\n        console.error(\n          \"Unable to discover routes due to manifest version mismatch.\"\n        );\n        return;\n      }\n      sessionStorage.setItem(MANIFEST_VERSION_STORAGE_KEY, manifest.version);\n      window.location.href = errorReloadPath;\n      console.warn(\"Detected manifest version mismatch, reloading...\");\n      await new Promise(() => {\n      });\n    } else if (res.status >= 400) {\n      throw new Error(await res.text());\n    }\n    sessionStorage.removeItem(MANIFEST_VERSION_STORAGE_KEY);\n    serverPatches = await res.json();\n  } catch (e) {\n    if (signal?.aborted) return;\n    throw e;\n  }\n  let knownRoutes = new Set(Object.keys(manifest.routes));\n  let patches = Object.values(serverPatches).reduce((acc, route) => {\n    if (route && !knownRoutes.has(route.id)) {\n      acc[route.id] = route;\n    }\n    return acc;\n  }, {});\n  Object.assign(manifest.routes, patches);\n  paths.forEach((p) => addToFifoQueue(p, discoveredPaths));\n  let parentIds = /* @__PURE__ */ new Set();\n  Object.values(patches).forEach((patch) => {\n    if (patch && (!patch.parentId || !patches[patch.parentId])) {\n      parentIds.add(patch.parentId);\n    }\n  });\n  parentIds.forEach(\n    (parentId) => patchRoutes(\n      parentId || null,\n      createClientRoutes(patches, routeModules, null, ssr, isSpaMode, parentId)\n    )\n  );\n}\nfunction addToFifoQueue(path, queue) {\n  if (queue.size >= discoveredPathsMaxSize) {\n    let first = queue.values().next().value;\n    queue.delete(first);\n  }\n  queue.add(path);\n}\nfunction debounce(callback, wait) {\n  let timeoutId;\n  return (...args) => {\n    window.clearTimeout(timeoutId);\n    timeoutId = window.setTimeout(() => callback(...args), wait);\n  };\n}\n\n// lib/dom/ssr/components.tsx\nfunction useDataRouterContext2() {\n  let context = React8.useContext(DataRouterContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <DataRouterContext.Provider> element\"\n  );\n  return context;\n}\nfunction useDataRouterStateContext() {\n  let context = React8.useContext(DataRouterStateContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <DataRouterStateContext.Provider> element\"\n  );\n  return context;\n}\nvar FrameworkContext = React8.createContext(void 0);\nFrameworkContext.displayName = \"FrameworkContext\";\nfunction useFrameworkContext() {\n  let context = React8.useContext(FrameworkContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <HydratedRouter> element\"\n  );\n  return context;\n}\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let frameworkContext = React8.useContext(FrameworkContext);\n  let [maybePrefetch, setMaybePrefetch] = React8.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React8.useState(false);\n  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;\n  let ref = React8.useRef(null);\n  React8.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n    if (prefetch === \"viewport\") {\n      let callback = (entries) => {\n        entries.forEach((entry) => {\n          setShouldPrefetch(entry.isIntersecting);\n        });\n      };\n      let observer = new IntersectionObserver(callback, { threshold: 0.5 });\n      if (ref.current) observer.observe(ref.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [prefetch]);\n  React8.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  let setIntent = () => {\n    setMaybePrefetch(true);\n  };\n  let cancelIntent = () => {\n    setMaybePrefetch(false);\n    setShouldPrefetch(false);\n  };\n  if (!frameworkContext) {\n    return [false, ref, {}];\n  }\n  if (prefetch !== \"intent\") {\n    return [shouldPrefetch, ref, {}];\n  }\n  return [\n    shouldPrefetch,\n    ref,\n    {\n      onFocus: composeEventHandlers(onFocus, setIntent),\n      onBlur: composeEventHandlers(onBlur, cancelIntent),\n      onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n      onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n      onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n    }\n  ];\n}\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return (event) => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\nfunction getActiveMatches(matches, errors, isSpaMode) {\n  if (isSpaMode && !isHydrated) {\n    return [matches[0]];\n  }\n  if (errors) {\n    let errorIdx = matches.findIndex((m) => errors[m.route.id] !== void 0);\n    return matches.slice(0, errorIdx + 1);\n  }\n  return matches;\n}\nvar CRITICAL_CSS_DATA_ATTRIBUTE = \"data-react-router-critical-css\";\nfunction Links({ nonce }) {\n  let { isSpaMode, manifest, routeModules, criticalCss } = useFrameworkContext();\n  let { errors, matches: routerMatches } = useDataRouterStateContext();\n  let matches = getActiveMatches(routerMatches, errors, isSpaMode);\n  let keyedLinks = React8.useMemo(\n    () => getKeyedLinksForMatches(matches, routeModules, manifest),\n    [matches, routeModules, manifest]\n  );\n  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, typeof criticalCss === \"string\" ? /* @__PURE__ */ React8.createElement(\n    \"style\",\n    {\n      ...{ [CRITICAL_CSS_DATA_ATTRIBUTE]: \"\" },\n      dangerouslySetInnerHTML: { __html: criticalCss }\n    }\n  ) : null, typeof criticalCss === \"object\" ? /* @__PURE__ */ React8.createElement(\n    \"link\",\n    {\n      ...{ [CRITICAL_CSS_DATA_ATTRIBUTE]: \"\" },\n      rel: \"stylesheet\",\n      href: criticalCss.href,\n      nonce\n    }\n  ) : null, keyedLinks.map(\n    ({ key, link }) => isPageLinkDescriptor(link) ? /* @__PURE__ */ React8.createElement(PrefetchPageLinks, { key, nonce, ...link }) : /* @__PURE__ */ React8.createElement(\"link\", { key, nonce, ...link })\n  ));\n}\nfunction PrefetchPageLinks({ page, ...linkProps }) {\n  let { router } = useDataRouterContext2();\n  let matches = React8.useMemo(\n    () => matchRoutes(router.routes, page, router.basename),\n    [router.routes, page, router.basename]\n  );\n  if (!matches) {\n    return null;\n  }\n  return /* @__PURE__ */ React8.createElement(PrefetchPageLinksImpl, { page, matches, ...linkProps });\n}\nfunction useKeyedPrefetchLinks(matches) {\n  let { manifest, routeModules } = useFrameworkContext();\n  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React8.useState([]);\n  React8.useEffect(() => {\n    let interrupted = false;\n    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(\n      (links) => {\n        if (!interrupted) {\n          setKeyedPrefetchLinks(links);\n        }\n      }\n    );\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, manifest, routeModules]);\n  return keyedPrefetchLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let { manifest, routeModules } = useFrameworkContext();\n  let { basename } = useDataRouterContext2();\n  let { loaderData, matches } = useDataRouterStateContext();\n  let newMatchesForData = React8.useMemo(\n    () => getNewMatchesForLinks(\n      page,\n      nextMatches,\n      matches,\n      manifest,\n      location,\n      \"data\"\n    ),\n    [page, nextMatches, matches, manifest, location]\n  );\n  let newMatchesForAssets = React8.useMemo(\n    () => getNewMatchesForLinks(\n      page,\n      nextMatches,\n      matches,\n      manifest,\n      location,\n      \"assets\"\n    ),\n    [page, nextMatches, matches, manifest, location]\n  );\n  let dataHrefs = React8.useMemo(() => {\n    if (page === location.pathname + location.search + location.hash) {\n      return [];\n    }\n    let routesParams = /* @__PURE__ */ new Set();\n    let foundOptOutRoute = false;\n    nextMatches.forEach((m) => {\n      let manifestRoute = manifest.routes[m.route.id];\n      if (!manifestRoute || !manifestRoute.hasLoader) {\n        return;\n      }\n      if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {\n        foundOptOutRoute = true;\n      } else if (manifestRoute.hasClientLoader) {\n        foundOptOutRoute = true;\n      } else {\n        routesParams.add(m.route.id);\n      }\n    });\n    if (routesParams.size === 0) {\n      return [];\n    }\n    let url = singleFetchUrl(page, basename, \"data\");\n    if (foundOptOutRoute && routesParams.size > 0) {\n      url.searchParams.set(\n        \"_routes\",\n        nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(\",\")\n      );\n    }\n    return [url.pathname + url.search];\n  }, [\n    basename,\n    loaderData,\n    location,\n    manifest,\n    newMatchesForData,\n    nextMatches,\n    page,\n    routeModules\n  ]);\n  let moduleHrefs = React8.useMemo(\n    () => getModuleLinkHrefs(newMatchesForAssets, manifest),\n    [newMatchesForAssets, manifest]\n  );\n  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);\n  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React8.createElement(\"link\", { key: href, rel: \"prefetch\", as: \"fetch\", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React8.createElement(\"link\", { key: href, rel: \"modulepreload\", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (\n    // these don't spread `linkProps` because they are full link descriptors\n    // already with their own props\n    /* @__PURE__ */ React8.createElement(\"link\", { key, nonce: linkProps.nonce, ...link })\n  )));\n}\nfunction Meta() {\n  let { isSpaMode, routeModules } = useFrameworkContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let _matches = getActiveMatches(routerMatches, errors, isSpaMode);\n  let error = null;\n  if (errors) {\n    error = errors[_matches[_matches.length - 1].route.id];\n  }\n  let meta = [];\n  let leafMeta = null;\n  let matches = [];\n  for (let i = 0; i < _matches.length; i++) {\n    let _match = _matches[i];\n    let routeId = _match.route.id;\n    let data2 = loaderData[routeId];\n    let params = _match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    let match = {\n      id: routeId,\n      data: data2,\n      loaderData: data2,\n      meta: [],\n      params: _match.params,\n      pathname: _match.pathname,\n      handle: _match.route.handle,\n      error\n    };\n    matches[i] = match;\n    if (routeModule?.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data: data2,\n        loaderData: data2,\n        params,\n        location,\n        matches,\n        error\n      }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta;\n    } else if (leafMeta) {\n      routeMeta = [...leafMeta];\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\n        \"The route at \" + _match.route.path + \" returns an invalid value. All route meta functions must return an array of meta objects.\\n\\nTo reference the meta function API, see https://remix.run/route/meta\"\n      );\n    }\n    match.meta = routeMeta;\n    matches[i] = match;\n    meta = [...routeMeta];\n    leafMeta = meta;\n  }\n  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, meta.flat().map((metaProps) => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"tagName\" in metaProps) {\n      let { tagName, ...rest } = metaProps;\n      if (!isValidMetaTag(tagName)) {\n        console.warn(\n          `A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`\n        );\n        return null;\n      }\n      let Comp = tagName;\n      return /* @__PURE__ */ React8.createElement(Comp, { key: JSON.stringify(rest), ...rest });\n    }\n    if (\"title\" in metaProps) {\n      return /* @__PURE__ */ React8.createElement(\"title\", { key: \"title\" }, String(metaProps.title));\n    }\n    if (\"charset\" in metaProps) {\n      metaProps.charSet ?? (metaProps.charSet = metaProps.charset);\n      delete metaProps.charset;\n    }\n    if (\"charSet\" in metaProps && metaProps.charSet != null) {\n      return typeof metaProps.charSet === \"string\" ? /* @__PURE__ */ React8.createElement(\"meta\", { key: \"charSet\", charSet: metaProps.charSet }) : null;\n    }\n    if (\"script:ld+json\" in metaProps) {\n      try {\n        let json = JSON.stringify(metaProps[\"script:ld+json\"]);\n        return /* @__PURE__ */ React8.createElement(\n          \"script\",\n          {\n            key: `script:ld+json:${json}`,\n            type: \"application/ld+json\",\n            dangerouslySetInnerHTML: { __html: json }\n          }\n        );\n      } catch (err) {\n        return null;\n      }\n    }\n    return /* @__PURE__ */ React8.createElement(\"meta\", { key: JSON.stringify(metaProps), ...metaProps });\n  }));\n}\nfunction isValidMetaTag(tagName) {\n  return typeof tagName === \"string\" && /^(meta|link)$/.test(tagName);\n}\nvar isHydrated = false;\nfunction Scripts(scriptProps) {\n  let {\n    manifest,\n    serverHandoffString,\n    isSpaMode,\n    renderMeta,\n    routeDiscovery,\n    ssr\n  } = useFrameworkContext();\n  let { router, static: isStatic, staticContext } = useDataRouterContext2();\n  let { matches: routerMatches } = useDataRouterStateContext();\n  let isRSCRouterContext = useIsRSCRouterContext();\n  let enableFogOfWar = isFogOfWarEnabled(routeDiscovery, ssr);\n  if (renderMeta) {\n    renderMeta.didRenderScripts = true;\n  }\n  let matches = getActiveMatches(routerMatches, null, isSpaMode);\n  React8.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let initialScripts = React8.useMemo(() => {\n    if (isRSCRouterContext) {\n      return null;\n    }\n    let streamScript = \"window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());\";\n    let contextScript = staticContext ? `window.__reactRouterContext = ${serverHandoffString};${streamScript}` : \" \";\n    let routeModulesScript = !isStatic ? \" \" : `${manifest.hmr?.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : \"\"}${!enableFogOfWar ? `import ${JSON.stringify(manifest.url)}` : \"\"};\n${matches.map((match, routeIndex) => {\n      let routeVarName = `route${routeIndex}`;\n      let manifestEntry = manifest.routes[match.route.id];\n      invariant2(manifestEntry, `Route ${match.route.id} not found in manifest`);\n      let {\n        clientActionModule,\n        clientLoaderModule,\n        clientMiddlewareModule,\n        hydrateFallbackModule,\n        module\n      } = manifestEntry;\n      let chunks = [\n        ...clientActionModule ? [\n          {\n            module: clientActionModule,\n            varName: `${routeVarName}_clientAction`\n          }\n        ] : [],\n        ...clientLoaderModule ? [\n          {\n            module: clientLoaderModule,\n            varName: `${routeVarName}_clientLoader`\n          }\n        ] : [],\n        ...clientMiddlewareModule ? [\n          {\n            module: clientMiddlewareModule,\n            varName: `${routeVarName}_clientMiddleware`\n          }\n        ] : [],\n        ...hydrateFallbackModule ? [\n          {\n            module: hydrateFallbackModule,\n            varName: `${routeVarName}_HydrateFallback`\n          }\n        ] : [],\n        { module, varName: `${routeVarName}_main` }\n      ];\n      if (chunks.length === 1) {\n        return `import * as ${routeVarName} from ${JSON.stringify(module)};`;\n      }\n      let chunkImportsSnippet = chunks.map((chunk) => `import * as ${chunk.varName} from \"${chunk.module}\";`).join(\"\\n\");\n      let mergedChunksSnippet = `const ${routeVarName} = {${chunks.map((chunk) => `...${chunk.varName}`).join(\",\")}};`;\n      return [chunkImportsSnippet, mergedChunksSnippet].join(\"\\n\");\n    }).join(\"\\n\")}\n  ${enableFogOfWar ? (\n      // Inline a minimal manifest with the SSR matches\n      `window.__reactRouterManifest = ${JSON.stringify(\n        getPartialManifest(manifest, router),\n        null,\n        2\n      )};`\n    ) : \"\"}\n  window.__reactRouterRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement(\n      \"script\",\n      {\n        ...scriptProps,\n        suppressHydrationWarning: true,\n        dangerouslySetInnerHTML: createHtml(contextScript),\n        type: void 0\n      }\n    ), /* @__PURE__ */ React8.createElement(\n      \"script\",\n      {\n        ...scriptProps,\n        suppressHydrationWarning: true,\n        dangerouslySetInnerHTML: createHtml(routeModulesScript),\n        type: \"module\",\n        async: true\n      }\n    ));\n  }, []);\n  let preloads = isHydrated || isRSCRouterContext ? [] : dedupe(\n    manifest.entry.imports.concat(\n      getModuleLinkHrefs(matches, manifest, {\n        includeHydrateFallback: true\n      })\n    )\n  );\n  let sri = typeof manifest.sri === \"object\" ? manifest.sri : {};\n  warnOnce(\n    !isRSCRouterContext,\n    \"The <Scripts /> element is a no-op when using RSC and can be safely removed.\"\n  );\n  return isHydrated || isRSCRouterContext ? null : /* @__PURE__ */ React8.createElement(React8.Fragment, null, typeof manifest.sri === \"object\" ? /* @__PURE__ */ React8.createElement(\n    \"script\",\n    {\n      \"rr-importmap\": \"\",\n      type: \"importmap\",\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: JSON.stringify({\n          integrity: sri\n        })\n      }\n    }\n  ) : null, !enableFogOfWar ? /* @__PURE__ */ React8.createElement(\n    \"link\",\n    {\n      rel: \"modulepreload\",\n      href: manifest.url,\n      crossOrigin: scriptProps.crossOrigin,\n      integrity: sri[manifest.url],\n      suppressHydrationWarning: true\n    }\n  ) : null, /* @__PURE__ */ React8.createElement(\n    \"link\",\n    {\n      rel: \"modulepreload\",\n      href: manifest.entry.module,\n      crossOrigin: scriptProps.crossOrigin,\n      integrity: sri[manifest.entry.module],\n      suppressHydrationWarning: true\n    }\n  ), preloads.map((path) => /* @__PURE__ */ React8.createElement(\n    \"link\",\n    {\n      key: path,\n      rel: \"modulepreload\",\n      href: path,\n      crossOrigin: scriptProps.crossOrigin,\n      integrity: sri[path],\n      suppressHydrationWarning: true\n    }\n  )), initialScripts);\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\nfunction mergeRefs(...refs) {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\n// lib/dom/ssr/errorBoundaries.tsx\nvar RemixErrorBoundary = class extends React9.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: props.error || null, location: props.location };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (state.location !== props.location) {\n      return { error: props.error || null, location: props.location };\n    }\n    return { error: props.error || state.error, location: state.location };\n  }\n  render() {\n    if (this.state.error) {\n      return /* @__PURE__ */ React9.createElement(\n        RemixRootDefaultErrorBoundary,\n        {\n          error: this.state.error,\n          isOutsideRemixApp: true\n        }\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n};\nfunction RemixRootDefaultErrorBoundary({\n  error,\n  isOutsideRemixApp\n}) {\n  console.error(error);\n  let heyDeveloper = /* @__PURE__ */ React9.createElement(\n    \"script\",\n    {\n      dangerouslySetInnerHTML: {\n        __html: `\n        console.log(\n          \"\\u{1F4BF} Hey developer \\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://reactrouter.com/how-to/error-boundary for more information.\"\n        );\n      `\n      }\n    }\n  );\n  if (isRouteErrorResponse(error)) {\n    return /* @__PURE__ */ React9.createElement(BoundaryShell, { title: \"Unhandled Thrown Response!\" }, /* @__PURE__ */ React9.createElement(\"h1\", { style: { fontSize: \"24px\" } }, error.status, \" \", error.statusText), ENABLE_DEV_WARNINGS ? heyDeveloper : null);\n  }\n  let errorInstance;\n  if (error instanceof Error) {\n    errorInstance = error;\n  } else {\n    let errorString = error == null ? \"Unknown Error\" : typeof error === \"object\" && \"toString\" in error ? error.toString() : JSON.stringify(error);\n    errorInstance = new Error(errorString);\n  }\n  return /* @__PURE__ */ React9.createElement(\n    BoundaryShell,\n    {\n      title: \"Application Error!\",\n      isOutsideRemixApp\n    },\n    /* @__PURE__ */ React9.createElement(\"h1\", { style: { fontSize: \"24px\" } }, \"Application Error\"),\n    /* @__PURE__ */ React9.createElement(\n      \"pre\",\n      {\n        style: {\n          padding: \"2rem\",\n          background: \"hsla(10, 50%, 50%, 0.1)\",\n          color: \"red\",\n          overflow: \"auto\"\n        }\n      },\n      errorInstance.stack\n    ),\n    heyDeveloper\n  );\n}\nfunction BoundaryShell({\n  title,\n  renderScripts,\n  isOutsideRemixApp,\n  children\n}) {\n  let { routeModules } = useFrameworkContext();\n  if (routeModules.root?.Layout && !isOutsideRemixApp) {\n    return children;\n  }\n  return /* @__PURE__ */ React9.createElement(\"html\", { lang: \"en\" }, /* @__PURE__ */ React9.createElement(\"head\", null, /* @__PURE__ */ React9.createElement(\"meta\", { charSet: \"utf-8\" }), /* @__PURE__ */ React9.createElement(\n    \"meta\",\n    {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n    }\n  ), /* @__PURE__ */ React9.createElement(\"title\", null, title)), /* @__PURE__ */ React9.createElement(\"body\", null, /* @__PURE__ */ React9.createElement(\"main\", { style: { fontFamily: \"system-ui, sans-serif\", padding: \"2rem\" } }, children, renderScripts ? /* @__PURE__ */ React9.createElement(Scripts, null) : null)));\n}\n\n// lib/dom/lib.tsx\nimport * as React10 from \"react\";\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\ntry {\n  if (isBrowser) {\n    window.__reactRouterVersion = // @ts-expect-error\n    \"7.8.0\";\n  }\n} catch (e) {\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    unstable_getContext: opts?.unstable_getContext,\n    future: opts?.future,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    hydrationRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    unstable_getContext: opts?.unstable_getContext,\n    future: opts?.future,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    hydrationRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors)\n    };\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            let error = new ErrorConstructor(val.message);\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nfunction BrowserRouter({\n  basename,\n  children,\n  window: window2\n}) {\n  let historyRef = React10.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction HashRouter({ basename, children, window: window2 }) {\n  let historyRef = React10.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window: window2, v5Compat: true });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction HistoryRouter({\n  basename,\n  children,\n  history\n}) {\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nHistoryRouter.displayName = \"unstable_HistoryRouter\";\nvar ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar Link = React10.forwardRef(\n  function LinkWithRef({\n    onClick,\n    discover = \"render\",\n    prefetch = \"none\",\n    relative,\n    reloadDocument,\n    replace: replace2,\n    state,\n    target,\n    to,\n    preventScrollReset,\n    viewTransition,\n    ...rest\n  }, forwardedRef) {\n    let { basename } = React10.useContext(NavigationContext);\n    let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX2.test(to);\n    let absoluteHref;\n    let isExternal = false;\n    if (typeof to === \"string\" && isAbsolute) {\n      absoluteHref = to;\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n    let href = useHref(to, { relative });\n    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(\n      prefetch,\n      rest\n    );\n    let internalOnClick = useLinkClickHandler(to, {\n      replace: replace2,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      viewTransition\n    });\n    function handleClick(event) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n    let link = (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      /* @__PURE__ */ React10.createElement(\n        \"a\",\n        {\n          ...rest,\n          ...prefetchHandlers,\n          href: absoluteHref || href,\n          onClick: isExternal || reloadDocument ? onClick : handleClick,\n          ref: mergeRefs(forwardedRef, prefetchRef),\n          target,\n          \"data-discover\": !isAbsolute && discover === \"render\" ? \"true\" : void 0\n        }\n      )\n    );\n    return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link;\n  }\n);\nLink.displayName = \"Link\";\nvar NavLink = React10.forwardRef(\n  function NavLinkWithRef({\n    \"aria-current\": ariaCurrentProp = \"page\",\n    caseSensitive = false,\n    className: classNameProp = \"\",\n    end = false,\n    style: styleProp,\n    to,\n    viewTransition,\n    children,\n    ...rest\n  }, ref) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React10.useContext(DataRouterStateContext);\n    let { navigator, basename } = React10.useContext(NavigationContext);\n    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useViewTransitionState(path) && viewTransition === true;\n    let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n      toPathname = toPathname.toLowerCase();\n    }\n    if (nextLocationPathname && basename) {\n      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n    const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning\n    };\n    let ariaCurrent = isActive ? ariaCurrentProp : void 0;\n    let className;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null\n      ].filter(Boolean).join(\" \");\n    }\n    let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n    return /* @__PURE__ */ React10.createElement(\n      Link,\n      {\n        ...rest,\n        \"aria-current\": ariaCurrent,\n        className,\n        ref,\n        style,\n        to,\n        viewTransition\n      },\n      typeof children === \"function\" ? children(renderProps) : children\n    );\n  }\n);\nNavLink.displayName = \"NavLink\";\nvar Form = React10.forwardRef(\n  ({\n    discover = \"render\",\n    fetcherKey,\n    navigate,\n    reloadDocument,\n    replace: replace2,\n    state,\n    method = defaultMethod,\n    action,\n    onSubmit,\n    relative,\n    preventScrollReset,\n    viewTransition,\n    ...props\n  }, forwardedRef) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let isAbsolute = typeof action === \"string\" && ABSOLUTE_URL_REGEX2.test(action);\n    let submitHandler = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n      let submitter = event.nativeEvent.submitter;\n      let submitMethod = submitter?.getAttribute(\"formmethod\") || method;\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace: replace2,\n        state,\n        relative,\n        preventScrollReset,\n        viewTransition\n      });\n    };\n    return /* @__PURE__ */ React10.createElement(\n      \"form\",\n      {\n        ref: forwardedRef,\n        method: formMethod,\n        action: formAction,\n        onSubmit: reloadDocument ? onSubmit : submitHandler,\n        ...props,\n        \"data-discover\": !isAbsolute && discover === \"render\" ? \"true\" : void 0\n      }\n    );\n  }\n);\nForm.displayName = \"Form\";\nfunction ScrollRestoration({\n  getKey,\n  storageKey,\n  ...props\n}) {\n  let remixContext = React10.useContext(FrameworkContext);\n  let { basename } = React10.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  useScrollRestoration({ getKey, storageKey });\n  let ssrKey = React10.useMemo(\n    () => {\n      if (!remixContext || !getKey) return null;\n      let userKey = getScrollRestorationKey(\n        location,\n        matches,\n        basename,\n        getKey\n      );\n      return userKey !== location.key ? userKey : null;\n    },\n    // Nah, we only need this the first time for the SSR render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  if (!remixContext || remixContext.isSpaMode) {\n    return null;\n  }\n  let restoreScroll = ((storageKey2, restoreKey) => {\n    if (!window.history.state || !window.history.state.key) {\n      let key = Math.random().toString(32).slice(2);\n      window.history.replaceState({ key }, \"\");\n    }\n    try {\n      let positions = JSON.parse(sessionStorage.getItem(storageKey2) || \"{}\");\n      let storedY = positions[restoreKey || window.history.state.key];\n      if (typeof storedY === \"number\") {\n        window.scrollTo(0, storedY);\n      }\n    } catch (error) {\n      console.error(error);\n      sessionStorage.removeItem(storageKey2);\n    }\n  }).toString();\n  return /* @__PURE__ */ React10.createElement(\n    \"script\",\n    {\n      ...props,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: `(${restoreScroll})(${JSON.stringify(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        )}, ${JSON.stringify(ssrKey)})`\n      }\n    }\n  );\n}\nScrollRestoration.displayName = \"ScrollRestoration\";\nfunction getDataRouterConsoleError2(hookName) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;\n}\nfunction useDataRouterContext3(hookName) {\n  let ctx = React10.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError2(hookName));\n  return ctx;\n}\nfunction useDataRouterState2(hookName) {\n  let state = React10.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError2(hookName));\n  return state;\n}\nfunction useLinkClickHandler(to, {\n  target,\n  replace: replaceProp,\n  state,\n  preventScrollReset,\n  relative,\n  viewTransition\n} = {}) {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n  return React10.useCallback(\n    (event) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);\n        navigate(to, {\n          replace: replace2,\n          state,\n          preventScrollReset,\n          relative,\n          viewTransition\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      viewTransition\n    ]\n  );\n}\nfunction useSearchParams(defaultInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.`\n  );\n  let defaultSearchParamsRef = React10.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React10.useRef(false);\n  let location = useLocation();\n  let searchParams = React10.useMemo(\n    () => (\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      )\n    ),\n    [location.search]\n  );\n  let navigate = useNavigate();\n  let setSearchParams = React10.useCallback(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(new URLSearchParams(searchParams)) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n  return [searchParams, setSearchParams];\n}\nvar fetcherId = 0;\nvar getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\nfunction useSubmit() {\n  let { router } = useDataRouterContext3(\"useSubmit\" /* UseSubmit */);\n  let { basename } = React10.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n  return React10.useCallback(\n    async (target, options = {}) => {\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        await router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || method,\n          formEncType: options.encType || encType,\n          flushSync: options.flushSync\n        });\n      } else {\n        await router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || method,\n          formEncType: options.encType || encType,\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          flushSync: options.flushSync,\n          viewTransition: options.viewTransition\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\nfunction useFormAction(action, { relative } = {}) {\n  let { basename } = React10.useContext(NavigationContext);\n  let routeContext = React10.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n  let [match] = routeContext.matches.slice(-1);\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n  let location = useLocation();\n  if (action == null) {\n    path.search = location.search;\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some((v) => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction useFetcher({\n  key\n} = {}) {\n  let { router } = useDataRouterContext3(\"useFetcher\" /* UseFetcher */);\n  let state = useDataRouterState2(\"useFetcher\" /* UseFetcher */);\n  let fetcherData = React10.useContext(FetchersContext);\n  let route = React10.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n  let defaultKey = React10.useId();\n  let [fetcherKey, setFetcherKey] = React10.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  }\n  React10.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => router.deleteFetcher(fetcherKey);\n  }, [router, fetcherKey]);\n  let load = React10.useCallback(\n    async (href, opts) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      await router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n  let submitImpl = useSubmit();\n  let submit = React10.useCallback(\n    async (target, opts) => {\n      await submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n  let FetcherForm = React10.useMemo(() => {\n    let FetcherForm2 = React10.forwardRef(\n      (props, ref) => {\n        return /* @__PURE__ */ React10.createElement(Form, { ...props, navigate: false, fetcherKey, ref });\n      }\n    );\n    FetcherForm2.displayName = \"fetcher.Form\";\n    return FetcherForm2;\n  }, [fetcherKey]);\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data2 = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React10.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data: data2\n    }),\n    [FetcherForm, submit, load, fetcher, data2]\n  );\n  return fetcherWithComponents;\n}\nfunction useFetchers() {\n  let state = useDataRouterState2(\"useFetchers\" /* UseFetchers */);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key\n  }));\n}\nvar SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nvar savedScrollPositions = {};\nfunction getScrollRestorationKey(location, matches, basename, getKey) {\n  let key = null;\n  if (getKey) {\n    if (basename !== \"/\") {\n      key = getKey(\n        {\n          ...location,\n          pathname: stripBasename(location.pathname, basename) || location.pathname\n        },\n        matches\n      );\n    } else {\n      key = getKey(location, matches);\n    }\n  }\n  if (key == null) {\n    key = location.key;\n  }\n  return key;\n}\nfunction useScrollRestoration({\n  getKey,\n  storageKey\n} = {}) {\n  let { router } = useDataRouterContext3(\"useScrollRestoration\" /* UseScrollRestoration */);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(\n    \"useScrollRestoration\" /* UseScrollRestoration */\n  );\n  let { basename } = React10.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  React10.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  usePageHide(\n    React10.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = getScrollRestorationKey(location, matches, basename, getKey);\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [navigation.state, getKey, basename, location, matches, storageKey])\n  );\n  if (typeof document !== \"undefined\") {\n    React10.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n      }\n    }, [storageKey]);\n    React10.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    React10.useLayoutEffect(() => {\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      try {\n        if (location.hash) {\n          let el = document.getElementById(\n            decodeURIComponent(location.hash.slice(1))\n          );\n          if (el) {\n            el.scrollIntoView();\n            return;\n          }\n        }\n      } catch {\n        warning(\n          false,\n          `\"${location.hash.slice(\n            1\n          )}\" is not a decodable element ID. The view will not scroll to it.`\n        );\n      }\n      if (preventScrollReset === true) {\n        return;\n      }\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\nfunction useBeforeUnload(callback, options) {\n  let { capture } = options || {};\n  React10.useEffect(() => {\n    let opts = capture != null ? { capture } : void 0;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\nfunction usePageHide(callback, options) {\n  let { capture } = options || {};\n  React10.useEffect(() => {\n    let opts = capture != null ? { capture } : void 0;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\nfunction usePrompt({\n  when,\n  message\n}) {\n  let blocker = useBlocker(when);\n  React10.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React10.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\nfunction useViewTransitionState(to, { relative } = {}) {\n  let vtContext = React10.useContext(ViewTransitionContext);\n  invariant(\n    vtContext != null,\n    \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n  let { basename } = useDataRouterContext3(\n    \"useViewTransitionState\" /* useViewTransitionState */\n  );\n  let path = useResolvedPath(to, { relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n\n// lib/dom/server.tsx\nimport * as React11 from \"react\";\nfunction StaticRouter({\n  basename,\n  children,\n  location: locationProp = \"/\"\n}) {\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let action = \"POP\" /* Pop */;\n  let location = {\n    pathname: locationProp.pathname || \"/\",\n    search: locationProp.search || \"\",\n    hash: locationProp.hash || \"\",\n    state: locationProp.state != null ? locationProp.state : null,\n    key: locationProp.key || \"default\"\n  };\n  let staticNavigator = getStatelessNavigator();\n  return /* @__PURE__ */ React11.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location,\n      navigationType: action,\n      navigator: staticNavigator,\n      static: true\n    }\n  );\n}\nfunction StaticRouterProvider({\n  context,\n  router,\n  hydrate: hydrate2 = true,\n  nonce\n}) {\n  invariant(\n    router && context,\n    \"You must provide `router` and `context` to <StaticRouterProvider>\"\n  );\n  let dataRouterContext = {\n    router,\n    navigator: getStatelessNavigator(),\n    static: true,\n    staticContext: context,\n    basename: context.basename || \"/\"\n  };\n  let fetchersContext = /* @__PURE__ */ new Map();\n  let hydrateScript = \"\";\n  if (hydrate2 !== false) {\n    let data2 = {\n      loaderData: context.loaderData,\n      actionData: context.actionData,\n      errors: serializeErrors(context.errors)\n    };\n    let json = htmlEscape(JSON.stringify(JSON.stringify(data2)));\n    hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${json});`;\n  }\n  let { state } = dataRouterContext.router;\n  return /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(DataRouterContext.Provider, { value: dataRouterContext }, /* @__PURE__ */ React11.createElement(DataRouterStateContext.Provider, { value: state }, /* @__PURE__ */ React11.createElement(FetchersContext.Provider, { value: fetchersContext }, /* @__PURE__ */ React11.createElement(ViewTransitionContext.Provider, { value: { isTransitioning: false } }, /* @__PURE__ */ React11.createElement(\n    Router,\n    {\n      basename: dataRouterContext.basename,\n      location: state.location,\n      navigationType: state.historyAction,\n      navigator: dataRouterContext.navigator,\n      static: dataRouterContext.static\n    },\n    /* @__PURE__ */ React11.createElement(\n      DataRoutes2,\n      {\n        routes: router.routes,\n        future: router.future,\n        state\n      }\n    )\n  ))))), hydrateScript ? /* @__PURE__ */ React11.createElement(\n    \"script\",\n    {\n      suppressHydrationWarning: true,\n      nonce,\n      dangerouslySetInnerHTML: { __html: hydrateScript }\n    }\n  ) : null);\n}\nfunction DataRoutes2({\n  routes,\n  future,\n  state\n}) {\n  return useRoutesImpl(routes, void 0, state, future);\n}\nfunction serializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (isRouteErrorResponse(val)) {\n      serialized[key] = { ...val, __type: \"RouteErrorResponse\" };\n    } else if (val instanceof Error) {\n      serialized[key] = {\n        message: val.message,\n        __type: \"Error\",\n        // If this is a subclass (i.e., ReferenceError), send up the type so we\n        // can re-create the same type during hydration.\n        ...val.name !== \"Error\" ? {\n          __subType: val.name\n        } : {}\n      };\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nfunction getStatelessNavigator() {\n  return {\n    createHref,\n    encodeLocation,\n    push(to) {\n      throw new Error(\n        `You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${JSON.stringify(to)})\\` somewhere in your app.`\n      );\n    },\n    replace(to) {\n      throw new Error(\n        `You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${JSON.stringify(to)}, { replace: true })\\` somewhere in your app.`\n      );\n    },\n    go(delta) {\n      throw new Error(\n        `You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${delta})\\` somewhere in your app.`\n      );\n    },\n    back() {\n      throw new Error(\n        `You cannot use navigator.back() on the server because it is a stateless environment.`\n      );\n    },\n    forward() {\n      throw new Error(\n        `You cannot use navigator.forward() on the server because it is a stateless environment.`\n      );\n    }\n  };\n}\nfunction createStaticHandler2(routes, opts) {\n  return createStaticHandler(routes, {\n    ...opts,\n    mapRouteProperties\n  });\n}\nfunction createStaticRouter(routes, context, opts = {}) {\n  let manifest = {};\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    void 0,\n    manifest\n  );\n  let matches = context.matches.map((match) => {\n    let route = manifest[match.route.id] || match.route;\n    return {\n      ...match,\n      route\n    };\n  });\n  let msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;\n  return {\n    get basename() {\n      return context.basename;\n    },\n    get future() {\n      return {\n        unstable_middleware: false,\n        ...opts?.future\n      };\n    },\n    get state() {\n      return {\n        historyAction: \"POP\" /* Pop */,\n        location: context.location,\n        matches,\n        loaderData: context.loaderData,\n        actionData: context.actionData,\n        errors: context.errors,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        restoreScrollPosition: null,\n        preventScrollReset: false,\n        revalidation: \"idle\",\n        fetchers: /* @__PURE__ */ new Map(),\n        blockers: /* @__PURE__ */ new Map()\n      };\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return void 0;\n    },\n    initialize() {\n      throw msg(\"initialize\");\n    },\n    subscribe() {\n      throw msg(\"subscribe\");\n    },\n    enableScrollRestoration() {\n      throw msg(\"enableScrollRestoration\");\n    },\n    navigate() {\n      throw msg(\"navigate\");\n    },\n    fetch() {\n      throw msg(\"fetch\");\n    },\n    revalidate() {\n      throw msg(\"revalidate\");\n    },\n    createHref,\n    encodeLocation,\n    getFetcher() {\n      return IDLE_FETCHER;\n    },\n    deleteFetcher() {\n      throw msg(\"deleteFetcher\");\n    },\n    dispose() {\n      throw msg(\"dispose\");\n    },\n    getBlocker() {\n      return IDLE_BLOCKER;\n    },\n    deleteBlocker() {\n      throw msg(\"deleteBlocker\");\n    },\n    patchRoutes() {\n      throw msg(\"patchRoutes\");\n    },\n    _internalFetchControllers: /* @__PURE__ */ new Map(),\n    _internalSetRoutes() {\n      throw msg(\"_internalSetRoutes\");\n    },\n    _internalSetStateDoNotUseOrYouWillBreakYourApp() {\n      throw msg(\"_internalSetStateDoNotUseOrYouWillBreakYourApp\");\n    }\n  };\n}\nfunction createHref(to) {\n  return typeof to === \"string\" ? to : createPath(to);\n}\nfunction encodeLocation(to) {\n  let href = typeof to === \"string\" ? to : createPath(to);\n  href = href.replace(/ $/, \"%20\");\n  let encoded = ABSOLUTE_URL_REGEX3.test(href) ? new URL(href) : new URL(href, \"http://localhost\");\n  return {\n    pathname: encoded.pathname,\n    search: encoded.search,\n    hash: encoded.hash\n  };\n}\nvar ABSOLUTE_URL_REGEX3 = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar ESCAPE_LOOKUP2 = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nvar ESCAPE_REGEX2 = /[&><\\u2028\\u2029]/g;\nfunction htmlEscape(str) {\n  return str.replace(ESCAPE_REGEX2, (match) => ESCAPE_LOOKUP2[match]);\n}\n\nexport {\n  Action,\n  createBrowserHistory,\n  invariant,\n  createPath,\n  parsePath,\n  unstable_createContext,\n  unstable_RouterContextProvider,\n  convertRoutesToDataRoutes,\n  matchRoutes,\n  generatePath,\n  matchPath,\n  stripBasename,\n  resolvePath,\n  data,\n  redirect,\n  redirectDocument,\n  replace,\n  ErrorResponseImpl,\n  isRouteErrorResponse,\n  IDLE_NAVIGATION,\n  IDLE_FETCHER,\n  IDLE_BLOCKER,\n  createRouter,\n  createStaticHandler,\n  getStaticContextFromError,\n  isDataWithResponseInit,\n  isResponse,\n  isRedirectStatusCode,\n  isRedirectResponse,\n  isMutationMethod,\n  DataRouterContext,\n  DataRouterStateContext,\n  RSCRouterContext,\n  ViewTransitionContext,\n  FetchersContext,\n  NavigationContext,\n  LocationContext,\n  RouteContext,\n  ENABLE_DEV_WARNINGS,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useNavigationType,\n  useMatch,\n  useNavigate,\n  useOutletContext,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useNavigation,\n  useRevalidator,\n  useMatches,\n  useLoaderData,\n  useRouteLoaderData,\n  useActionData,\n  useRouteError,\n  useAsyncValue,\n  useAsyncError,\n  useBlocker,\n  warnOnce,\n  mapRouteProperties,\n  hydrationRouteProperties,\n  createMemoryRouter,\n  RouterProvider,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  Await,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  renderMatches,\n  WithComponentProps,\n  withComponentProps,\n  WithHydrateFallbackProps,\n  withHydrateFallbackProps,\n  WithErrorBoundaryProps,\n  withErrorBoundaryProps,\n  createSearchParams,\n  encode,\n  createRequestInit,\n  SingleFetchRedirectSymbol,\n  SINGLE_FETCH_REDIRECT_STATUS,\n  NO_BODY_STATUS_CODES,\n  StreamTransfer,\n  getTurboStreamSingleFetchDataStrategy,\n  getSingleFetchDataStrategyImpl,\n  stripIndexParam,\n  singleFetchUrl,\n  decodeViaTurboStream,\n  RemixErrorBoundary,\n  createServerRoutes,\n  createClientRoutesWithHMRRevalidationOptOut,\n  noActionDefinedError,\n  createClientRoutes,\n  shouldHydrateRouteLoader,\n  getPatchRoutesOnNavigationFunction,\n  useFogOFWarDiscovery,\n  getManifestPath,\n  FrameworkContext,\n  CRITICAL_CSS_DATA_ATTRIBUTE,\n  Links,\n  PrefetchPageLinks,\n  Meta,\n  Scripts,\n  createBrowserRouter,\n  createHashRouter,\n  BrowserRouter,\n  HashRouter,\n  HistoryRouter,\n  Link,\n  NavLink,\n  Form,\n  ScrollRestoration,\n  useLinkClickHandler,\n  useSearchParams,\n  useSubmit,\n  useFormAction,\n  useFetcher,\n  useFetchers,\n  useScrollRestoration,\n  useBeforeUnload,\n  usePrompt,\n  useViewTransitionState,\n  StaticRouter,\n  StaticRouterProvider,\n  createStaticHandler2,\n  createStaticRouter\n};\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Box,\n  Container,\n  Chip,\n  Divider\n} from '@mui/material';\nimport {\n  Home as HomeIcon,\n  Settings as SettingsIcon,\n  Edit as EditIcon\n} from '@mui/icons-material';\n\ninterface NavItem {\n  path: string;\n  label: string;\n  icon: React.ReactNode;\n  customColor?: string;\n}\n\nconst Navigation: React.FC = () => {\n  const location = useLocation();\n\n  const isActive = (path: string): boolean => {\n    return location.pathname === path;\n  };\n\n  const navItems: NavItem[] = [\n    { path: '/', label: 'Home', icon: <HomeIcon /> },\n    { path: '/manage', label: 'Manage', icon: <EditIcon /> }, // Use default primary color\n    { path: '/configure', label: 'Configure', icon: <SettingsIcon />, customColor: '#666666' } // Dark gray\n  ];\n\n  return (\n    <AppBar position=\"static\" elevation={0}>\n      <Container maxWidth=\"xl\">\n        <Toolbar sx={{ minHeight: 70 }}>\n          <Typography\n            variant=\"h5\"\n            component={Link}\n            to=\"/\"\n            sx={{\n              flexGrow: 1,\n              textDecoration: 'none',\n              color: 'primary.main',\n              fontWeight: 'bold',\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1,\n              '&:hover': {\n                color: 'primary.light',\n              },\n            }}\n          >\n            <Chip\n              label=\"SS\"\n              color=\"primary\"\n              size=\"small\"\n              sx={{\n                fontWeight: 'bold',\n                fontSize: '0.8rem',\n                backgroundColor: '#6c5ce7',\n                color: '#ffffff',\n              }}\n            />\n            Stream Save\n          </Typography>\n\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            {navItems.map((item, index) => (\n              <React.Fragment key={item.path}>\n                <Button\n                  component={Link}\n                  to={item.path}\n                  startIcon={item.icon}\n                  variant={isActive(item.path) ? \"contained\" : \"text\"}\n                  color={isActive(item.path) ? \"primary\" : \"inherit\"}\n                  sx={{\n                    borderRadius: 2,\n                    px: 3,\n                    py: 1,\n                    fontWeight: 600,\n                    minWidth: 120,\n                    justifyContent: 'center',\n                    // Add borders with feature card colors\n                    ...(item.path === '/manage' && {\n                      border: '2px solid',\n                      borderColor: 'secondary.main',\n                      '&:hover': {\n                        borderColor: 'secondary.main',\n                        backgroundColor: 'rgba(108, 92, 231, 0.1)',\n                      },\n                    }),\n                    ...(item.path === '/configure' && {\n                      border: '2px solid',\n                      borderColor: '#00BFAE',\n                      '&:hover': {\n                        borderColor: '#00BFAE',\n                        backgroundColor: 'rgba(0, 191, 174, 0.1)',\n                      },\n                    }),\n                    // Custom colors for specific navigation items\n                    ...(item.customColor && {\n                      color: isActive(item.path) ? 'white' : item.customColor,\n                      backgroundColor: isActive(item.path) ? item.customColor : 'transparent',\n                      '&:hover': {\n                        backgroundColor: isActive(item.path)\n                          ? item.customColor\n                          : `${item.customColor}20`, // 20% opacity for hover\n                      },\n                    }),\n                    // Default hover behavior for items without custom colors\n                    ...(!item.customColor && {\n                      '&:hover': {\n                        backgroundColor: isActive(item.path)\n                          ? '#5f3dc4'\n                          : 'rgba(108, 92, 231, 0.1)',\n                      },\n                    }),\n                  }}\n                >\n                  {item.label}\n                </Button>\n                {index < navItems.length - 1 && (\n                  <Divider\n                    orientation=\"vertical\"\n                    flexItem\n                    sx={{\n                      height: 32,\n                      borderColor: 'rgba(255, 255, 255, 0.12)',\n                      mx: 0.5\n                    }}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport { Typography, Box } from '@mui/material';\n\nconst HeaderSection: React.FC = () => {\n  return (\n    <Box textAlign=\"center\" mb={6}>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        color=\"primary\"\n        gutterBottom\n        sx={{\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #6c5ce7 30%, #a29bfe 90%)',\n          backgroundClip: 'text',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          mb: 2,\n        }}\n      >\n        Stream Save\n      </Typography>\n      <Typography variant=\"h5\" color=\"text.secondary\" paragraph sx={{ maxWidth: 600, mx: 'auto' }}>\n        Save and manage your custom stream links for movies and series in Stremio\n      </Typography>\n    </Box>\n  );\n};\n\nexport default HeaderSection;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Box } from '@mui/material';\nimport {\n  Settings as SettingsIcon,\n  Edit as EditIcon,\n} from '@mui/icons-material';\n\nconst ActionButtons: React.FC = () => {\n  return (\n    <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 6, justifyContent: 'center' }}>\n      <Box sx={{ flex: { xs: '1', md: '0 1 300px' } }}>\n        <Button\n          component={Link}\n          to=\"/manage\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          fullWidth\n          startIcon={<EditIcon />}\n          sx={{\n            py: 3,\n            fontSize: '1.1rem',\n            borderRadius: 3,\n            border: '3px solid',\n            borderColor: 'secondary.main',\n            boxShadow: '0 8px 32px rgba(108, 92, 231, 0.3)',\n            '&:hover': {\n              boxShadow: '0 12px 40px rgba(108, 92, 231, 0.4)',\n              transform: 'translateY(-2px)',\n              borderColor: 'secondary.light',\n            },\n            transition: 'all 0.3s ease',\n          }}\n        >\n          Manage Content\n        </Button>\n      </Box>\n      <Box sx={{ flex: { xs: '1', md: '0 1 300px' } }}>\n        <Button\n          component={Link}\n          to=\"/configure\"\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"large\"\n          fullWidth\n          startIcon={<SettingsIcon />}\n          sx={{\n            py: 3,\n            fontSize: '1.1rem',\n            borderRadius: 3,\n            borderWidth: 3,\n            borderColor: '#00BFAE',\n            '&:hover': {\n              borderWidth: 3,\n              borderColor: '#00BFAE',\n              transform: 'translateY(-2px)',\n              boxShadow: '0 8px 32px rgba(0, 191, 174, 0.2)',\n            },\n            transition: 'all 0.3s ease',\n          }}\n        >\n          First Time Configuration\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ActionButtons;\n","import React from 'react';\nimport { Card, CardContent, Typography, Box } from '@mui/material';\nimport {\n  Storage as StorageIcon,\n  Dashboard as DashboardIcon,\n} from '@mui/icons-material';\n\nconst FeatureCards: React.FC = () => {\n  return (\n    <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>\n      <Box sx={{ flex: 1 }}>\n        <Card elevation={0} sx={{\n          height: '100%',\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n          border: '1px solid #2d2d2d',\n          '&:hover': {\n            transform: 'translateY(-4px)',\n            boxShadow: '0 12px 40px rgba(108, 92, 231, 0.15)',\n          },\n          transition: 'all 0.3s ease',\n        }}>\n          <CardContent sx={{ textAlign: 'center', p: 4 }}>\n            <Box sx={{ mb: 2 }}>\n              <StorageIcon sx={{ fontSize: 48, color: 'secondary.main' }} />\n            </Box>\n            <Typography variant=\"h6\" color=\"secondary\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Manage\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Daily use page for adding and removing stream links for movies and series.\n            </Typography>\n          </CardContent>\n        </Card>\n      </Box>\n      <Box sx={{ flex: 1 }}>\n        <Card elevation={0} sx={{\n          height: '100%',\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n          border: '1px solid #2d2d2d',\n          '&:hover': {\n            transform: 'translateY(-4px)',\n            boxShadow: '0 12px 40px rgba(108, 92, 231, 0.15)',\n          },\n          transition: 'all 0.3s ease',\n        }}>\n          <CardContent sx={{ textAlign: 'center', p: 4 }}>\n            <Box sx={{ mb: 2 }}>\n              <DashboardIcon sx={{ fontSize: 48, color: '#00BFAE' }} />\n            </Box>\n            <Typography variant=\"h6\" color=\"#00BFAE\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Configure\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              One-time setup for MongoDB connection. Required before adding content.\n            </Typography>\n          </CardContent>\n        </Card>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FeatureCards;\n","import React from 'react';\nimport { HeaderSection, ActionButtons, FeatureCards } from '../components/Home';\n\nconst Home: React.FC = () => {\n  return (\n    <div style={{ padding: '20px' }}>\n      <HeaderSection />\n      <ActionButtons />\n      <FeatureCards />\n    </div>\n  );\n};\n\nexport default Home;\n","import type { MongoDBCredentials } from '../types';\n\nexport const generateUrl = (mongoCred: MongoDBCredentials): string => (\n  `mongodb+srv://${mongoCred.user}:${mongoCred.pass}@${mongoCred.cluster}.mongodb.net`\n);\n\nexport const generateMongoUrl = (user: string, pass: string, cluster: string): string => {\n  if (user && pass && cluster &&\n    typeof user === 'string' && typeof pass === 'string' && typeof cluster === 'string' &&\n    user.trim() !== '' && pass.trim() !== '' && cluster.trim() !== '') {\n    return `mongodb+srv://${user.trim()}:${pass.trim()}@${cluster.trim()}.mongodb.net`;\n  }\n  return '';\n};\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst ConfigureHeader: React.FC = () => {\n  return (\n    <Box textAlign=\"center\" mb={4}>\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>\n        Configure Stream Save\n      </Typography>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n        Configure your MongoDB connection for Stream Save\n      </Typography>\n    </Box>\n  );\n};\n\nexport default ConfigureHeader;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  IconButton,\n  InputAdornment,\n} from '@mui/material';\nimport {\n  Security as SecurityIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n} from '@mui/icons-material';\nimport type { FormData } from '../../types';\n\ninterface CredentialsFormProps {\n  formData: FormData;\n  showPassword: boolean;\n  setShowPassword: (show: boolean) => void;\n  onFieldChange: (field: string, value: string) => void;\n}\n\nconst CredentialsForm: React.FC<CredentialsFormProps> = ({\n  formData,\n  showPassword,\n  setShowPassword,\n  onFieldChange,\n}) => {\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <SecurityIcon sx={{ fontSize: 32, color: 'primary.main', mr: 2 }} />\n        <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\n          Enter MongoDB Credentials\n        </Typography>\n      </Box>\n\n      {/* Color Legend */}\n      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 3 }}>\n        <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Box sx={{ width: 16, height: 16, backgroundColor: '#87CEEB', borderRadius: 1 }} />\n          <Typography variant=\"body2\" color=\"text.secondary\">Username</Typography>\n        </Box>\n        <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Box sx={{ width: 16, height: 16, backgroundColor: '#FFB6C1', borderRadius: 1 }} />\n          <Typography variant=\"body2\" color=\"text.secondary\">Password</Typography>\n        </Box>\n        <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Box sx={{ width: 16, height: 16, backgroundColor: '#FFD700', borderRadius: 1 }} />\n          <Typography variant=\"body2\" color=\"text.secondary\">Cluster</Typography>\n        </Box>\n      </Box>\n\n      {/* Input Fields */}\n      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 4 }}>\n        <Box sx={{ flex: 1 }}>\n          <TextField\n            fullWidth\n            label=\"Username\"\n            value={formData.user}\n            onChange={(e) => onFieldChange('user', e.target.value)}\n            placeholder=\"Your MongoDB username\"\n            variant=\"outlined\"\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                '& fieldset': {\n                  borderColor: '#87CEEB',\n                },\n                '&:hover fieldset': {\n                  borderColor: '#5F9EA0',\n                },\n                '&.Mui-focused fieldset': {\n                  borderColor: '#87CEEB',\n                },\n              },\n              '& .MuiInputLabel-root': {\n                color: '#87CEEB',\n              },\n              '& .MuiInputLabel-root.Mui-focused': {\n                color: '#87CEEB',\n              },\n            }}\n          />\n        </Box>\n        <Box sx={{ flex: 1 }}>\n          <TextField\n            fullWidth\n            label=\"Password\"\n            type={showPassword ? 'text' : 'password'}\n            value={formData.pass}\n            onChange={(e) => onFieldChange('pass', e.target.value)}\n            placeholder=\"Your MongoDB Password\"\n            variant=\"outlined\"\n            required\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => setShowPassword(!showPassword)}\n                    edge=\"end\"\n                    sx={{\n                      color: '#FFB6C1',\n                      '&:hover': {\n                        backgroundColor: 'rgba(255, 182, 193, 0.1)',\n                      },\n                    }}\n                  >\n                    {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                '& fieldset': {\n                  borderColor: '#FFB6C1',\n                },\n                '&:hover fieldset': {\n                  borderColor: '#FF69B4',\n                },\n                '&.Mui-focused fieldset': {\n                  borderColor: '#FFB6C1',\n                },\n              },\n              '& .MuiInputLabel-root': {\n                color: '#FFB6C1',\n              },\n              '& .MuiInputLabel-root.Mui-focused': {\n                color: '#FFB6C1',\n              },\n            }}\n          />\n        </Box>\n        <Box sx={{ flex: 1 }}>\n          <TextField\n            fullWidth\n            label=\"Cluster Name\"\n            value={formData.cluster}\n            onChange={(e) => onFieldChange('cluster', e.target.value)}\n            placeholder=\"Your cluster name\"\n            variant=\"outlined\"\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                '& fieldset': {\n                  borderColor: '#FFD700',\n                },\n                '&:hover fieldset': {\n                  borderColor: '#FFA500',\n                },\n                '&.Mui-focused fieldset': {\n                  borderColor: '#FFD700',\n                },\n              },\n              '& .MuiInputLabel-root': {\n                color: '#FFD700',\n              },\n              '& .MuiInputLabel-root.Mui-focused': {\n                color: '#FFD700',\n              },\n            }}\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CredentialsForm;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  IconButton,\n  InputAdornment,\n} from '@mui/material';\nimport {\n  Security as SecurityIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n} from '@mui/icons-material';\nimport type { FormData } from '../../types';\n\ninterface ConnectionUrlFormProps {\n  formData: FormData;\n  showPassword: boolean;\n  setShowPassword: (show: boolean) => void;\n  onUrlChange: (url: string) => void;\n}\n\nconst ConnectionUrlForm: React.FC<ConnectionUrlFormProps> = ({\n  formData,\n  showPassword,\n  setShowPassword,\n  onUrlChange,\n}) => {\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <SecurityIcon sx={{ fontSize: 32, color: 'primary.main', mr: 2 }} />\n        <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\n          Enter MongoDB Connection URL\n        </Typography>\n      </Box>\n\n      {/* Input Field */}\n      <Box sx={{ mb: 4 }}>\n        {/* Normal input field with overlay */}\n        <Box sx={{ position: 'relative', mb: 2 }}>\n          <TextField\n            fullWidth\n            label=\"MongoDB Connection URL\"\n            value={formData.db_url}\n            onChange={(e) => onUrlChange(e.target.value)}\n            placeholder=\"mongodb+srv://<db_username>:<db_password>@<db_cluster>.mongodb.net\"\n            variant=\"outlined\"\n            multiline\n            rows={2}\n            sx={{\n              fontFamily: 'monospace',\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => setShowPassword(!showPassword)}\n                    sx={{\n                      color: 'primary.main',\n                      '&:hover': {\n                        backgroundColor: 'rgba(108, 92, 231, 0.1)',\n                      },\n                    }}\n                  >\n                    {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          {/* Overlay when password is hidden - covers most of TextField but leaves eye icon visible */}\n          {!showPassword && formData.db_url && (\n            <Box\n              sx={{\n                position: 'absolute',\n                top: '8px', // Add padding from top\n                left: '8px', // Add padding from left\n                right: '68px', // Leave space for eye icon + padding\n                bottom: '8px', // Add padding from bottom\n                backgroundColor: 'rgba(0, 0, 0, 0.15)',\n                backdropFilter: 'blur(12px)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                pointerEvents: 'none',\n                zIndex: 1,\n              }}\n            >\n              <Typography\n                variant=\"body2\"\n                sx={{\n                  color: 'rgba(255, 255, 255, 0.7)',\n                  fontStyle: 'italic',\n                  textAlign: 'center',\n                  px: 2,\n                  fontWeight: 400,\n                  textShadow: '0 1px 3px rgba(0, 0, 0, 0.8)',\n                }}\n              >\n                Password hidden - Click eye icon to reveal\n              </Typography>\n            </Box>\n          )}\n        </Box>\n\n        {/* Colored display underneath */}\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1, fontStyle: 'italic', fontSize: '0.9em' }}>\n          <span style={{ color: '#666666' }}>Example: </span>mongodb+srv://\n          <span style={{ color: '#87CEEB' }}>\n            {formData.user || '<db_username>'}\n          </span>\n          :\n          <span style={{ color: '#FFB6C1' }}>\n            {\n              formData.pass && showPassword ? formData.pass : '<db_password>'\n            }\n          </span>\n          @\n          <span style={{ color: '#FFD700' }}>\n            {formData.cluster || '<db_cluster>'}\n          </span>\n          .mongodb.net\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ConnectionUrlForm;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Tooltip,\n  IconButton,\n  Divider,\n  Alert,\n} from '@mui/material';\nimport {\n  InstallDesktop as InstallDesktopIcon,\n  ContentCopy as ContentCopyIcon,\n  Info as InfoIcon,\n} from '@mui/icons-material';\nimport stremioSymbol from '../../assets/stremio_symbol.png';\n\ninterface InstallationSectionProps {\n  installUrl: string;\n  formData: any;\n  showPassword: boolean;\n  onOpenInStremio: () => void;\n  onCopyUrl: () => void;\n}\n\nconst InstallationSection: React.FC<InstallationSectionProps> = ({\n  installUrl,\n  formData,\n  showPassword,\n  onOpenInStremio,\n  onCopyUrl,\n}) => {\n  if (!installUrl) return null;\n\n  return (\n    <Box sx={{ mb: 4 }}>\n      <Divider sx={{ mb: 2 }} />\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <img\n          src={stremioSymbol}\n          alt=\"Stremio\"\n          style={{\n            width: 32,\n            height: 32,\n            marginRight: 16\n          }}\n        />\n        <Typography variant=\"h6\" sx={{ fontWeight: 'bold', whiteSpace: 'nowrap' }}>\n          Install to Stremio\n        </Typography>\n      </Box>\n\n      <Box sx={{ mb: 2, display: 'flex', alignItems: 'stretch' }}>\n        <Button\n          variant=\"contained\"\n          onClick={onOpenInStremio}\n          disabled={!installUrl}\n          startIcon={\n            <InstallDesktopIcon sx={{ color: 'white' }} />\n          }\n          sx={{\n            px: 3,\n            py: 1,\n            borderRadius: '8px 0 0 8px',\n            fontSize: '1rem',\n            background: 'linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%)',\n            '&:hover': {\n              background: 'linear-gradient(135deg, #5f3dc4 0%, #8b7ae6 100%)',\n              transform: 'translateY(-1px)',\n              boxShadow: '0 4px 16px rgba(108, 92, 231, 0.3)',\n            },\n            transition: 'all 0.3s ease',\n            border: 'none',\n            minWidth: 'auto',\n            height: '56px',\n          }}\n        >\n          Open in Stremio\n        </Button>\n        <TextField\n          fullWidth\n          label=\"Addon URL (manifest.json)\"\n          value={showPassword ? installUrl : installUrl.replace(formData.pass, '<db_password>')}\n          variant=\"outlined\"\n          InputProps={{\n            readOnly: true,\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <Tooltip title=\"Copy URL\">\n                  <IconButton\n                    onClick={onCopyUrl}\n                    sx={{\n                      color: '#4caf50',\n                      '&:hover': {\n                        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n                      },\n                    }}\n                  >\n                    <ContentCopyIcon />\n                  </IconButton>\n                </Tooltip>\n              </InputAdornment>\n            ),\n          }}\n          sx={{\n            flex: 1,\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '0 8px 8px 0',\n              '& fieldset': {\n                borderColor: '#2d2d2d',\n                borderLeft: 'none',\n              },\n              '&:hover fieldset': {\n                borderColor: 'primary.main',\n                borderLeft: 'none',\n              },\n              '&.Mui-focused fieldset': {\n                borderColor: 'primary.main',\n                borderLeft: 'none',\n              },\n            },\n          }}\n        />\n      </Box>\n\n      {/* Installation Instructions */}\n      <Alert \n        severity=\"info\" \n        icon={<InfoIcon />}\n        sx={{ \n          mb: 2,\n          background: 'rgba(33, 150, 243, 0.1)',\n          border: '1px solid rgba(33, 150, 243, 0.3)',\n          '& .MuiAlert-icon': {\n            color: '#2196f3'\n          }\n        }}\n      >\n        <Typography variant=\"body2\" sx={{ fontWeight: 500, mb: 1 }}>\n          📱 <strong>How to install in Stremio:</strong>\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mb: 1 }}>\n          1. Copy the URL above (click the copy button)\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mb: 1 }}>\n          2. Go to <a href=\"https://web.stremio.com/#/addons\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#2196f3', textDecoration: 'underline' }}>web.stremio.com/#/addons</a>\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mb: 1 }}>\n          3. Click the <strong>\"+ Add addon\"</strong> button\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mb: 1 }}>\n          4. Paste the URL and click Install\n        </Typography>\n        <Typography variant=\"body2\">\n          5. Your Stream Save addon is now active in Stremio!\n        </Typography>\n      </Alert>\n    </Box>\n  );\n};\n\nexport default InstallationSection;\n","export default \"__VITE_ASSET__ClRI9PMD__\"","import React from 'react';\nimport {\n  Box,\n  Button,\n} from '@mui/material';\nimport {\n  Help as HelpIcon,\n} from '@mui/icons-material';\n\ninterface ActionButtonsProps {\n  onShowHelp: () => void;\n  onUpdateCredentials: () => void;\n  areCredentialsOriginal: boolean;\n  isFormValid: boolean;\n}\n\nconst ActionButtons: React.FC<ActionButtonsProps> = ({\n  onShowHelp,\n  onUpdateCredentials,\n  areCredentialsOriginal,\n  isFormValid,\n}) => {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 4 }}>\n      <Button\n        variant=\"outlined\"\n        startIcon={<HelpIcon />}\n        onClick={onShowHelp}\n        sx={{\n          borderRadius: 2,\n          px: 4,\n          py: 1.5,\n          borderWidth: 2,\n          '&:hover': {\n            borderWidth: 2,\n            transform: 'translateY(-2px)',\n            boxShadow: '0 8px 32px rgba(108, 92, 231, 0.2)',\n          },\n          transition: 'all 0.3s ease',\n        }}\n      >\n        Need Help?\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        onClick={onUpdateCredentials}\n        disabled={!isFormValid}\n        sx={{\n          px: 3,\n          py: 1,\n          borderRadius: 2,\n          fontSize: '0.875rem',\n          background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)',\n          '&:hover': {\n            background: 'linear-gradient(135deg, #1565c0 0%, #1e88e5 100%)',\n            transform: 'translateY(-2px)',\n            boxShadow: '0 8px 32px rgba(25, 118, 210, 0.3)',\n          },\n          '&:disabled': {\n            background: '#2d2d2d',\n            color: '#666',\n          },\n          transition: 'all 0.3s ease',\n        }}\n      >\n        {areCredentialsOriginal ? '(Optional) Save Credentials' : '(Optional) Update Credentials'}\n      </Button>\n    </Box>\n  );\n};\n\nexport default ActionButtons;\n","import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Link as MuiLink,\n  Box,\n  Divider,\n} from '@mui/material';\nimport {\n  Help as HelpIcon,\n} from '@mui/icons-material';\n\ninterface HelpDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst HelpDialog: React.FC<HelpDialogProps> = ({ open, onClose }) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n          border: '1px solid #2d2d2d',\n        }\n      }}\n    >\n      <DialogTitle sx={{\n        borderBottom: '1px solid #2d2d2d',\n        pb: 2,\n        display: 'flex',\n        alignItems: 'center',\n        gap: 1,\n      }}>\n        <HelpIcon sx={{ color: 'primary.main' }} />\n        MongoDB Setup Help\n      </DialogTitle>\n      <DialogContent sx={{ pt: 3 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ color: 'primary.main', fontWeight: 'bold' }}>\n          How to get your MongoDB credentials:\n        </Typography>\n        <List sx={{ '& .MuiListItem-root': { py: 0.5 } }}>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText\n              primary=\"1. Go to MongoDB Atlas\"\n              secondary={\n                <MuiLink href=\"https://cloud.mongodb.com\" target=\"_blank\" rel=\"noopener noreferrer\" sx={{ color: 'primary.light' }}>\n                  https://cloud.mongodb.com\n                </MuiLink>\n              }\n            />\n          </ListItem>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText primary=\"2. Create a new cluster or use an existing one\" />\n          </ListItem>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText primary=\"3. Create a database user with read/write permissions\" />\n          </ListItem>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText primary=\"4. Get your connection string from the cluster\" />\n          </ListItem>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText primary=\"5. Use either the connection string or enter credentials separately\" />\n          </ListItem>\n        </List>\n\n        <Box sx={{ mt: 3, p: 2, bgcolor: 'rgba(25, 118, 210, 0.1)', borderRadius: 2, border: '1px solid rgba(25, 118, 210, 0.2)' }}>\n          <Typography variant=\"body2\" sx={{ fontWeight: 'bold', color: 'primary.main', mb: 1 }}>\n            ⚠️ Important Note:\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            The installation link is needed to add this addon to Stremio. <strong>Even if you update your credentials, you must re-copy the link and save that new one to Stremio.</strong>\n          </Typography>\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        <Typography variant=\"h6\" gutterBottom sx={{ color: 'primary.main', fontWeight: 'bold' }}>\n          Input Options:\n        </Typography>\n        <List>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText\n              primary=\"Individual Fields\"\n              secondary=\"Enter username, password, and cluster name separately. The connection URL will be generated automatically. Each field is color-coded to match the URL parts.\"\n            />\n          </ListItem>\n          <ListItem sx={{ px: 0 }}>\n            <ListItemText\n              primary=\"Connection URL\"\n              secondary=\"Paste your full MongoDB connection string. The individual fields will be parsed automatically. The URL is color-coded to show which parts correspond to each field.\"\n            />\n          </ListItem>\n        </List>\n      </DialogContent>\n      <DialogActions sx={{ p: 3, pt: 1 }}>\n        <Button\n          onClick={onClose}\n          variant=\"outlined\"\n          sx={{ borderRadius: 2 }}\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default HelpDialog;\n","import React from 'react';\nimport { Snackbar } from '@mui/material';\n\ninterface SuccessSnackbarProps {\n  open: boolean;\n  message: string;\n  onClose: () => void;\n}\n\nconst SuccessSnackbar: React.FC<SuccessSnackbarProps> = ({ open, message, onClose }) => {\n  return (\n    <Snackbar\n      open={open}\n      onClose={onClose}\n      autoHideDuration={2000}\n      message={message}\n    />\n  );\n};\n\nexport default SuccessSnackbar;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { generateUrl, generateMongoUrl } from '../utils';\nimport {\n  Container,\n  Card,\n  CardContent,\n} from '@mui/material';\nimport type { MongoDBCredentials, FormData } from '../types';\nimport {\n  ConfigureHeader,\n  CredentialsForm,\n  ConnectionUrlForm,\n  InstallationSection,\n  ActionButtons,\n  HelpDialog,\n  SuccessSnackbar,\n} from '../components/Configure';\n\ninterface ConfigureProps {\n  mongoDBCred: MongoDBCredentials;\n  setMongoDBCred: React.Dispatch<React.SetStateAction<MongoDBCredentials>>;\n}\n\nconst Configure: React.FC<ConfigureProps> = ({ mongoDBCred, setMongoDBCred }) => {\n  const [formData, setFormData] = useState<FormData>({\n    user: mongoDBCred.user || '',\n    pass: mongoDBCred.pass || '',\n    cluster: mongoDBCred.cluster || '',\n    db_url: generateUrl(mongoDBCred)\n  });\n\n  const [showHelp, setShowHelp] = useState<boolean>(false);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [successMessage, setSuccessMessage] = useState<string>('');\n  const [showSuccess, setShowSuccess] = useState<boolean>(false);\n\n  // Generate installation URL for the current credentials\n  const installUrl = useMemo(() => {\n    if (formData.user && formData.pass && formData.cluster) {\n      const host = window.location.origin;\n      return `${host}/${formData.user}/${formData.pass}/${formData.cluster}/manifest.json`;\n    }\n    return '';\n  }, [formData.user, formData.pass, formData.cluster]);\n\n  useEffect(() => {\n    setFormData({\n      user: mongoDBCred.user || '',\n      pass: mongoDBCred.pass || '',\n      cluster: mongoDBCred.cluster || '',\n      db_url: mongoDBCred.user && mongoDBCred.pass && mongoDBCred.cluster ? generateUrl(mongoDBCred) : ''\n    });\n  }, [mongoDBCred]);\n\n  // Prefill from query parameters (?user=&passw=&cluster=) to match legacy behavior\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const qpUser = params.get('user');\n    const qpPass = params.get('passw');\n    const qpCluster = params.get('cluster');\n    if (qpUser || qpPass || qpCluster) {\n      const user = qpUser || '';\n      const pass = qpPass || '';\n      const cluster = qpCluster || '';\n      const url = generateMongoUrl(user, pass, cluster);\n      setFormData({ user, pass, cluster, db_url: url });\n      setMongoDBCred({ user, pass, cluster });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Parse MongoDB URL into individual components\n  const parseMongoUrl = (url: string): { user: string; pass: string; cluster: string } => {\n    try {\n      // Handle mongodb+srv:// format\n      const match = url.match(/mongodb\\+srv:\\/\\/([^:]+):([^@]+)@([^.]+)/);\n      if (match) {\n        return {\n          user: match[1],\n          pass: match[2],\n          cluster: match[3]\n        };\n      }\n      return { user: '', pass: '', cluster: '' };\n    } catch (error) {\n      return { user: '', pass: '', cluster: '' };\n    }\n  };\n\n  // Handle URL change and parse into individual fields\n  const handleUrlChange = (url: string): void => {\n    setFormData(prev => ({ ...prev, db_url: url }));\n\n    if (url && url.includes('mongodb+srv://')) {\n      const parsed = parseMongoUrl(url);\n      setFormData(prev => ({\n        ...prev,\n        user: parsed.user,\n        pass: parsed.pass,\n        cluster: parsed.cluster,\n        db_url: url\n      }));\n\n      // Update MongoDB credentials state immediately\n      setMongoDBCred({\n        user: parsed.user,\n        pass: parsed.pass,\n        cluster: parsed.cluster\n      });\n    }\n  };\n\n  // Handle individual field changes and update URL\n  const handleIndividualFieldChange = (field: string, value: string): void => {\n    const newFormData = { ...formData, [field]: value };\n    const url = generateMongoUrl(newFormData.user, newFormData.pass, newFormData.cluster);\n    setFormData({ ...newFormData, db_url: url });\n  };\n\n  // Check if credentials are the original null ones\n  const areCredentialsOriginal = (): boolean => {\n    return !mongoDBCred.user && !mongoDBCred.pass && !mongoDBCred.cluster;\n  };\n\n  // Copy installation URL to clipboard\n  const handleCopyInstallUrl = async () => {\n    if (installUrl) {\n      try {\n        await navigator.clipboard.writeText(installUrl);\n        setSuccessMessage('Installation URL copied');\n        setShowSuccess(true);\n        setTimeout(() => setShowSuccess(false), 2000);\n      } catch (err) {\n        console.error('Failed to copy:', err);\n      }\n    }\n  };\n\n  // Open Stremio deep link\n  const openStremioLink = () => {\n    if (formData.user && formData.pass && formData.cluster) {\n      const stremioDeepLink = `stremio://${window.location.host}/${formData.user}/${formData.pass}/${formData.cluster}/manifest.json`;\n      setSuccessMessage('Opening in Stremio...');\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 2000);\n      window.location.href = stremioDeepLink;\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <ConfigureHeader />\n\n      {/* Form Content */}\n      <Card elevation={0} sx={{\n        background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n        border: '1px solid #2d2d2d',\n        borderRadius: 3,\n      }}>\n        <CardContent sx={{ p: 4 }}>\n          <CredentialsForm\n            formData={formData}\n            showPassword={showPassword}\n            setShowPassword={setShowPassword}\n            onFieldChange={handleIndividualFieldChange}\n          />\n\n          <ConnectionUrlForm\n            formData={formData}\n            showPassword={showPassword}\n            setShowPassword={setShowPassword}\n            onUrlChange={handleUrlChange}\n          />\n\n          <InstallationSection\n            installUrl={installUrl}\n            formData={formData}\n            showPassword={showPassword}\n            onOpenInStremio={openStremioLink}\n            onCopyUrl={handleCopyInstallUrl}\n          />\n\n          <ActionButtons\n            onShowHelp={() => setShowHelp(true)}\n            onUpdateCredentials={() => {\n              setMongoDBCred({\n                user: formData.user,\n                pass: formData.pass,\n                cluster: formData.cluster\n              });\n              const message = areCredentialsOriginal() ? 'Credentials have been saved' : 'Credentials have been updated';\n              setSuccessMessage(message);\n              setShowSuccess(true);\n              setTimeout(() => setShowSuccess(false), 2000);\n            }}\n            areCredentialsOriginal={areCredentialsOriginal()}\n            isFormValid={!!(formData.user && formData.pass && formData.cluster)}\n          />\n        </CardContent>\n      </Card>\n\n      <HelpDialog\n        open={showHelp}\n        onClose={() => setShowHelp(false)}\n      />\n\n      <SuccessSnackbar\n        open={showSuccess}\n        message={successMessage}\n        onClose={() => setShowSuccess(false)}\n      />\n    </Container>\n  );\n};\n\nexport default Configure;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { Visibility as VisibilityIcon } from '@mui/icons-material';\n\nconst ManageHeader: React.FC = () => {\n  return (\n    <Box mb={4}>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <VisibilityIcon sx={{ fontSize: 48, color: 'primary.main', mr: 2 }} />\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom sx={{\n          fontWeight: 'bold',\n          background: 'linear-gradient(45deg, #6c5ce7 30%, #a29bfe 90%)',\n          backgroundClip: 'text',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n        }}>\n          Manage Content\n        </Typography>\n      </Box>\n      <Typography variant=\"h6\" color=\"text.secondary\">\n        Browse and manage your saved stream links\n      </Typography>\n    </Box>\n  );\n};\n\nexport default ManageHeader;\n","import React from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box\n} from '@mui/material';\nimport {\n  Movie as MovieIcon,\n  Tv as TvIcon,\n  Storage as StorageIcon,\n  TrendingUp as TrendingIcon\n} from '@mui/icons-material';\n\n\ninterface StatsCardsProps {\n  stats: {\n    total: number;\n    movies: number;\n    series: number;\n    showing: number;\n  };\n}\n\nconst StatsCards: React.FC<StatsCardsProps> = React.memo(({ stats }) => {\n  // Calculate percentages\n  const moviePercentage = stats.total > 0 ? (stats.movies / stats.total * 100).toFixed(1) : 0;\n  const seriesPercentage = stats.total > 0 ? (stats.series / stats.total * 100).toFixed(1) : 0;\n\n\n\n  const cards = [\n    {\n      title: 'Total Content',\n      value: stats.total,\n      icon: <StorageIcon sx={{ fontSize: 40, color: 'primary.main' }} />,\n      color: 'primary.main',\n      subtitle: 'All saved items'\n    },\n    {\n      title: 'Movies',\n      value: stats.movies,\n      icon: <MovieIcon sx={{ fontSize: 40, color: 'secondary.main' }} />,\n      color: 'secondary.main',\n      subtitle: `${moviePercentage}% of total`\n    },\n    {\n      title: 'Series',\n      value: stats.series,\n      icon: <TvIcon sx={{ fontSize: 40, color: 'success.main' }} />,\n      color: 'success.main',\n      subtitle: `${seriesPercentage}% of total`\n    },\n    {\n      title: 'Currently Showing',\n      value: stats.showing,\n      icon: <TrendingIcon sx={{ fontSize: 40, color: 'warning.main' }} />,\n      color: 'warning.main',\n      subtitle: 'Filtered results'\n    }\n  ];\n\n  return (\n    <Box sx={{\n      display: 'grid',\n      gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(4, 1fr)' },\n      gap: 3,\n      mb: 3\n    }}>\n      {cards.map((card, index) => (\n        <Card\n          key={index}\n          elevation={2}\n          sx={{\n            height: '100%',\n            transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n            '&:hover': {\n              transform: 'translateY(-2px)',\n              boxShadow: 4\n            }\n          }}\n        >\n          <CardContent sx={{ textAlign: 'center', p: 3 }}>\n            <Box sx={{ mb: 2 }}>\n              {card.icon}\n            </Box>\n\n            <Typography variant=\"h4\" component=\"div\" sx={{\n              fontWeight: 'bold',\n              color: card.color,\n              mb: 1\n            }}>\n              {card.value}\n            </Typography>\n\n            <Typography variant=\"h6\" component=\"div\" sx={{\n              fontWeight: 500,\n              mb: 1\n            }}>\n              {card.title}\n            </Typography>\n\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {card.subtitle}\n            </Typography>\n          </CardContent>\n        </Card>\n      ))}\n    </Box>\n  );\n});\n\nStatsCards.displayName = 'StatsCards';\n\nexport default StatsCards;\n","import React, { useCallback } from 'react';\nimport {\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Chip,\n  OutlinedInput,\n  type SelectChangeEvent\n} from '@mui/material';\n\n\ninterface SearchAndFilterProps {\n  searchTerm: string;\n  filterType: 'all' | 'movie' | 'series';\n  onSearch: (value: string) => void;\n  onFilter: (type: 'all' | 'movie' | 'series') => void;\n}\n\nconst SearchAndFilter: React.FC<SearchAndFilterProps> = React.memo(({\n  searchTerm,\n  filterType,\n  onSearch,\n  onFilter\n}) => {\n  // Available content types\n  const availableTypes = ['movie', 'series'];\n\n  // Memoize change handlers\n  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(event.target.value);\n  }, [onSearch]);\n\n  const handleTypeChange = useCallback((event: SelectChangeEvent<string>) => {\n    onFilter(event.target.value as 'all' | 'movie' | 'series');\n  }, [onFilter]);\n\n  return (\n    <Box sx={{ mb: 3 }}>\n      <Box sx={{ display: 'flex', gap: 2, mb: 2, flexWrap: 'wrap' }}>\n        <TextField\n          label=\"Search content...\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n          size=\"small\"\n          sx={{ minWidth: 250, flexGrow: 1 }}\n          placeholder=\"Search by title, description, or ID...\"\n        />\n\n        <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n          <InputLabel>Type</InputLabel>\n          <Select\n            value={filterType}\n            onChange={handleTypeChange}\n            input={<OutlinedInput label=\"Type\" />}\n          >\n            <MenuItem value=\"all\">All Types</MenuItem>\n            {availableTypes.map((type) => (\n              <MenuItem key={type} value={type}>\n                {type.charAt(0).toUpperCase() + type.slice(1)}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Box>\n\n      {/* Results summary */}\n      <Box sx={{ display: 'flex', gap: 1, alignItems: 'center', flexWrap: 'wrap' }}>\n        {searchTerm && (\n          <Chip\n            label={`Search: \"${searchTerm}\"`}\n            color=\"secondary\"\n            variant=\"outlined\"\n            size=\"small\"\n            onDelete={() => onSearch('')}\n          />\n        )}\n\n        {filterType && filterType !== 'all' && (\n          <Chip\n            label={`Type: ${filterType}`}\n            color=\"info\"\n            variant=\"outlined\"\n            size=\"small\"\n            onDelete={() => onFilter('all')}\n          />\n        )}\n      </Box>\n    </Box>\n  );\n});\n\nSearchAndFilter.displayName = 'SearchAndFilter';\n\nexport default SearchAndFilter;\n","import React from 'react';\nimport { Box, Button } from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\n\ninterface AddContentButtonProps {\n  onClick: () => void;\n}\n\nconst AddContentButton: React.FC<AddContentButtonProps> = ({ onClick }) => {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 3 }}>\n      <Button\n        variant=\"contained\"\n        startIcon={<AddIcon />}\n        onClick={onClick}\n        sx={{\n          borderRadius: 2,\n          background: 'linear-gradient(45deg, #2E7D32 30%, #388E3C 90%)',\n          '&:hover': {\n            background: 'linear-gradient(45deg, #1B5E20 30%, #2E7D32 90%)',\n            transform: 'translateY(-1px)',\n            boxShadow: '0 4px 20px rgba(46, 125, 50, 0.3)',\n          },\n          transition: 'all 0.3s ease',\n        }}\n      >\n        Add Saved Stream Link\n      </Button>\n    </Box>\n  );\n};\n\nexport default AddContentButton;\n","import React, { useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Tooltip,\n  Chip\n} from '@mui/material';\nimport { Delete as DeleteIcon } from '@mui/icons-material';\nimport type { ContentItem } from '../../types';\n\ninterface ContentTableProps {\n  content: ContentItem[];\n  filteredContent: ContentItem[];\n  onRemoveContent: (id: string, type: 'movie' | 'series') => Promise<void>;\n}\n\nconst ContentTable: React.FC<ContentTableProps> = React.memo(({ filteredContent, onRemoveContent }) => {\n  // Memoize sorted content to avoid unnecessary re-sorting\n  const sortedContent = useMemo(() => {\n    return [...filteredContent].sort((a, b) => {\n      // Sort by type first, then by title\n      if (a.type !== b.type) {\n        return a.type.localeCompare(b.type);\n      }\n      return (a.name || '').localeCompare(b.name || '');\n    });\n  }, [filteredContent]);\n\n  // Memoize content type counts\n  const contentStats = useMemo(() => {\n    const movies = filteredContent.filter(item => item.type === 'movie').length;\n    const series = filteredContent.filter(item => item.type === 'series').length;\n    return { movies, series, total: filteredContent.length };\n  }, [filteredContent]);\n\n  if (filteredContent.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>\n        <p>No content found. Add some movies or series to get started!</p>\n        <p><small>Movies: {contentStats.movies} | Series: {contentStats.series}</small></p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div style={{ marginBottom: '1rem', display: 'flex', gap: '1rem', alignItems: 'center' }}>\n        <Chip\n          label={`Movies: ${contentStats.movies}`}\n          color=\"primary\"\n          variant=\"outlined\"\n        />\n        <Chip\n          label={`Series: ${contentStats.series}`}\n          color=\"secondary\"\n          variant=\"outlined\"\n        />\n        <Chip\n          label={`Total: ${contentStats.total}`}\n          color=\"default\"\n          variant=\"outlined\"\n        />\n      </div>\n\n      <TableContainer component={Paper} elevation={2}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Type</TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Year</TableCell>\n              <TableCell>Rating</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {sortedContent.map((item) => (\n              <TableRow key={`${item.type}-${item.id}`} hover>\n                <TableCell>\n                  <Chip\n                    label={item.type}\n                    color={item.type === 'movie' ? 'primary' : 'secondary'}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div style={{ fontWeight: 500 }}>{item.name}</div>\n                    {item.description && (\n                      <div style={{ fontSize: '0.875rem', color: '#666', marginTop: '0.25rem' }}>\n                        {item.description.length > 100\n                          ? `${item.description.substring(0, 100)}...`\n                          : item.description\n                        }\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>{item.year || 'N/A'}</TableCell>\n                <TableCell>{item.rating || 'N/A'}</TableCell>\n                <TableCell align=\"center\">\n                  <Tooltip title=\"Remove\">\n                    <IconButton\n                      onClick={() => onRemoveContent(item.id, item.type)}\n                      size=\"small\"\n                      color=\"error\"\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </Tooltip>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n});\n\nContentTable.displayName = 'ContentTable';\n\nexport default ContentTable;\n","import React from 'react';\nimport { Container, Box, CircularProgress, Typography } from '@mui/material';\n\nconst LoadingState: React.FC = () => {\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" minHeight=\"400px\">\n        <CircularProgress size={60} sx={{ color: 'primary.main' }} />\n        <Typography variant=\"h6\" sx={{ mt: 2, color: 'text.secondary' }}>\n          Loading your content...\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default LoadingState;\n","import React from 'react';\nimport { Container, Alert, AlertTitle, Box, Button } from '@mui/material';\n\ninterface ErrorStateProps {\n  error: string;\n}\n\nconst ErrorState: React.FC<ErrorStateProps> = ({ error }) => {\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Alert severity=\"warning\" sx={{\n        textAlign: 'center',\n        background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n        border: '1px solid #2d2d2d',\n      }}>\n        <AlertTitle>Configuration Required</AlertTitle>\n        {error}\n        <Box sx={{ mt: 2 }}>\n          <Button variant=\"contained\" href=\"/configure\" sx={{ borderRadius: 2 }}>\n            Go to Configuration\n          </Button>\n        </Box>\n      </Alert>\n    </Container>\n  );\n};\n\nexport default ErrorState;\n","import React from 'react';\nimport {\n  Box,\n  TextField,\n  Typography,\n  MenuItem,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Button,\n  CircularProgress\n} from '@mui/material';\nimport {\n  ExpandMore as ExpandMoreIcon,\n  Info as InfoIcon,\n  Add as AddIcon\n} from '@mui/icons-material';\n\ninterface AddFormData {\n  type: 'movie' | 'series';\n  imdbId: string;\n  streamLink: string;\n  title: string;\n  description: string;\n  poster: string;\n}\n\ninterface AddContentFormProps {\n  formData: AddFormData;\n  addingContent: boolean;\n  onFormChange: (field: string, value: string) => void;\n  onSubmit: () => void;\n  onCancel: () => void;\n}\n\nconst AddContentForm: React.FC<AddContentFormProps> = ({\n  formData,\n  addingContent,\n  onFormChange,\n  onSubmit,\n  onCancel\n}) => {\n  const formFieldStyle = {\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': { borderColor: '#2d2d2d' },\n      '&:hover fieldset': { borderColor: 'primary.main' },\n      '&.Mui-focused fieldset': { borderColor: 'primary.main' },\n    },\n    '& .MuiFormHelperText-root': {\n      color: 'text.secondary',\n      fontSize: '0.75rem',\n    },\n  };\n\n  return (\n    <Box component=\"form\" sx={{ mt: 2 }}>\n      {/* Required Fields Section */}\n      <Typography variant=\"h6\" sx={{ color: 'primary.main', mb: 2, fontWeight: 'bold' }}>\n        Required Information\n      </Typography>\n\n      {/* Help Box - Important Notes */}\n      <Box sx={{\n        p: 2,\n        mb: 3,\n        bgcolor: 'rgba(25, 118, 210, 0.1)',\n        borderRadius: 2,\n        border: '1px solid rgba(25, 118, 210, 0.2)'\n      }}>\n        <Typography variant=\"subtitle2\" sx={{ color: 'primary.main', fontWeight: 'bold', mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n          <InfoIcon sx={{ fontSize: 20 }} />\n          Important Notes:\n        </Typography>\n        <Box component=\"ul\" sx={{ m: 0, pl: 2 }}>\n          <Typography component=\"li\" variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n            Stream links can be magnet links, direct URLs, or YouTube links\n          </Typography>\n          {formData.type === 'movie' && (\n            <Typography component=\"li\" variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n              For movies, use the IMDB ID (e.g., <code style={{ color: 'primary.light', fontFamily: 'monospace' }}>tt0468569</code> for The Dark Knight)\n            </Typography>\n          )}\n          {formData.type === 'series' && (\n            <>\n              <Typography component=\"li\" variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                For entire series, use the IMDB ID (e.g., <code style={{ color: 'primary.light', fontFamily: 'monospace' }}>tt0944947</code> for Game of Thrones)\n              </Typography>\n              <Typography component=\"li\" variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                For single episodes, use format: <code style={{ color: 'primary.light', fontFamily: 'monospace' }}>imdbid:season:episode</code> (e.g., <code style={{ color: 'primary.light', fontFamily: 'monospace' }}>tt0944947:1:8</code> for GoT S1E8)\n              </Typography>\n            </>\n          )}\n        </Box>\n      </Box>\n\n      <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n        <TextField\n          select\n          fullWidth\n          label=\"Content Type\"\n          value={formData.type}\n          onChange={(e) => onFormChange('type', e.target.value)}\n          sx={formFieldStyle}\n        >\n          <MenuItem value=\"movie\">Movie</MenuItem>\n          <MenuItem value=\"series\">Series</MenuItem>\n        </TextField>\n        <TextField\n          fullWidth\n          label=\"IMDB ID *\"\n          value={formData.imdbId}\n          onChange={(e) => onFormChange('imdbId', e.target.value)}\n          placeholder=\"tt1234567 or paste IMDb URL\"\n          helperText=\"Enter the IMDB ID (e.g., tt1234567) or paste an IMDb URL to auto-extract the ID\"\n          sx={formFieldStyle}\n        />\n      </Box>\n\n      <TextField\n        fullWidth\n        label=\"Stream Link *\"\n        value={formData.streamLink}\n        onChange={(e) => onFormChange('streamLink', e.target.value)}\n        placeholder=\"magnet:?xt=urn:btih:... or http://...\"\n        multiline\n        rows={3}\n        helperText=\"Enter the magnet link, torrent file, or direct stream URL\"\n        sx={{ mb: 3, ...formFieldStyle }}\n      />\n\n      {/* Example Box - Supported Formats */}\n      <Box sx={{\n        p: 2,\n        mb: 4,\n        bgcolor: 'rgba(0, 191, 174, 0.1)',\n        borderRadius: 2,\n        border: '1px solid rgba(0, 191, 174, 0.2)'\n      }}>\n        <Typography variant=\"subtitle2\" sx={{ color: '#00BFAE', fontWeight: 'bold', mb: 1 }}>\n          Supported Stream Link Formats:\n        </Typography>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            • <strong>Magnet links:</strong> <code style={{ color: '#00BFAE', fontFamily: 'monospace' }}>magnet:?xt=urn:btih:...</code>\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            • <strong>Direct URLs:</strong> <code style={{ color: '#00BFAE', fontFamily: 'monospace' }}>https://example.com/video.mp4</code>\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            • <strong>YouTube:</strong> <code style={{ color: '#00BFAE', fontFamily: 'monospace' }}>https://youtube.com/watch?v=...</code>\n          </Typography>\n        </Box>\n      </Box>\n\n      {/* Optional Fields Section - Collapsible Accordion */}\n      <Accordion\n        elevation={0}\n        sx={{\n          background: 'transparent',\n          border: '1px solid #2d2d2d',\n          borderRadius: 2,\n          mb: 4,\n          '&:before': { display: 'none' },\n          '& .MuiAccordionSummary-root': {\n            backgroundColor: 'rgba(108, 92, 231, 0.05)',\n            borderRadius: '8px 8px 0 0',\n          },\n          '& .MuiAccordionDetails-root': {\n            backgroundColor: 'rgba(0, 0, 0, 0.1)',\n            borderRadius: '0 0 8px 8px',\n            pt: 3,\n          }\n        }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon sx={{ color: 'text.secondary' }} />}\n          sx={{\n            '& .MuiAccordionSummary-content': {\n              alignItems: 'center',\n              gap: 1,\n            }\n          }}\n        >\n          <Typography variant=\"h6\" sx={{ color: 'text.secondary', fontWeight: 'bold' }}>\n            Optional Overrides\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary', fontSize: '0.875rem' }}>\n            (Advanced configuration)\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary', mb: 3, fontStyle: 'italic' }}>\n            These fields will override the data fetched from IMDB if provided\n          </Typography>\n\n          <TextField\n            fullWidth\n            label=\"Title\"\n            value={formData.title}\n            onChange={(e) => onFormChange('title', e.target.value)}\n            placeholder=\"Enter custom title (optional)\"\n            helperText=\"Leave empty to use IMDB title\"\n            sx={{ mb: 3, ...formFieldStyle }}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Description\"\n            value={formData.description}\n            onChange={(e) => onFormChange('description', e.target.value)}\n            placeholder=\"Enter custom description (optional)\"\n            helperText=\"Leave empty to use IMDB description\"\n            multiline\n            rows={2}\n            sx={{ mb: 3, ...formFieldStyle }}\n          />\n\n          <TextField\n            fullWidth\n            label=\"Poster URL\"\n            value={formData.poster}\n            onChange={(e) => onFormChange('poster', e.target.value)}\n            placeholder=\"http://example.com/poster.jpg\"\n            helperText=\"Enter custom poster image URL (optional)\"\n            sx={{ mb: 3, ...formFieldStyle }}\n          />\n        </AccordionDetails>\n      </Accordion>\n\n      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n        <Button\n          variant=\"outlined\"\n          onClick={onCancel}\n          disabled={addingContent}\n          sx={{ borderRadius: 2 }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={onSubmit}\n          disabled={!formData.imdbId || !formData.streamLink || addingContent}\n          startIcon={addingContent ? <CircularProgress size={16} /> : <AddIcon />}\n          sx={{\n            borderRadius: 2,\n            background: 'linear-gradient(45deg, #2E7D32 30%, #388E3C 90%)',\n            '&:hover': {\n              background: 'linear-gradient(45deg, #1B5E20 30%, #2E7D32 90%)',\n              transform: 'translateY(-1px)',\n              boxShadow: '0 4px 20px rgba(46, 125, 50, 0.3)',\n            },\n            transition: 'all 0.3s ease',\n          }}\n        >\n          {addingContent ? 'Adding...' : 'Add Content'}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddContentForm;\n","import React from 'react';\nimport { Box, Card, CardContent, Typography, IconButton } from '@mui/material';\nimport { Close as CloseIcon } from '@mui/icons-material';\nimport AddContentForm from './AddContentForm';\n\ninterface AddFormData {\n  type: 'movie' | 'series';\n  imdbId: string;\n  streamLink: string;\n  title: string;\n  description: string;\n  poster: string;\n}\n\ninterface AddContentDialogProps {\n  showAddForm: boolean;\n  formData: AddFormData;\n  addingContent: boolean;\n  onFormChange: (field: string, value: string) => void;\n  onSubmit: () => void;\n  onCancel: () => void;\n}\n\nconst AddContentDialog: React.FC<AddContentDialogProps> = ({\n  showAddForm,\n  formData,\n  addingContent,\n  onFormChange,\n  onSubmit,\n  onCancel\n}) => {\n  if (!showAddForm) return null;\n\n  return (\n    <Box\n      sx={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        zIndex: 1300,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        p: 2,\n      }}\n      onClick={onCancel}\n    >\n      <Card\n        elevation={24}\n        sx={{\n          maxWidth: 900,\n          width: '100%',\n          maxHeight: '90vh',\n          overflow: 'auto',\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #2d2d2d 100%)',\n          border: '1px solid #2d2d2d',\n        }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <CardContent sx={{ p: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\" component=\"h2\" sx={{ color: 'primary.main', fontWeight: 'bold' }}>\n              Add Saved Stream Link\n            </Typography>\n            <IconButton\n              onClick={onCancel}\n              sx={{ color: 'text.secondary', '&:hover': { color: 'error.main' } }}\n            >\n              <CloseIcon />\n            </IconButton>\n          </Box>\n\n          <AddContentForm\n            formData={formData}\n            addingContent={addingContent}\n            onFormChange={onFormChange}\n            onSubmit={onSubmit}\n            onCancel={onCancel}\n          />\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default AddContentDialog;\n","import React, { useState, useEffect } from 'react';\nimport { Container } from '@mui/material';\nimport { generateUrl } from '../utils';\nimport {\n  ManageHeader,\n  StatsCards,\n  SearchAndFilter,\n  AddContentButton,\n  ContentTable,\n  LoadingState,\n  ErrorState,\n  AddContentDialog,\n  useAddContentForm\n} from '../components/Manage';\nimport type { MongoDBCredentials, ContentItem, Stats } from '../types';\n\ninterface ManageProps {\n  mongoDBCred: MongoDBCredentials;\n  setMongoDBCred: React.Dispatch<React.SetStateAction<MongoDBCredentials>>;\n}\n\nconst Manage: React.FC<ManageProps> = ({ mongoDBCred }) => {\n  const [content, setContent] = useState<ContentItem[]>([]);\n  const [filteredContent, setFilteredContent] = useState<ContentItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [filterType, setFilterType] = useState<'all' | 'movie' | 'series'>('all');\n  const [stats, setStats] = useState<Stats>({\n    total: 0,\n    movies: 0,\n    series: 0,\n    showing: 0\n  });\n  const [showAddForm, setShowAddForm] = useState<boolean>(false);\n  const { formData: addFormData, handleFormChange, resetForm } = useAddContentForm();\n  const [addingContent, setAddingContent] = useState<boolean>(false);\n\n  const fetchContent = async (): Promise<void> => {\n    try {\n      // Validate MongoDB credentials\n      if (!mongoDBCred.user || !mongoDBCred.pass || !mongoDBCred.cluster) {\n        setError('MongoDB credentials are not properly configured. Please check your configuration.');\n        setLoading(false);\n        return;\n      }\n\n      // Use the proper URL from the backend instead of hardcoded localhost\n      const baseUrl = window.location.origin;\n\n      // First, check if the backend is accessible\n      try {\n        const healthCheck = await fetch(`${baseUrl}/manifest.json`);\n        if (!healthCheck.ok) {\n          throw new Error(`Backend server not responding: ${healthCheck.status}`);\n        }\n      } catch (healthError) {\n        console.error('Health check failed:', healthError);\n        setError('Backend server is not accessible. Please ensure the server is running.');\n        setLoading(false);\n        return;\n      }\n\n      // Use the new catalog endpoint that returns all content\n      const response = await fetch(`${baseUrl}/catalog`);\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.content && Array.isArray(data.content)) {\n          const allContent = data.content;\n          setContent(allContent);\n          setFilteredContent(allContent);\n          updateStats(allContent);\n          setError(''); // Clear any previous errors\n        } else {\n          // No content found, but this isn't necessarily an error\n          setContent([]);\n          setFilteredContent([]);\n          setStats({ total: 0, movies: 0, series: 0, showing: 0 });\n          setError(''); // Clear any previous errors\n        }\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Failed to fetch content:', response.status, errorData);\n        setError(`Failed to fetch content: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('Fetch content error:', err);\n      setError(`Failed to load content: ${err instanceof Error ? err.message : 'Unknown error'}. Please check your connection and credentials.`);\n      setLoading(false);\n    }\n  };\n\n  const updateStats = (data: ContentItem[]): void => {\n    const movies = data.filter(item => item.type === 'movie').length;\n    const series = data.filter(item => item.type === 'series').length;\n\n    setStats({\n      total: data.length,\n      movies,\n      series,\n      showing: filteredContent.length\n    });\n  };\n\n  const handleSearch = (term: string): void => {\n    setSearchTerm(term);\n    filterContent(term, filterType);\n  };\n\n  const handleFilter = (type: 'all' | 'movie' | 'series'): void => {\n    setFilterType(type);\n    filterContent(searchTerm, type);\n  };\n\n  const filterContent = (term: string, type: 'all' | 'movie' | 'series'): void => {\n    let filtered = content;\n\n    // Filter by type\n    if (type !== 'all') {\n      filtered = filtered.filter(item => item.type === type);\n    }\n\n    // Filter by search term\n    if (term) {\n      filtered = filtered.filter(item =>\n        item.name?.toLowerCase().includes(term.toLowerCase()) ||\n        item.id?.toLowerCase().includes(term.toLowerCase())\n      );\n    }\n\n    setFilteredContent(filtered);\n    updateStats(filtered);\n  };\n\n  const removeContent = async (id: string, type: 'movie' | 'series'): Promise<void> => {\n    try {\n      const baseUrl = window.location.origin;\n      const response = await fetch(`${baseUrl}/manage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          remove_option: 'remove',\n          remove_type: type,\n          remove_db_url: generateUrl(mongoDBCred),\n          remove_imdbID: id\n        })\n      });\n\n      if (response.ok) {\n        // Refresh content after removal\n        await fetchContent();\n      } else {\n        const errorText = await response.text();\n        console.error('Remove content error:', response.status, errorText);\n        alert(`Failed to remove content: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('Error removing content:', err);\n      alert(`Error removing content: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    }\n  };\n\n  const addContent = async (): Promise<void> => {\n    try {\n      setAddingContent(true);\n      const baseUrl = window.location.origin;\n\n      const requestBody = {\n        option: 'add',\n        type: addFormData.type,\n        imdbID: addFormData.imdbId,\n        stream: addFormData.streamLink,\n        db_url: generateUrl(mongoDBCred)\n      };\n\n      // First check if backend is accessible\n      try {\n        const healthCheck = await fetch(`${baseUrl}/manifest.json`);\n        if (!healthCheck.ok) {\n          throw new Error(`Backend not accessible: ${healthCheck.status}`);\n        }\n      } catch (healthError) {\n        console.error('Backend health check failed:', healthError);\n        throw new Error('Backend server is not accessible. Please ensure the server is running.');\n      }\n\n      const response = await fetch(`${baseUrl}/manage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams(requestBody)\n      });\n\n      if (response.ok) {\n        // Reset form and refresh content\n        resetForm();\n        setShowAddForm(false);\n        await fetchContent();\n        alert('Content added successfully!');\n      } else {\n        const errorText = await response.text();\n        console.error('Add content error:', response.status, errorText);\n        alert(`Failed to add content: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error('Error adding content:', err);\n      alert(`Error adding content: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    } finally {\n      setAddingContent(false);\n    }\n  };\n\n  const resetAddForm = (): void => {\n    resetForm();\n    setShowAddForm(false);\n  };\n\n  useEffect(() => {\n    fetchContent();\n  }, []);\n\n  if (loading) {\n    return <LoadingState />;\n  }\n\n  if (error) {\n    return <ErrorState error={error} />;\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <ManageHeader />\n      <StatsCards stats={stats} />\n\n      <SearchAndFilter\n        searchTerm={searchTerm}\n        filterType={filterType}\n        onSearch={handleSearch}\n        onFilter={handleFilter}\n      />\n\n      <AddContentButton onClick={() => setShowAddForm(true)} />\n\n      <ContentTable\n        content={content}\n        filteredContent={filteredContent}\n        onRemoveContent={removeContent}\n      />\n\n      <AddContentDialog\n        showAddForm={showAddForm}\n        formData={addFormData}\n        addingContent={addingContent}\n        onFormChange={handleFormChange}\n        onSubmit={addContent}\n        onCancel={resetAddForm}\n      />\n    </Container>\n  );\n};\n\nexport default Manage;\n","import { useState } from 'react';\n\ninterface AddFormData {\n  type: 'movie' | 'series';\n  imdbId: string;\n  streamLink: string;\n  title: string;\n  description: string;\n  poster: string;\n}\n\nexport const useAddContentForm = () => {\n  const [formData, setFormData] = useState<AddFormData>({\n    type: 'movie',\n    imdbId: '',\n    streamLink: '',\n    title: '',\n    description: '',\n    poster: ''\n  });\n\n  const handleFormChange = (field: string, value: string): void => {\n    // Special handling for IMDb ID field to extract ID from URLs\n    if (field === 'imdbId') {\n      // Check if the pasted value is an IMDb URL and extract the ID\n      const imdbUrlRegex = /https?:\\/\\/(?:www\\.)?imdb\\.com\\/title\\/(tt\\d+)/i;\n      const match = value.match(imdbUrlRegex);\n\n      if (match) {\n        // Extract the IMDb ID from the URL\n        const extractedId = match[1];\n        setFormData(prev => ({\n          ...prev,\n          [field]: extractedId\n        }));\n        return;\n      }\n    }\n\n    // Normal field update\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const resetForm = (): void => {\n    setFormData({\n      type: 'movie',\n      imdbId: '',\n      streamLink: '',\n      title: '',\n      description: '',\n      poster: ''\n    });\n  };\n\n  return {\n    formData,\n    setFormData,\n    handleFormChange,\n    resetForm\n  };\n};\n","import { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\n\n// Import pages\nimport Navigation from './components/Navigation.tsx';\nimport Home from './pages/Home.tsx';\nimport Configure from './pages/Configure.tsx';\nimport Manage from './pages/Manage.tsx';\n\n// Import types\nimport type { MongoDBCredentials } from './types';\n\nfunction App() {\n  const [MongoDBCred, setMongoDBCred] = useState<MongoDBCredentials>({\n    user: null,\n    pass: null,\n    cluster: null,\n  });\n  const [hasCredentials, setHasCredentials] = useState<boolean>(false);\n\n  // Load MongoDB Credentials from environment variables\n  useEffect(() => {\n    const envUser = import.meta.env.VITE_MONGO_USERNAME;\n    const envPass = import.meta.env.VITE_MONGO_PASSWORD;\n    const envCluster = import.meta.env.VITE_MONGO_CLUSTER_URL;\n\n    console.log('Environment variables loaded:', {\n      envUser: envUser ? 'SET' : 'NOT SET',\n      envPass: envPass ? 'SET' : 'NOT SET',\n      envCluster: envCluster ? 'SET' : 'NOT SET',\n      actualValues: {\n        user: envUser,\n        pass: envPass ? '***' : null,\n        cluster: envCluster\n      }\n    });\n\n    if (envUser && envPass && envCluster) {\n      console.log('Setting credentials from environment variables');\n      setMongoDBCred({\n        user: envUser,\n        pass: envPass,\n        cluster: envCluster,\n      });\n      setHasCredentials(true);\n    } else {\n      console.log('Environment variables not complete, setting hasCredentials to false');\n      setHasCredentials(false);\n    }\n  }, []);\n\n  // Check if we have valid credentials\n  const hasValidCredentials = hasCredentials && MongoDBCred.user && MongoDBCred.pass && MongoDBCred.cluster;\n\n  return (\n    <BrowserRouter>\n      <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n        <Navigation />\n        <div style={{ flexGrow: 1, padding: '20px' }}>\n          {/* Debug Info - Remove this later */}\n          <div style={{ background: '#f0f0f0', padding: '10px', margin: '10px 0', borderRadius: '4px', fontSize: '12px' }}>\n            <strong>Debug Info:</strong><br />\n            envUser: {import.meta.env.VITE_MONGO_USERNAME ? 'SET' : 'NOT SET'}<br />\n            envPass: {import.meta.env.VITE_MONGO_PASSWORD ? 'SET' : 'NOT SET'}<br />\n            envCluster: {import.meta.env.VITE_MONGO_CLUSTER_URL ? 'SET' : 'NOT SET'}<br />\n            hasCredentials: {hasCredentials.toString()}<br />\n            hasValidCredentials: {hasValidCredentials ? 'true' : 'false'}\n          </div>\n\n          <Routes>\n            <Route path=\"/configure\" element={\n              <Configure mongoDBCred={MongoDBCred} setMongoDBCred={setMongoDBCred} />\n            } />\n            <Route path=\"/manage\" element={\n              hasValidCredentials ? (\n                <Manage mongoDBCred={MongoDBCred} setMongoDBCred={setMongoDBCred} />\n              ) : (\n                <Navigate to=\"/configure\" replace />\n              )\n            } />\n            <Route path=\"/\" element={\n              hasValidCredentials ? (\n                <Home />\n              ) : (\n                <Navigate to=\"/configure\" replace />\n              )\n            } />\n            <Route path=\"*\" element={\n              hasValidCredentials ? (\n                <Home />\n              ) : (\n                <Navigate to=\"/configure\" replace />\n              )\n            } />\n          </Routes>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client'\nimport { ThemeProvider, createTheme } from '@mui/material/styles'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport App from './App.tsx'\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#6c5ce7', // Stremio's signature purple\n      light: '#a29bfe',\n      dark: '#5f3dc4',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      main: '#fd79a8', // Stremio's pink accent\n      light: '#fdcb6e',\n      dark: '#e84393',\n      contrastText: '#ffffff',\n    },\n    background: {\n      default: '#0f0f23', // Stremio's dark background\n      paper: '#1a1a2e',\n    },\n    text: {\n      primary: '#ffffff',\n      secondary: '#b3b3b3',\n    },\n    divider: '#2d2d2d',\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    h1: {\n      fontWeight: 600,\n    },\n    h2: {\n      fontWeight: 600,\n    },\n    h3: {\n      fontWeight: 600,\n    },\n    h4: {\n      fontWeight: 600,\n    },\n    h5: {\n      fontWeight: 600,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n  shape: {\n    borderRadius: 12,\n  },\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          backgroundImage: 'none',\n          backgroundColor: '#1a1a2e',\n          border: '1px solid #2d2d2d',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          fontWeight: 600,\n        },\n      },\n    },\n    MuiAppBar: {\n      styleOverrides: {\n        root: {\n          backgroundImage: 'none',\n          backgroundColor: '#1a1a2e',\n          borderBottom: '1px solid #2d2d2d',\n        },\n      },\n    },\n  },\n})\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>\n)\n"],"names":["m","require$$0","client","createRoot","hydrateRoot","PopStateEventType","createBrowserHistory","options","getLocation","createHref2","validateLocation","window","window2","document","defaultView","v5Compat","globalHistory","history","action","listener","index","getIndex","replaceState","state","idx","handlePop","nextIndex","delta","location","push","to","createLocation","historyState","getHistoryState","url","createHref","pushState","error","DOMException","name","assign","replace2","createURL","isAbsolute","base","origin","href","invariant","createPath","replace","startsWith","URL","createBrowserURLImpl","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","pathname","search","hash","go","n","getUrlBasedHistory","usr","key","value","message","warning","cond","console","warn","e","current","parsePath","Math","random","toString","substring","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","matchRoutes","routes","locationArg","basename","allowPartial","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","length","slice","every","i","compareIndexes","routesMeta","map","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","matchRoutesImpl","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","joinPaths","concat","children","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","join","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo2","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getResolveToMatches","pathMatches","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","validMutationMethodsArr","Set","validRequestMethodsArr","DataRouterContext","React.createContext","displayName","DataRouterStateContext","ViewTransitionContext","isTransitioning","Map","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","React2.useContext","useLocation","navigateEffectWarning","useIsomorphicLayoutEffect","cb","static","React2.useLayoutEffect","useNavigate","router","hookName","ctx","getDataRouterConsoleError","useDataRouterContext","id","useCurrentRouteId","activeRef","React2.useRef","React2.useCallback","async","navigate","fromRouteId","useNavigateStable","dataRouterContext","navigator","routePathnamesJson","parse","relative","useNavigateUnstable","useResolvedPath","React2.useMemo","useRoutesImpl","dataRouterState","future","parentMatches","routeMatch","parentParams","parentPathname","parentPathnameBase","parentRoute","warningOnce","locationFromContext","parsedLocationArg","parentSegments","element","Component","lazy","renderedMatches","errors","initialized","errorIndex","findIndex","keys","min","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","loaderData","errors2","needsToRunLoader","loader","hasOwnProperty","reduceRight","shouldRenderHydrateFallback","errorElement","defaultErrorElement","matches2","getChildren","React2.createElement","RenderedRoute","routeContext","ErrorBoundary","RenderErrorBoundary","revalidation","component","_renderMatches","Provider","navigationType","DefaultErrorComponent","useDataRouterState","routeId","useRouteError","status","statusText","internal","isRouteErrorResponse","stack","lightgrey","preStyles","padding","backgroundColor","codeStyles","devInfo","React2.Fragment","style","fontStyle","React2.createContext","React2.Component","constructor","props","super","this","getDerivedStateFromError","getDerivedStateFromProps","componentDidCatch","errorInfo","render","staticContext","_deepestRenderedBoundaryId","useRouteContext","thisRoute","alreadyWarned","Navigate","isStatic","React3.useContext","jsonPath","React3.useEffect","Route","Router","basenameProp","locationProp","staticProp","navigationContext","React3.useMemo","locationContext","trailingPathname","React3.createElement","Routes","createRoutesFromChildren","React3.Children","React3.isValidElement","treePath","type","React3.Fragment","apply","hasErrorBoundary","shouldRevalidate","handle","React3.memo","defaultMethod","defaultEncType","isHtmlElement","object","tagName","_formDataSupportsSubmitter","supportedFormEncTypes","getFormEncType","encType","has","getFormSubmissionInfo","target","method","formData","body","attr","getAttribute","FormData","isButtonElement","isInputElement","form","createElement","isFormDataSubmitterSupported","prefix","append","invariant2","isHtmlLinkDescriptor","rel","imageSrcSet","imageSizes","getKeyedPrefetchLinks","manifest","routeModules","descriptors","preloads","set","deduped","descriptor","obj","sorted","sortKeys","add","link","dedupeLinkDescriptors","Promise","all","mod","routeModulesCache","routeModule","import","module","__reactRouterContext","isSpaMode","reload","loadRouteModule","links","flat","as","getNewMatchesForLinks","page","nextMatches","currentMatches","mode","isNew","matchPathChanged","manifestRoute","hasLoader","routeChoice","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","getModuleLinkHrefs","includeHydrateFallback","hrefs","clientActionModule","clientLoaderModule","hydrateFallbackModule","imports","useDataRouterContext2","context","React8.useContext","getOwnPropertyNames","prototype","FrameworkContext","React8.createContext","useFrameworkContext","composeEventHandlers","theirHandler","ourHandler","event","defaultPrevented","PrefetchPageLinks","linkProps","React8.useMemo","React8.createElement","PrefetchPageLinksImpl","useDataRouterStateContext","newMatchesForData","newMatchesForAssets","dataHrefs","routesParams","foundOptOutRoute","m2","hasClientLoader","size","reqUrl","extension","singleFetchUrl","searchParams","moduleHrefs","keyedPrefetchLinks","setKeyedPrefetchLinks","React8.useState","React8.useEffect","interrupted","then","useKeyedPrefetchLinks","React8.Fragment","nonce","mergeRefs","refs","ref","isBrowser","__reactRouterVersion","BrowserRouter","historyRef","React10.useRef","setStateImpl","React10.useState","setState","React10.useCallback","newState","React10.startTransition","React10.useLayoutEffect","React10.createElement","ABSOLUTE_URL_REGEX2","Link","React10.forwardRef","onClick","discover","prefetch","reloadDocument","preventScrollReset","viewTransition","forwardedRef","absoluteHref","React10.useContext","isExternal","targetUrl","protocol","joinedPathname","useHref","shouldPrefetch","prefetchRef","prefetchHandlers","theirElementProps","frameworkContext","maybePrefetch","setMaybePrefetch","setShouldPrefetch","onFocus","onBlur","onMouseEnter","onMouseLeave","onTouchStart","React8.useRef","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","observe","disconnect","setTimeout","clearTimeout","setIntent","cancelIntent","usePrefetchBehavior","internalOnClick","replaceProp","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","useLinkClickHandler","React10.Fragment","useDataRouterContext3","getDataRouterConsoleError2","ariaCurrentProp","className","classNameProp","styleProp","routerState","vtContext","currentPath","currentLocation","nextPath","nextLocation","useViewTransitionState","nextLocationPathname","navigation","endSlashPosition","isActive","isPending","renderProps","ariaCurrent","Boolean","fetcherKey","onSubmit","submit","currentRouteId","getUniqueFetcherId","fetch","formMethod","formEncType","flushSync","useSubmit","formAction","URLSearchParams","indexValues","getAll","delete","qs","useFormAction","submitter","nativeEvent","submitMethod","currentTarget","fetcherId","String","Navigation","navItems","label","icon","jsx","HomeIcon","EditIcon","SettingsIcon","customColor","AppBar","position","elevation","Container","maxWidth","Toolbar","sx","minHeight","jsxs","Typography","variant","flexGrow","textDecoration","color","fontWeight","display","alignItems","gap","Chip","fontSize","Box","item","React","Fragment","Button","startIcon","borderRadius","px","py","minWidth","justifyContent","border","borderColor","Divider","orientation","flexItem","height","mx","HeaderSection","textAlign","mb","gutterBottom","background","backgroundClip","WebkitBackgroundClip","WebkitTextFillColor","paragraph","ActionButtons","flexDirection","xs","md","flex","fullWidth","boxShadow","transform","transition","borderWidth","FeatureCards","Card","CardContent","p","StorageIcon","DashboardIcon","Home","generateUrl","mongoCred","user","pass","cluster","generateMongoUrl","trim","ConfigureHeader","CredentialsForm","showPassword","setShowPassword","onFieldChange","SecurityIcon","mr","width","TextField","onChange","placeholder","InputProps","endAdornment","InputAdornment","IconButton","edge","VisibilityOffIcon","VisibilityIcon","ConnectionUrlForm","onUrlChange","db_url","multiline","rows","fontFamily","top","left","right","bottom","backdropFilter","pointerEvents","zIndex","textShadow","mt","InstallationSection","installUrl","onOpenInStremio","onCopyUrl","src","alt","marginRight","whiteSpace","disabled","InstallDesktopIcon","readOnly","Tooltip","title","ContentCopyIcon","borderLeft","Alert","severity","InfoIcon","onShowHelp","onUpdateCredentials","areCredentialsOriginal","isFormValid","HelpIcon","HelpDialog","open","onClose","Dialog","PaperProps","DialogTitle","borderBottom","pb","DialogContent","pt","List","ListItem","ListItemText","primary","secondary","MuiLink","bgcolor","my","DialogActions","SuccessSnackbar","Snackbar","autoHideDuration","Configure","mongoDBCred","setMongoDBCred","setFormData","useState","showHelp","setShowHelp","successMessage","setSuccessMessage","showSuccess","setShowSuccess","useMemo","useEffect","qpUser","get","qpPass","qpCluster","newFormData","prev","parsed","parseMongoUrl","stremioDeepLink","host","clipboard","writeText","err","ManageHeader","StatsCards","memo","stats","moviePercentage","total","movies","toFixed","seriesPercentage","series","cards","subtitle","MovieIcon","TvIcon","showing","TrendingIcon","gridTemplateColumns","sm","card","SearchAndFilter","searchTerm","filterType","onSearch","onFilter","handleSearchChange","useCallback","handleTypeChange","flexWrap","FormControl","InputLabel","Select","input","OutlinedInput","MenuItem","toUpperCase","onDelete","AddContentButton","AddIcon","ContentTable","filteredContent","onRemoveContent","sortedContent","localeCompare","contentStats","marginBottom","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","hover","description","marginTop","year","rating","DeleteIcon","LoadingState","CircularProgress","ErrorState","AlertTitle","AddContentForm","addingContent","onFormChange","onCancel","formFieldStyle","pl","select","imdbId","helperText","streamLink","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","poster","AddContentDialog","showAddForm","maxHeight","overflow","stopPropagation","CloseIcon","Manage","content","setContent","setFilteredContent","loading","setLoading","setError","setSearchTerm","setFilterType","setStats","setShowAddForm","addFormData","handleFormChange","resetForm","imdbUrlRegex","extractedId","useAddContentForm","setAddingContent","fetchContent","baseUrl","healthCheck","ok","healthError","response","data","json","Array","isArray","allContent","updateStats","errorData","catch","filterContent","term","filtered","headers","remove_option","remove_type","remove_db_url","remove_imdbID","errorText","text","alert","requestBody","option","imdbID","stream","App","MongoDBCred","hasCredentials","setHasCredentials","envUser","envCluster","log","envPass","actualValues","hasValidCredentials","margin","theme","createTheme","palette","main","light","dark","contrastText","default","paper","divider","typography","h1","h2","h3","h4","h5","h6","shape","components","MuiCard","styleOverrides","root","backgroundImage","MuiButton","textTransform","MuiAppBar","ReactDOM","getElementById","ThemeProvider","CssBaseline"],"mappings":"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","x_google_ignoreList":[0,1]}